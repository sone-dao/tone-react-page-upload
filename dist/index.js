'use client'
  'use strict';

var require$$0$1 = require('react/jsx-runtime');
var require$$1$1 = require('react');
var require$$2$1 = require('react-dom');

(function() {
    const env = {};
    try {
        if (process) {
            process.env = Object.assign({}, process.env);
            Object.assign(process.env, env);
            return;
        }
    } catch (e) {} // avoid ReferenceError: process is not defined
    globalThis.process = { env:env };
})();

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
				var args = [null];
				args.push.apply(args, arguments);
				var Ctor = Function.bind.apply(f, args);
				return new Ctor();
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var n$2="undefined"!=typeof window?window:null;

class ToneApiService {
    constructor() {
        var _a;
        this.auth = {
            /**
             *
             * @param email
             * @returns
             */
            sendAuthEmail: (email) => new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.debug && console.log(`Sending auth e-mail to: ${email}...`);
                const url = this.api + '/auth/email/' + email;
                this.debug && console.log('url: ' + url);
                return fetch(url)
                    .then((response) => response.json())
                    .then((response) => resolve(response))
                    .catch((error) => reject(error));
            })),
            verifyCode: (email, code) => new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.debug && console.log(`Verifying code...`);
                const url = this.api + `/auth/email/${email}/${code}`;
                this.debug && console.log('url: ' + url);
                return fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
                    .then((response) => {
                    const sessionToken = response.headers.get('x-tone-session-token') || '';
                    !sessionToken && reject({ ok: false, message: 'NO_SESSION_TOKEN' });
                    localStorage.setItem('tone.session', sessionToken);
                    return response.json();
                })
                    .then((response) => !response.ok ? reject(response) : resolve(response))
                    .catch((error) => reject(error));
            })),
        };
        this.user = {
            createUser: (data) => new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.debug && console.log(`Creating user...`, { data });
                const url = this.api + '/users';
                this.debug && console.log('url: ' + url);
                return fetch(url, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                })
                    .then((response) => response.json())
                    .then((response) => !response.ok ? reject(response) : resolve(response))
                    .catch((error) => reject(error));
            })),
            updateSelf: (data) => new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.debug && console.log(`Updating self...`, { data });
                const url = this.api + '/users/self';
                this.debug && console.log('url: ' + url);
                return fetch(url, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: 'BEARER ' + this.sessionToken,
                    },
                    body: JSON.stringify(data),
                })
                    .then((response) => response.json())
                    .then((response) => !response.ok ? reject(response) : resolve(response))
                    .catch((error) => reject(error));
            })),
        };
        this.sessionToken = n$2 && localStorage.getItem('tone.session');
        this.api = (n$2 && ((_a = n$2.TONE_DEBUG) === null || _a === void 0 ? void 0 : _a.api)) || 'https://api.tone.audio/v1';
        this.debug = n$2 && !n$2.TONE_DEBUG ? false : true;
    }
}

var dist = ToneApiService;


var useToneApi = /*@__PURE__*/getDefaultExportFromCjs(dist);

function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var index = memoize(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

var isPropValid_browser_esm = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: index
});

var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(isPropValid_browser_esm);

var Textarea;
var RadioGroup;
var Radio;
var Page;
var Input;
var Chip;
var e=require$$0$1,t=require$$1$1,r=require$$2$1;function n$1(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}});}})),t.default=e,Object.freeze(t)}var s=n$1(t);const o={prefix:String(Math.round(1e10*Math.random())),current:0},a=t.createContext(o),i=t.createContext(!1);let l=Boolean("undefined"!=typeof window&&window.document&&window.document.createElement),u=new WeakMap;const c="function"==typeof t.useId?function(e){let r=t.useId(),[n]=t.useState(f()),s=n||"test"===process.env.NODE_ENV?"react-aria":`react-aria${o.prefix}`;return e||`${s}-${r}`}:function(e){let r=t.useContext(a);r!==o||l||console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");let n=function(e=!1){let r=t.useContext(a),n=t.useRef(null);if(null===n.current&&!e){var s,o;let e=null===(o=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)||void 0===o||null===(s=o.ReactCurrentOwner)||void 0===s?void 0:s.current;if(e){let t=u.get(e);null==t?u.set(e,{id:r.current,state:e.memoizedState}):e.memoizedState!==t.state&&(r.current=t.id,u.delete(e));}n.current=++r.current;}return n.current}(!!e),s=r===o&&"test"===process.env.NODE_ENV?"react-aria":`react-aria${r.prefix}`;return e||`${s}-${n}`};function d(){return !1}function p(){return !0}function h(e){return ()=>{}}function f(){return "function"==typeof t.useSyncExternalStore?t.useSyncExternalStore(h,d,p):t.useContext(i)}function m(e,t,r){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,r);}function g(e,r,n){let[s,o]=t.useState(e||r),a=t.useRef(void 0!==e),i=void 0!==e;t.useEffect((()=>{let e=a.current;e!==i&&console.warn(`WARN: A component changed from ${e?"controlled":"uncontrolled"} to ${i?"controlled":"uncontrolled"}.`),a.current=i;}),[i]);let l=i?e:s,u=t.useCallback(((e,...t)=>{let r=(e,...t)=>{n&&(Object.is(l,e)||n(e,...t)),i||(l=e);};if("function"==typeof e){console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320"),o(((n,...s)=>{let o=e(i?l:n,...s);return r(o,...t),i?n:o}));}else i||o(e),r(e,...t);}),[i,l,n]);return [l,u]}function v(e){var t,r,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(r=v(e[t]))&&(n&&(n+=" "),n+=r);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function y(){for(var e,t,r=0,n="";r<arguments.length;)(e=arguments[r++])&&(t=v(e))&&(n&&(n+=" "),n+=t);return n}const b="undefined"!=typeof document?t.useLayoutEffect:()=>{};function x(e){const r=t.useRef(null);return b((()=>{r.current=e;}),[e]),t.useCallback(((...e)=>(0, r.current)(...e)),[])}let w=Boolean("undefined"!=typeof window&&window.document&&window.document.createElement),P=new Map;function T(e){let[r,n]=t.useState(e),s=t.useRef(null),o=c(r),a=t.useCallback((e=>{s.current=e;}),[]);return w&&P.set(o,a),b((()=>{let e=o;return ()=>{P.delete(e);}}),[o]),t.useEffect((()=>{let e=s.current;e&&(s.current=null,n(e));})),o}function C(e,t){if(e===t)return e;let r=P.get(e);if(r)return r(t),t;let n=P.get(t);return n?(n(e),e):t}function E(e=[]){let r=T(),[n,s]=function(e){let[r,n]=t.useState(e),s=t.useRef(null),o=x((()=>{let e=s.current.next();e.done?s.current=null:r===e.value?o():n(e.value);}));b((()=>{s.current&&o();}));let a=x((e=>{s.current=e(r),o();}));return [r,a]}(r),o=t.useCallback((()=>{s((function*(){yield r,yield document.getElementById(r)?r:void 0;}));}),[r,s]);return b(o,[r,o,...e]),n}function S(...e){return (...t)=>{for(let r of e)"function"==typeof r&&r(...t);}}const k=e=>{var t;return null!==(t=null==e?void 0:e.ownerDocument)&&void 0!==t?t:document},M=e=>{if(e&&"window"in e&&e.window===e)return e;return k(e).defaultView||window};function A(...e){let t={...e[0]};for(let r=1;r<e.length;r++){let n=e[r];for(let e in n){let r=t[e],s=n[e];"function"==typeof r&&"function"==typeof s&&"o"===e[0]&&"n"===e[1]&&e.charCodeAt(2)>=65&&e.charCodeAt(2)<=90?t[e]=S(r,s):"className"!==e&&"UNSAFE_className"!==e||"string"!=typeof r||"string"!=typeof s?"id"===e&&r&&s?t.id=C(r,s):t[e]=void 0!==s?s:r:t[e]=y(r,s);}}return t}const D=new Set(["id"]),I=new Set(["aria-label","aria-labelledby","aria-describedby","aria-details"]),V=new Set(["href","target","rel","download","ping","referrerPolicy"]),L=/^(data-.*)$/;function K(e,t={}){let{labelable:r,isLink:n,propNames:s}=t,o={};for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(D.has(t)||r&&I.has(t)||n&&V.has(t)||(null==s?void 0:s.has(t))||L.test(t))&&(o[t]=e[t]);return o}function R(e){if(function(){if(null==N){N=!1;try{document.createElement("div").focus({get preventScroll(){return N=!0,!0}});}catch(e){}}return N}())e.focus({preventScroll:!0});else {let t=function(e){var t=e.parentNode,r=[],n=document.scrollingElement||document.documentElement;for(;t instanceof HTMLElement&&t!==n;)(t.offsetHeight<t.scrollHeight||t.offsetWidth<t.scrollWidth)&&r.push({element:t,scrollTop:t.scrollTop,scrollLeft:t.scrollLeft}),t=t.parentNode;n instanceof HTMLElement&&r.push({element:n,scrollTop:n.scrollTop,scrollLeft:n.scrollLeft});return r}(e);e.focus(),function(e){for(let{element:t,scrollTop:r,scrollLeft:n}of e)t.scrollTop=r,t.scrollLeft=n;}(t);}}let N=null;function j(e){var t;return "undefined"!=typeof window&&null!=window.navigator&&((null===(t=window.navigator.userAgentData)||void 0===t?void 0:t.brands.some((t=>e.test(t.brand))))||e.test(window.navigator.userAgent))}function F(e){var t;return "undefined"!=typeof window&&null!=window.navigator&&e.test((null===(t=window.navigator.userAgentData)||void 0===t?void 0:t.platform)||window.navigator.platform)}function O(){return F(/^Mac/i)}function B(){return F(/^iPad/i)||O()&&navigator.maxTouchPoints>1}function W(){return F(/^iPhone/i)||B()}function z(){return j(/AppleWebKit/i)&&!j(/Chrome/i)}function U(){return j(/Android/i)}const H=t.createContext({isNative:!0,open:function(e,t){!function(e,t){if(e instanceof HTMLAnchorElement)t(e);else if(e.hasAttribute("data-href")){let r=document.createElement("a");r.href=e.getAttribute("data-href"),e.hasAttribute("data-target")&&(r.target=e.getAttribute("data-target")),e.hasAttribute("data-rel")&&(r.rel=e.getAttribute("data-rel")),e.hasAttribute("data-download")&&(r.download=e.getAttribute("data-download")),e.hasAttribute("data-ping")&&(r.ping=e.getAttribute("data-ping")),e.hasAttribute("data-referrer-policy")&&(r.referrerPolicy=e.getAttribute("data-referrer-policy")),e.appendChild(r),t(r),e.removeChild(r);}}(e,(e=>_(e,t)));}});function $(){return t.useContext(H)}function _(e,t,r=!0){var n,s;let{metaKey:o,ctrlKey:a,altKey:i,shiftKey:l}=t;j(/Firefox/i)&&(null===(s=window.event)||void 0===s||null===(n=s.type)||void 0===n?void 0:n.startsWith("key"))&&"_blank"===e.target&&(O()?o=!0:a=!0);let u=z()&&O()&&!B()?new KeyboardEvent("keydown",{keyIdentifier:"Enter",metaKey:o,ctrlKey:a,altKey:i,shiftKey:l}):new MouseEvent("click",{metaKey:o,ctrlKey:a,altKey:i,shiftKey:l,bubbles:!0,cancelable:!0});_.isOpening=r,R(e),e.dispatchEvent(u),_.isOpening=!1;}_.isOpening=!1;let G=new Map,q=new Set;function Y(){if("undefined"==typeof window)return;let e=t=>{let r=G.get(t.target);if(r&&(r.delete(t.propertyName),0===r.size&&(t.target.removeEventListener("transitioncancel",e),G.delete(t.target)),0===G.size)){for(let e of q)e();q.clear();}};document.body.addEventListener("transitionrun",(t=>{let r=G.get(t.target);r||(r=new Set,G.set(t.target,r),t.target.addEventListener("transitioncancel",e)),r.add(t.propertyName);})),document.body.addEventListener("transitionend",e);}function X(e){requestAnimationFrame((()=>{0===G.size?e():q.add(e);}));}function Z(){let e=t.useRef(new Map),r=t.useCallback(((t,r,n,s)=>{let o=(null==s?void 0:s.once)?(...t)=>{e.current.delete(n),n(...t);}:n;e.current.set(n,{type:r,eventTarget:t,fn:o,options:s}),t.addEventListener(r,n,s);}),[]),n=t.useCallback(((t,r,n,s)=>{var o;let a=(null===(o=e.current.get(n))||void 0===o?void 0:o.fn)||n;t.removeEventListener(r,a,s),e.current.delete(n);}),[]),s=t.useCallback((()=>{e.current.forEach(((e,t)=>{n(e.eventTarget,e.type,t,e.options);}));}),[n]);return t.useEffect((()=>s),[s]),{addGlobalListener:r,removeGlobalListener:n,removeAllGlobalListeners:s}}function J(e,t){let{id:r,"aria-label":n,"aria-labelledby":s}=e;if(r=T(r),s&&n){let e=new Set([r,...s.trim().split(/\s+/)]);s=[...e].join(" ");}else s&&(s=s.trim().split(/\s+/).join(" "));return n||s||!t||(n=t),{id:r,"aria-label":n,"aria-labelledby":s}}function Q(e,t){b((()=>{if(e&&e.ref&&t)return e.ref.current=t.current,()=>{e.ref.current=null;}}));}function ee(e){for(te(e)&&(e=e.parentElement);e&&!te(e);)e=e.parentElement;return e||document.scrollingElement||document.documentElement}function te(e){let t=window.getComputedStyle(e);return /(auto|scroll)/.test(t.overflow+t.overflowX+t.overflowY)}"undefined"!=typeof document&&("loading"!==document.readyState?Y():document.addEventListener("DOMContentLoaded",Y));let re=0;const ne=new Map;function se(e,t){let r=oe(e,t,"left"),n=oe(e,t,"top"),s=t.offsetWidth,o=t.offsetHeight,a=e.scrollLeft,i=e.scrollTop,{borderTopWidth:l,borderLeftWidth:u}=getComputedStyle(e),c=e.scrollLeft+parseInt(u,10),d=e.scrollTop+parseInt(l,10),p=c+e.clientWidth,h=d+e.clientHeight;r<=a?a=r-parseInt(u,10):r+s>p&&(a+=r+s-p),n<=d?i=n-parseInt(l,10):n+o>h&&(i+=n+o-h),e.scrollLeft=a,e.scrollTop=i;}function oe(e,t,r){const n="left"===r?"offsetLeft":"offsetTop";let s=0;for(;t.offsetParent&&(s+=t[n],t.offsetParent!==e);){if(t.offsetParent.contains(e)){s-=e[n];break}t=t.offsetParent;}return s}function ae(e,t){if(document.contains(e)){let a=document.scrollingElement||document.documentElement;if("hidden"===window.getComputedStyle(a).overflow){let t=ee(e);for(;e&&t&&e!==a&&t!==a;)se(t,e),t=ee(e=t);}else {var r;let{left:a,top:i}=e.getBoundingClientRect();null==e||null===(r=e.scrollIntoView)||void 0===r||r.call(e,{block:"nearest"});let{left:l,top:u}=e.getBoundingClientRect();var n,s,o;if(Math.abs(a-l)>1||Math.abs(i-u)>1)null==t||null===(s=t.containingElement)||void 0===s||null===(n=s.scrollIntoView)||void 0===n||n.call(s,{block:"center",inline:"center"}),null===(o=e.scrollIntoView)||void 0===o||o.call(e,{block:"nearest"});}}}function ie(e){return !(0!==e.mozInputSource||!e.isTrusted)||(U()&&e.pointerType?"click"===e.type&&1===e.buttons:0===e.detail&&!e.pointerType)}function le(e){return !U()&&0===e.width&&0===e.height||1===e.width&&1===e.height&&0===e.pressure&&0===e.detail&&"mouse"===e.pointerType}function ue(e,r,n){let s=t.useRef(r),o=x((()=>{n&&n(s.current);}));t.useEffect((()=>{var t;let r=null==e||null===(t=e.current)||void 0===t?void 0:t.form;return null==r||r.addEventListener("reset",o),()=>{null==r||r.removeEventListener("reset",o);}}),[e,o]);}const ce=new Set(["Arab","Syrc","Samr","Mand","Thaa","Mend","Nkoo","Adlm","Rohg","Hebr"]),de=new Set(["ae","ar","arc","bcc","bqi","ckb","dv","fa","glk","he","ku","mzn","nqo","pnb","ps","sd","ug","ur","yi"]);function pe(e){if(Intl.Locale){let t=new Intl.Locale(e).maximize().script;return !!t&&ce.has(t)}let t=e.split("-")[0];return de.has(t)}function he(){let e="undefined"!=typeof navigator&&(navigator.language||navigator.userLanguage)||"en-US";try{Intl.DateTimeFormat.supportedLocalesOf([e]);}catch(t){e="en-US";}return {locale:e,direction:pe(e)?"rtl":"ltr"}}let fe=he(),me=new Set;function ge(){fe=he();for(let e of me)e(fe);}const ve=t.createContext(null);function ye(){let e=function(){let e=f(),[r,n]=t.useState(fe);return t.useEffect((()=>(0===me.size&&window.addEventListener("languagechange",ge),me.add(n),()=>{me.delete(n),0===me.size&&window.removeEventListener("languagechange",ge);})),[]),e?{locale:"en-US",direction:"ltr"}:r}();return t.useContext(ve)||e}var be=function(){return be=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var s in t=arguments[r])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},be.apply(this,arguments)};function xe(e,t,r){if(!t.has(e))throw new TypeError("attempted to "+r+" private field on non-instance");return t.get(e)}function we(e,t,r){return function(e,t,r){if(t.set)t.set.call(e,r);else {if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=r;}}(e,xe(e,t,"set"),r),r}"function"==typeof SuppressedError&&SuppressedError;let Pe="default",Te="",Ce=new WeakMap;function Ee(e){if(W()){if("default"===Pe){const t=k(e);Te=t.documentElement.style.webkitUserSelect,t.documentElement.style.webkitUserSelect="none";}Pe="disabled";}else (e instanceof HTMLElement||e instanceof SVGElement)&&(Ce.set(e,e.style.userSelect),e.style.userSelect="none");}function Se(e){if(W()){if("disabled"!==Pe)return;Pe="restoring",setTimeout((()=>{X((()=>{if("restoring"===Pe){const t=k(e);"none"===t.documentElement.style.webkitUserSelect&&(t.documentElement.style.webkitUserSelect=Te||""),Te="",Pe="default";}}));}),300);}else if((e instanceof HTMLElement||e instanceof SVGElement)&&e&&Ce.has(e)){let t=Ce.get(e);"none"===e.style.userSelect&&t&&(e.style.userSelect=t),""===e.getAttribute("style")&&e.removeAttribute("style"),Ce.delete(e);}}const ke=t.createContext({register:()=>{}});ke.displayName="PressResponderContext";var Me=new WeakMap;class Ae{continuePropagation(){we(this,Me,!1);}get shouldStopPropagation(){return function(e,t){return t.get?t.get.call(e):t.value}(e=this,xe(e,Me,"get"));var e;}constructor(e,t,r){m(this,Me,{writable:!0,value:void 0}),we(this,Me,!0),this.type=e,this.pointerType=t,this.target=r.currentTarget,this.shiftKey=r.shiftKey,this.metaKey=r.metaKey,this.ctrlKey=r.ctrlKey,this.altKey=r.altKey;}}const De=Symbol("linkClicked");function Ie(e){let{onPress:r,onPressChange:n,onPressStart:s,onPressEnd:o,onPressUp:a,isDisabled:i,isPressed:l,preventFocusOnPress:u,shouldCancelOnPointerExit:c,allowTextSelectionOnPress:d,ref:p,...h}=function(e){let r=t.useContext(ke);if(r){let{register:t,...n}=r;e=A(n,e),t();}return Q(r,e.ref),e}(e),[f,m]=t.useState(!1),g=t.useRef({isPressed:!1,ignoreEmulatedMouseEvents:!1,ignoreClickAfterPress:!1,didFirePressStart:!1,isTriggeringEvent:!1,activePointerId:null,target:null,isOverTarget:!1,pointerType:null}),{addGlobalListener:v,removeAllGlobalListeners:y}=Z(),b=x(((e,t)=>{let r=g.current;if(i||r.didFirePressStart)return !1;let o=!0;if(r.isTriggeringEvent=!0,s){let r=new Ae("pressstart",t,e);s(r),o=r.shouldStopPropagation;}return n&&n(!0),r.isTriggeringEvent=!1,r.didFirePressStart=!0,m(!0),o})),w=x(((e,t,s=!0)=>{let a=g.current;if(!a.didFirePressStart)return !1;a.ignoreClickAfterPress=!0,a.didFirePressStart=!1,a.isTriggeringEvent=!0;let l=!0;if(o){let r=new Ae("pressend",t,e);o(r),l=r.shouldStopPropagation;}if(n&&n(!1),m(!1),r&&s&&!i){let n=new Ae("press",t,e);r(n),l&&(l=n.shouldStopPropagation);}return a.isTriggeringEvent=!1,l})),P=x(((e,t)=>{let r=g.current;if(i)return !1;if(a){r.isTriggeringEvent=!0;let n=new Ae("pressup",t,e);return a(n),r.isTriggeringEvent=!1,n.shouldStopPropagation}return !0})),T=x((e=>{let t=g.current;t.isPressed&&t.target&&(t.isOverTarget&&null!=t.pointerType&&w(Re(t.target,e),t.pointerType,!1),t.isPressed=!1,t.isOverTarget=!1,t.activePointerId=null,t.pointerType=null,y(),d||Se(t.target));})),C=x((e=>{c&&T(e);})),E=t.useMemo((()=>{let e=g.current,t={onKeyDown(t){if(Le(t.nativeEvent,t.currentTarget)&&t.currentTarget.contains(t.target)){var n;Fe(t.target,t.key)&&t.preventDefault();let s=!0;e.isPressed||t.repeat||(e.target=t.currentTarget,e.isPressed=!0,s=b(t,"keyboard"),v(k(t.currentTarget),"keyup",r,!1)),s&&t.stopPropagation(),t.metaKey&&O()&&(null===(n=e.metaKeyEvents)||void 0===n||n.set(t.key,t.nativeEvent));}else "Meta"===t.key&&(e.metaKeyEvents=new Map);},onKeyUp(t){Le(t.nativeEvent,t.currentTarget)&&!t.repeat&&t.currentTarget.contains(t.target)&&e.target&&P(Re(e.target,t),"keyboard");},onClick(t){if((!t||t.currentTarget.contains(t.target))&&t&&0===t.button&&!e.isTriggeringEvent&&!_.isOpening){let r=!0;if(i&&t.preventDefault(),!e.ignoreClickAfterPress&&!e.ignoreEmulatedMouseEvents&&!e.isPressed&&("virtual"===e.pointerType||ie(t.nativeEvent))){i||u||R(t.currentTarget);let e=b(t,"virtual"),n=P(t,"virtual"),s=w(t,"virtual");r=e&&n&&s;}e.ignoreEmulatedMouseEvents=!1,e.ignoreClickAfterPress=!1,r&&t.stopPropagation();}}},r=t=>{var r;if(e.isPressed&&e.target&&Le(t,e.target)){var n;Fe(t.target,t.key)&&t.preventDefault();let r=t.target,s=w(Re(e.target,t),"keyboard",e.target.contains(r));y(),s&&t.stopPropagation(),"Enter"!==t.key&&Ve(e.target)&&e.target.contains(r)&&!t[De]&&(t[De]=!0,_(e.target,t,!1)),e.isPressed=!1,null===(n=e.metaKeyEvents)||void 0===n||n.delete(t.key);}else if("Meta"===t.key&&(null===(r=e.metaKeyEvents)||void 0===r?void 0:r.size)){var s;let t=e.metaKeyEvents;e.metaKeyEvents=void 0;for(let r of t.values())null===(s=e.target)||void 0===s||s.dispatchEvent(new KeyboardEvent("keyup",r));}};if("undefined"!=typeof PointerEvent){t.onPointerDown=t=>{if(0!==t.button||!t.currentTarget.contains(t.target))return;if(le(t.nativeEvent))return void(e.pointerType="virtual");je(t.currentTarget)&&t.preventDefault(),e.pointerType=t.pointerType;let o=!0;e.isPressed||(e.isPressed=!0,e.isOverTarget=!0,e.activePointerId=t.pointerId,e.target=t.currentTarget,i||u||R(t.currentTarget),d||Ee(e.target),o=b(t,e.pointerType),v(k(t.currentTarget),"pointermove",r,!1),v(k(t.currentTarget),"pointerup",n,!1),v(k(t.currentTarget),"pointercancel",s,!1)),o&&t.stopPropagation();},t.onMouseDown=e=>{e.currentTarget.contains(e.target)&&0===e.button&&(je(e.currentTarget)&&e.preventDefault(),e.stopPropagation());},t.onPointerUp=t=>{t.currentTarget.contains(t.target)&&"virtual"!==e.pointerType&&0===t.button&&Ne(t,t.currentTarget)&&P(t,e.pointerType||t.pointerType);};let r=t=>{t.pointerId===e.activePointerId&&(e.target&&Ne(t,e.target)?e.isOverTarget||null==e.pointerType||(e.isOverTarget=!0,b(Re(e.target,t),e.pointerType)):e.target&&e.isOverTarget&&null!=e.pointerType&&(e.isOverTarget=!1,w(Re(e.target,t),e.pointerType,!1),C(t)));},n=t=>{t.pointerId===e.activePointerId&&e.isPressed&&0===t.button&&e.target&&(Ne(t,e.target)&&null!=e.pointerType?w(Re(e.target,t),e.pointerType):e.isOverTarget&&null!=e.pointerType&&w(Re(e.target,t),e.pointerType,!1),e.isPressed=!1,e.isOverTarget=!1,e.activePointerId=null,e.pointerType=null,y(),d||Se(e.target));},s=e=>{T(e);};t.onDragStart=e=>{e.currentTarget.contains(e.target)&&T(e);};}else {t.onMouseDown=t=>{if(0!==t.button||!t.currentTarget.contains(t.target))return;if(je(t.currentTarget)&&t.preventDefault(),e.ignoreEmulatedMouseEvents)return void t.stopPropagation();e.isPressed=!0,e.isOverTarget=!0,e.target=t.currentTarget,e.pointerType=ie(t.nativeEvent)?"virtual":"mouse",i||u||R(t.currentTarget),b(t,e.pointerType)&&t.stopPropagation(),v(k(t.currentTarget),"mouseup",r,!1);},t.onMouseEnter=t=>{if(!t.currentTarget.contains(t.target))return;let r=!0;e.isPressed&&!e.ignoreEmulatedMouseEvents&&null!=e.pointerType&&(e.isOverTarget=!0,r=b(t,e.pointerType)),r&&t.stopPropagation();},t.onMouseLeave=t=>{if(!t.currentTarget.contains(t.target))return;let r=!0;e.isPressed&&!e.ignoreEmulatedMouseEvents&&null!=e.pointerType&&(e.isOverTarget=!1,r=w(t,e.pointerType,!1),C(t)),r&&t.stopPropagation();},t.onMouseUp=t=>{t.currentTarget.contains(t.target)&&(e.ignoreEmulatedMouseEvents||0!==t.button||P(t,e.pointerType||"mouse"));};let r=t=>{0===t.button&&(e.isPressed=!1,y(),e.ignoreEmulatedMouseEvents?e.ignoreEmulatedMouseEvents=!1:(e.target&&Ne(t,e.target)&&null!=e.pointerType?w(Re(e.target,t),e.pointerType):e.target&&e.isOverTarget&&null!=e.pointerType&&w(Re(e.target,t),e.pointerType,!1),e.isOverTarget=!1));};t.onTouchStart=t=>{if(!t.currentTarget.contains(t.target))return;let r=function(e){const{targetTouches:t}=e;return t.length>0?t[0]:null}(t.nativeEvent);r&&(e.activePointerId=r.identifier,e.ignoreEmulatedMouseEvents=!0,e.isOverTarget=!0,e.isPressed=!0,e.target=t.currentTarget,e.pointerType="touch",i||u||R(t.currentTarget),d||Ee(e.target),b(t,e.pointerType)&&t.stopPropagation(),v(M(t.currentTarget),"scroll",n,!0));},t.onTouchMove=t=>{if(!t.currentTarget.contains(t.target))return;if(!e.isPressed)return void t.stopPropagation();let r=Ke(t.nativeEvent,e.activePointerId),n=!0;r&&Ne(r,t.currentTarget)?e.isOverTarget||null==e.pointerType||(e.isOverTarget=!0,n=b(t,e.pointerType)):e.isOverTarget&&null!=e.pointerType&&(e.isOverTarget=!1,n=w(t,e.pointerType,!1),C(t)),n&&t.stopPropagation();},t.onTouchEnd=t=>{if(!t.currentTarget.contains(t.target))return;if(!e.isPressed)return void t.stopPropagation();let r=Ke(t.nativeEvent,e.activePointerId),n=!0;r&&Ne(r,t.currentTarget)&&null!=e.pointerType?(P(t,e.pointerType),n=w(t,e.pointerType)):e.isOverTarget&&null!=e.pointerType&&(n=w(t,e.pointerType,!1)),n&&t.stopPropagation(),e.isPressed=!1,e.activePointerId=null,e.isOverTarget=!1,e.ignoreEmulatedMouseEvents=!0,e.target&&!d&&Se(e.target),y();},t.onTouchCancel=t=>{t.currentTarget.contains(t.target)&&(t.stopPropagation(),e.isPressed&&T(t));};let n=t=>{e.isPressed&&t.target.contains(e.target)&&T({currentTarget:e.target,shiftKey:!1,ctrlKey:!1,metaKey:!1,altKey:!1});};t.onDragStart=e=>{e.currentTarget.contains(e.target)&&T(e);};}return t}),[v,i,u,y,d,T,C,w,b,P]);return t.useEffect((()=>()=>{var e;d||Se(null!==(e=g.current.target)&&void 0!==e?e:void 0);}),[d]),{isPressed:l||f,pressProps:A(h,E)}}function Ve(e){return "A"===e.tagName&&e.hasAttribute("href")}function Le(e,t){const{key:r,code:n}=e,s=t,o=s.getAttribute("role");return !("Enter"!==r&&" "!==r&&"Spacebar"!==r&&"Space"!==n||s instanceof M(s).HTMLInputElement&&!Be(s,r)||s instanceof M(s).HTMLTextAreaElement||s.isContentEditable||("link"===o||!o&&Ve(s))&&"Enter"!==r)}function Ke(e,t){const r=e.changedTouches;for(let e=0;e<r.length;e++){const n=r[e];if(n.identifier===t)return n}return null}function Re(e,t){return {currentTarget:e,shiftKey:t.shiftKey,ctrlKey:t.ctrlKey,metaKey:t.metaKey,altKey:t.altKey}}function Ne(e,t){let r=t.getBoundingClientRect(),n=function(e){let t=0,r=0;return void 0!==e.width?t=e.width/2:void 0!==e.radiusX&&(t=e.radiusX),void 0!==e.height?r=e.height/2:void 0!==e.radiusY&&(r=e.radiusY),{top:e.clientY-r,right:e.clientX+t,bottom:e.clientY+r,left:e.clientX-t}}(e);return function(e,t){return !(e.left>t.right||t.left>e.right||e.top>t.bottom||t.top>e.bottom)}(r,n)}function je(e){return !(e instanceof HTMLElement&&e.hasAttribute("draggable"))}function Fe(e,t){return e instanceof HTMLInputElement?!Be(e,t):e instanceof HTMLButtonElement?"submit"!==e.type&&"reset"!==e.type:!Ve(e)}const Oe=new Set(["checkbox","radio","range","color","file","image","button","submit","reset"]);function Be(e,t){return "checkbox"===e.type||"radio"===e.type?" "===t:Oe.has(e.type)}class We{isDefaultPrevented(){return this.nativeEvent.defaultPrevented}preventDefault(){this.defaultPrevented=!0,this.nativeEvent.preventDefault();}stopPropagation(){this.nativeEvent.stopPropagation(),this.isPropagationStopped=()=>!0;}isPropagationStopped(){return !1}persist(){}constructor(e,t){this.nativeEvent=t,this.target=t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget,this.bubbles=t.bubbles,this.cancelable=t.cancelable,this.defaultPrevented=t.defaultPrevented,this.eventPhase=t.eventPhase,this.isTrusted=t.isTrusted,this.timeStamp=t.timeStamp,this.type=e;}}function ze(e){let r=t.useRef({isFocused:!1,observer:null});b((()=>{const e=r.current;return ()=>{e.observer&&(e.observer.disconnect(),e.observer=null);}}),[]);let n=x((t=>{null==e||e(t);}));return t.useCallback((e=>{if(e.target instanceof HTMLButtonElement||e.target instanceof HTMLInputElement||e.target instanceof HTMLTextAreaElement||e.target instanceof HTMLSelectElement){r.current.isFocused=!0;let t=e.target,s=e=>{r.current.isFocused=!1,t.disabled&&n(new We("blur",e)),r.current.observer&&(r.current.observer.disconnect(),r.current.observer=null);};t.addEventListener("focusout",s,{once:!0}),r.current.observer=new MutationObserver((()=>{if(r.current.isFocused&&t.disabled){var e;null===(e=r.current.observer)||void 0===e||e.disconnect();let n=t===document.activeElement?null:document.activeElement;t.dispatchEvent(new FocusEvent("blur",{relatedTarget:n})),t.dispatchEvent(new FocusEvent("focusout",{bubbles:!0,relatedTarget:n}));}})),r.current.observer.observe(t,{attributes:!0,attributeFilter:["disabled"]});}}),[n])}function Ue(e){let{isDisabled:r,onFocus:n,onBlur:s,onFocusChange:o}=e;const a=t.useCallback((e=>{if(e.target===e.currentTarget)return s&&s(e),o&&o(!1),!0}),[s,o]),i=ze(a),l=t.useCallback((e=>{e.target===e.currentTarget&&document.activeElement===e.target&&(n&&n(e),o&&o(!0),i(e));}),[o,n,i]);return {focusProps:{onFocus:!r&&(n||o||s)?l:void 0,onBlur:r||!s&&!o?void 0:a}}}let He=null,$e=new Set,_e=!1,Ge=!1,qe=!1;const Ye={Tab:!0,Escape:!0};function Xe(e,t){for(let r of $e)r(e,t);}function Ze(e){Ge=!0,function(e){return !(e.metaKey||!O()&&e.altKey||e.ctrlKey||"Control"===e.key||"Shift"===e.key||"Meta"===e.key)}(e)&&(He="keyboard",Xe("keyboard",e));}function Je(e){He="pointer","mousedown"!==e.type&&"pointerdown"!==e.type||(Ge=!0,Xe("pointer",e));}function Qe(e){ie(e)&&(Ge=!0,He="virtual");}function et(e){e.target!==window&&e.target!==document&&(Ge||qe||(He="virtual",Xe("virtual",e)),Ge=!1,qe=!1);}function tt(){Ge=!1,qe=!0;}function rt(){if("undefined"==typeof window||_e)return;let e=HTMLElement.prototype.focus;HTMLElement.prototype.focus=function(){Ge=!0,e.apply(this,arguments);},document.addEventListener("keydown",Ze,!0),document.addEventListener("keyup",Ze,!0),document.addEventListener("click",Qe,!0),window.addEventListener("focus",et,!0),window.addEventListener("blur",tt,!1),"undefined"!=typeof PointerEvent?(document.addEventListener("pointerdown",Je,!0),document.addEventListener("pointermove",Je,!0),document.addEventListener("pointerup",Je,!0)):(document.addEventListener("mousedown",Je,!0),document.addEventListener("mousemove",Je,!0),document.addEventListener("mouseup",Je,!0)),_e=!0;}function nt(){return "pointer"!==He}function st(){return He}"undefined"!=typeof document&&("loading"!==document.readyState?rt():document.addEventListener("DOMContentLoaded",rt));const ot=new Set(["checkbox","radio","range","color","file","image","button","submit","reset"]);function at(e,r,n){rt(),t.useEffect((()=>{let t=(t,r)=>{(function(e,t,r){var n;return !((e=e||(null==r?void 0:r.target)instanceof HTMLInputElement&&!ot.has(null==r||null===(n=r.target)||void 0===n?void 0:n.type)||(null==r?void 0:r.target)instanceof HTMLTextAreaElement||(null==r?void 0:r.target)instanceof HTMLElement&&(null==r?void 0:r.target.isContentEditable))&&"keyboard"===t&&r instanceof KeyboardEvent&&!Ye[r.key])})(!!(null==n?void 0:n.isTextInput),t,r)&&e(nt());};return $e.add(t),()=>{$e.delete(t);}}),r);}function it(e){let{isDisabled:r,onBlurWithin:n,onFocusWithin:s,onFocusWithinChange:o}=e,a=t.useRef({isFocusWithin:!1}),i=t.useCallback((e=>{a.current.isFocusWithin&&!e.currentTarget.contains(e.relatedTarget)&&(a.current.isFocusWithin=!1,n&&n(e),o&&o(!1));}),[n,o,a]),l=ze(i),u=t.useCallback((e=>{a.current.isFocusWithin||document.activeElement!==e.target||(s&&s(e),o&&o(!0),a.current.isFocusWithin=!0,l(e));}),[s,o,l]);return r?{focusWithinProps:{onFocus:void 0,onBlur:void 0}}:{focusWithinProps:{onFocus:u,onBlur:i}}}let lt=!1,ut=0;function ct(){lt=!0,setTimeout((()=>{lt=!1;}),50);}function dt(e){"touch"===e.pointerType&&ct();}function pt(){if("undefined"!=typeof document)return "undefined"!=typeof PointerEvent?document.addEventListener("pointerup",dt):document.addEventListener("touchend",ct),ut++,()=>{ut--,ut>0||("undefined"!=typeof PointerEvent?document.removeEventListener("pointerup",dt):document.removeEventListener("touchend",ct));}}function ht(e){let{onHoverStart:r,onHoverChange:n,onHoverEnd:s,isDisabled:o}=e,[a,i]=t.useState(!1),l=t.useRef({isHovered:!1,ignoreEmulatedMouseEvents:!1,pointerType:"",target:null}).current;t.useEffect(pt,[]);let{hoverProps:u,triggerHoverEnd:c}=t.useMemo((()=>{let e=(e,t)=>{if(l.pointerType=t,o||"touch"===t||l.isHovered||!e.currentTarget.contains(e.target))return;l.isHovered=!0;let s=e.currentTarget;l.target=s,r&&r({type:"hoverstart",target:s,pointerType:t}),n&&n(!0),i(!0);},t=(e,t)=>{if(l.pointerType="",l.target=null,"touch"===t||!l.isHovered)return;l.isHovered=!1;let r=e.currentTarget;s&&s({type:"hoverend",target:r,pointerType:t}),n&&n(!1),i(!1);},a={};return "undefined"!=typeof PointerEvent?(a.onPointerEnter=t=>{lt&&"mouse"===t.pointerType||e(t,t.pointerType);},a.onPointerLeave=e=>{!o&&e.currentTarget.contains(e.target)&&t(e,e.pointerType);}):(a.onTouchStart=()=>{l.ignoreEmulatedMouseEvents=!0;},a.onMouseEnter=t=>{l.ignoreEmulatedMouseEvents||lt||e(t,"mouse"),l.ignoreEmulatedMouseEvents=!1;},a.onMouseLeave=e=>{!o&&e.currentTarget.contains(e.target)&&t(e,"mouse");}),{hoverProps:a,triggerHoverEnd:t}}),[r,n,s,o,l]);return t.useEffect((()=>{o&&c({currentTarget:l.target},l.pointerType);}),[o]),{hoverProps:u,isHovered:a}}function ft(e){if(!e)return;let t=!0;return r=>{let n={...r,preventDefault(){r.preventDefault();},isDefaultPrevented:()=>r.isDefaultPrevented(),stopPropagation(){console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");},continuePropagation(){t=!1;}};e(n),t&&r.stopPropagation();}}const mt=500;function gt(e){let{isDisabled:r,onLongPressStart:n,onLongPressEnd:s,onLongPress:o,threshold:a=mt,accessibilityDescription:i}=e;const l=t.useRef();let{addGlobalListener:u,removeGlobalListener:c}=Z(),{pressProps:d}=Ie({isDisabled:r,onPressStart(e){if(e.continuePropagation(),("mouse"===e.pointerType||"touch"===e.pointerType)&&(n&&n({...e,type:"longpressstart"}),l.current=setTimeout((()=>{e.target.dispatchEvent(new PointerEvent("pointercancel",{bubbles:!0})),o&&o({...e,type:"longpress"}),l.current=void 0;}),a),"touch"===e.pointerType)){let t=e=>{e.preventDefault();};u(e.target,"contextmenu",t,{once:!0}),u(window,"pointerup",(()=>{setTimeout((()=>{c(e.target,"contextmenu",t);}),30);}),{once:!0});}},onPressEnd(e){l.current&&clearTimeout(l.current),!s||"mouse"!==e.pointerType&&"touch"!==e.pointerType||s({...e,type:"longpressend"});}}),p=function(e){let[r,n]=t.useState(void 0);return b((()=>{if(!e)return;let t=ne.get(e);if(t)n(t.element.id);else {let r="react-aria-description-"+re++;n(r);let s=document.createElement("div");s.id=r,s.style.display="none",s.textContent=e,document.body.appendChild(s),t={refCount:0,element:s},ne.set(e,t);}return t.refCount++,()=>{0==--t.refCount&&(t.element.remove(),ne.delete(e));}}),[e]),{"aria-describedby":e?r:void 0}}(o&&!r?i:void 0);return {longPressProps:A(d,p)}}function vt(e){if("virtual"===st()){let t=document.activeElement;X((()=>{document.activeElement===t&&document.contains(e)&&R(e);}));}else R(e);}function yt(e,t){return "#comment"!==e.nodeName&&function(e){if(!(e instanceof HTMLElement||e instanceof SVGElement))return !1;let{display:t,visibility:r}=e.style,n="none"!==t&&"hidden"!==r&&"collapse"!==r;if(n){const{getComputedStyle:t}=e.ownerDocument.defaultView;let{display:r,visibility:s}=t(e);n="none"!==r&&"hidden"!==s&&"collapse"!==s;}return n}(e)&&function(e,t){return !e.hasAttribute("hidden")&&("DETAILS"!==e.nodeName||!t||"SUMMARY"===t.nodeName||e.hasAttribute("open"))}(e,t)&&(!e.parentElement||yt(e.parentElement,e))}const bt=["input:not([disabled]):not([type=hidden])","select:not([disabled])","textarea:not([disabled])","button:not([disabled])","a[href]","area[href]","summary","iframe","object","embed","audio[controls]","video[controls]","[contenteditable]"],xt=bt.join(":not([hidden]),")+",[tabindex]:not([disabled]):not([hidden])";bt.push('[tabindex]:not([tabindex="-1"]):not([disabled])');const wt=bt.join(':not([hidden]):not([tabindex="-1"]),');function Pt(e,t){return !!e&&(!!t&&t.some((t=>t.contains(e))))}function Tt(e,t,r){let n=(null==t?void 0:t.tabbable)?wt:xt,s=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode(e){var s;return (null==t||null===(s=t.from)||void 0===s?void 0:s.contains(e))?NodeFilter.FILTER_REJECT:!e.matches(n)||!yt(e)||r&&!Pt(e,r)||(null==t?void 0:t.accept)&&!t.accept(e)?NodeFilter.FILTER_SKIP:NodeFilter.FILTER_ACCEPT}});return (null==t?void 0:t.from)&&(s.currentNode=t.from),s}class Ct{get size(){return this.fastMap.size}getTreeNode(e){return this.fastMap.get(e)}addTreeNode(e,t,r){let n=this.fastMap.get(null!=t?t:null);if(!n)return;let s=new Et({scopeRef:e});n.addChild(s),s.parent=n,this.fastMap.set(e,s),r&&(s.nodeToRestore=r);}addNode(e){this.fastMap.set(e.scopeRef,e);}removeTreeNode(e){if(null===e)return;let t=this.fastMap.get(e);if(!t)return;let r=t.parent;for(let e of this.traverse())e!==t&&t.nodeToRestore&&e.nodeToRestore&&t.scopeRef&&t.scopeRef.current&&Pt(e.nodeToRestore,t.scopeRef.current)&&(e.nodeToRestore=t.nodeToRestore);let n=t.children;r&&(r.removeChild(t),n.size>0&&n.forEach((e=>r&&r.addChild(e)))),this.fastMap.delete(t.scopeRef);}*traverse(e=this.root){if(null!=e.scopeRef&&(yield e),e.children.size>0)for(let t of e.children)yield*this.traverse(t);}clone(){var e;let t=new Ct;var r;for(let n of this.traverse())t.addTreeNode(n.scopeRef,null!==(r=null===(e=n.parent)||void 0===e?void 0:e.scopeRef)&&void 0!==r?r:null,n.nodeToRestore);return t}constructor(){this.fastMap=new Map,this.root=new Et({scopeRef:null}),this.fastMap.set(null,this.root);}}class Et{addChild(e){this.children.add(e),e.parent=this;}removeChild(e){this.children.delete(e),e.parent=void 0;}constructor(e){this.children=new Set,this.contain=!1,this.scopeRef=e.scopeRef;}}function St(e={}){let{autoFocus:r=!1,isTextInput:n,within:s}=e,o=t.useRef({isFocused:!1,isFocusVisible:r||nt()}),[a,i]=t.useState(!1),[l,u]=t.useState((()=>o.current.isFocused&&o.current.isFocusVisible)),c=t.useCallback((()=>u(o.current.isFocused&&o.current.isFocusVisible)),[]),d=t.useCallback((e=>{o.current.isFocused=e,i(e),c();}),[c]);at((e=>{o.current.isFocusVisible=e,c();}),[],{isTextInput:n});let{focusProps:p}=Ue({isDisabled:s,onFocusChange:d}),{focusWithinProps:h}=it({isDisabled:!s,onFocusWithinChange:d});return {isFocused:a,isFocusVisible:l,focusProps:s?h:p}}new Ct;let kt=t.createContext(null);function Mt(e,r){let{focusProps:n}=Ue(e),{keyboardProps:s}=function(e){return {keyboardProps:e.isDisabled?{}:{onKeyDown:ft(e.onKeyDown),onKeyUp:ft(e.onKeyUp)}}}(e),o=A(n,s),a=function(e){let r=t.useContext(kt)||{};Q(r,e);let{ref:n,...s}=r;return s}(r),i=e.isDisabled?{}:a,l=t.useRef(e.autoFocus);return t.useEffect((()=>{l.current&&r.current&&vt(r.current),l.current=!1;}),[r]),{focusableProps:A({...o,tabIndex:e.excludeFromTabOrder&&!e.isDisabled?-1:void 0},i)}}const At={border:0,clip:"rect(0 0 0 0)",clipPath:"inset(50%)",height:"1px",margin:"-1px",overflow:"hidden",padding:0,position:"absolute",width:"1px",whiteSpace:"nowrap"};function Dt(e){let{children:r,elementType:n="div",isFocusable:s,style:o,...a}=e,{visuallyHiddenProps:i}=function(e={}){let{style:r,isFocusable:n}=e,[s,o]=t.useState(!1),{focusWithinProps:a}=it({isDisabled:!n,onFocusWithinChange:e=>o(e)});return {visuallyHiddenProps:{...a,style:t.useMemo((()=>s?r:r?{...At,...r}:At),[s])}}}(e);return t.createElement(n,A(a,i),r)}function It(e){return t.forwardRef(e)}var Vt=(e,t,r=!0)=>{if(!t)return [e,{}];const n=t.reduce(((t,r)=>r in e?{...t,[r]:e[r]}:t),{});if(r){return [Object.keys(e).filter((e=>!t.includes(e))).reduce(((t,r)=>({...t,[r]:e[r]})),{}),n]}return [e,n]},Lt=["0","xs","sm","md","lg","xl","2xl","3xl","4xl","5xl","6xl","7xl","8xl","9xl","1","2","3","3.5","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","20","24","28","32","36","40","44","48","52","56","60","64","72","80","96"].map((e=>`unit-${e}`)),Kt=e=>"boolean"==typeof e?`${e}`:0===e?"0":e,Rt=e=>!e||"object"!=typeof e||0===Object.keys(e).length;function Nt(e,t){e.forEach((function(e){Array.isArray(e)?Nt(e,t):t.push(e);}));}function jt(e){let t=[];return Nt(e,t),t}var Ft=(e,t)=>{let r={},n=Object.keys(e),s=Object.keys(t);for(let o of n)if(s.includes(o)){let n=e[o],s=t[o];r[o]="object"==typeof n&&"object"==typeof s?Ft(n,s):s+" "+n;}else r[o]=e[o];for(let e of s)n.includes(e)||(r[e]=t[e]);return r},Ot=e=>e&&"string"==typeof e?e.replace(/\s+/g," ").trim():e;function Bt(){for(var e,t,r=0,n="";r<arguments.length;)(e=arguments[r++])&&(t=Wt(e))&&(n&&(n+=" "),n+=t);return n}function Wt(e){if("string"==typeof e)return e;for(var t,r="",n=0;n<e.length;n++)e[n]&&(t=Wt(e[n]))&&(r&&(r+=" "),r+=t);return r}var zt="-";function Ut(e){var t=function(e){var t=e.theme,r=e.prefix,n={nextPart:new Map,validators:[]},s=function(e,t){if(!t)return e;return e.map((function(e){return [e[0],e[1].map((function(e){return "string"==typeof e?t+e:"object"==typeof e?Object.fromEntries(Object.entries(e).map((function(e){var r=e[0],n=e[1];return [t+r,n]}))):e}))]}))}(Object.entries(e.classGroups),r);return s.forEach((function(e){var r=e[0];_t(e[1],n,r,t);})),n}(e),r=e.conflictingClassGroups,n=e.conflictingClassGroupModifiers,s=void 0===n?{}:n;return {getClassGroupId:function(e){var r=e.split(zt);return ""===r[0]&&1!==r.length&&r.shift(),Ht(r,t)||function(e){if($t.test(e)){var t=$t.exec(e)[1],r=t?.substring(0,t.indexOf(":"));if(r)return "arbitrary.."+r}}(e)},getConflictingClassGroupIds:function(e,t){var n=r[e]||[];return t&&s[e]?[].concat(n,s[e]):n}}}function Ht(e,t){if(0===e.length)return t.classGroupId;var r=e[0],n=t.nextPart.get(r),s=n?Ht(e.slice(1),n):void 0;if(s)return s;if(0!==t.validators.length){var o=e.join(zt);return t.validators.find((function(e){return (0, e.validator)(o)}))?.classGroupId}}var $t=/^\[(.+)\]$/;function _t(e,t,r,n){e.forEach((function(e){if("string"!=typeof e){if("function"==typeof e)return e.isThemeGetter?void _t(e(n),t,r,n):void t.validators.push({validator:e,classGroupId:r});Object.entries(e).forEach((function(e){var s=e[0];_t(e[1],Gt(t,s),r,n);}));}else {(""===e?t:Gt(t,e)).classGroupId=r;}}));}function Gt(e,t){var r=e;return t.split(zt).forEach((function(e){r.nextPart.has(e)||r.nextPart.set(e,{nextPart:new Map,validators:[]}),r=r.nextPart.get(e);})),r}function qt(e){if(e<1)return {get:function(){},set:function(){}};var t=0,r=new Map,n=new Map;function s(s,o){r.set(s,o),++t>e&&(t=0,n=r,r=new Map);}return {get:function(e){var t=r.get(e);return void 0!==t?t:void 0!==(t=n.get(e))?(s(e,t),t):void 0},set:function(e,t){r.has(e)?r.set(e,t):s(e,t);}}}var Yt="!";function Xt(e){var t=e.separator||":",r=1===t.length,n=t[0],s=t.length;return function(e){for(var o,a=[],i=0,l=0,u=0;u<e.length;u++){var c=e[u];if(0===i){if(c===n&&(r||e.slice(u,u+s)===t)){a.push(e.slice(l,u)),l=u+s;continue}if("/"===c){o=u;continue}}"["===c?i++:"]"===c&&i--;}var d=0===a.length?e:e.substring(l),p=d.startsWith(Yt);return {modifiers:a,hasImportantModifier:p,baseClassName:p?d.substring(1):d,maybePostfixModifierPosition:o&&o>l?o-l:void 0}}}var Zt=/\s+/;function Jt(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n,s,o,a=function(e){var r=t[0],l=t.slice(1).reduce((function(e,t){return t(e)}),r());return n=function(e){return {cache:qt(e.cacheSize),splitModifiers:Xt(e),...Ut(e)}}(l),s=n.cache.get,o=n.cache.set,a=i,i(e)};function i(e){var t=s(e);if(t)return t;var r=function(e,t){var r=t.splitModifiers,n=t.getClassGroupId,s=t.getConflictingClassGroupIds,o=new Set;return e.trim().split(Zt).map((function(e){var t=r(e),s=t.modifiers,o=t.hasImportantModifier,a=t.baseClassName,i=t.maybePostfixModifierPosition,l=n(i?a.substring(0,i):a),u=Boolean(i);if(!l){if(!i)return {isTailwindClass:!1,originalClassName:e};if(!(l=n(a)))return {isTailwindClass:!1,originalClassName:e};u=!1;}var c=function(e){if(e.length<=1)return e;var t=[],r=[];return e.forEach((function(e){"["===e[0]?(t.push.apply(t,r.sort().concat([e])),r=[]):r.push(e);})),t.push.apply(t,r.sort()),t}(s).join(":");return {isTailwindClass:!0,modifierId:o?c+Yt:c,classGroupId:l,originalClassName:e,hasPostfixModifier:u}})).reverse().filter((function(e){if(!e.isTailwindClass)return !0;var t=e.modifierId,r=e.classGroupId,n=e.hasPostfixModifier,a=t+r;return !o.has(a)&&(o.add(a),s(r,n).forEach((function(e){return o.add(t+e)})),!0)})).reverse().map((function(e){return e.originalClassName})).join(" ")}(e,n);return o(e,r),r}return function(){return a(Bt.apply(null,arguments))}}function Qt(e){var t=function(t){return t[e]||[]};return t.isThemeGetter=!0,t}var er=/^\[(?:([a-z-]+):)?(.+)\]$/i,tr=/^\d+\/\d+$/,rr=new Set(["px","full","screen"]),nr=/^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,sr=/\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,or=/^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;function ar(e){return pr(e)||rr.has(e)||tr.test(e)||ir(e)}function ir(e){return br(e,"length",xr)}function lr(e){return br(e,"size",wr)}function ur(e){return br(e,"position",wr)}function cr(e){return br(e,"url",Pr)}function dr(e){return br(e,"number",pr)}function pr(e){return !Number.isNaN(Number(e))}function hr(e){return e.endsWith("%")&&pr(e.slice(0,-1))}function fr(e){return Tr(e)||br(e,"number",Tr)}function mr(e){return er.test(e)}function gr(){return !0}function vr(e){return nr.test(e)}function yr(e){return br(e,"",Cr)}function br(e,t,r){var n=er.exec(e);return !!n&&(n[1]?n[1]===t:r(n[2]))}function xr(e){return sr.test(e)}function wr(){return !1}function Pr(e){return e.startsWith("url(")}function Tr(e){return Number.isInteger(Number(e))}function Cr(e){return or.test(e)}function Er(){var e=Qt("colors"),t=Qt("spacing"),r=Qt("blur"),n=Qt("brightness"),s=Qt("borderColor"),o=Qt("borderRadius"),a=Qt("borderSpacing"),i=Qt("borderWidth"),l=Qt("contrast"),u=Qt("grayscale"),c=Qt("hueRotate"),d=Qt("invert"),p=Qt("gap"),h=Qt("gradientColorStops"),f=Qt("gradientColorStopPositions"),m=Qt("inset"),g=Qt("margin"),v=Qt("opacity"),y=Qt("padding"),b=Qt("saturate"),x=Qt("scale"),w=Qt("sepia"),P=Qt("skew"),T=Qt("space"),C=Qt("translate"),E=function(){return ["auto",mr,t]},S=function(){return [mr,t]},k=function(){return ["",ar]},M=function(){return ["auto",pr,mr]},A=function(){return ["","0",mr]},D=function(){return [pr,dr]},I=function(){return [pr,mr]};return {cacheSize:500,theme:{colors:[gr],spacing:[ar],blur:["none","",vr,mr],brightness:D(),borderColor:[e],borderRadius:["none","","full",vr,mr],borderSpacing:S(),borderWidth:k(),contrast:D(),grayscale:A(),hueRotate:I(),invert:A(),gap:S(),gradientColorStops:[e],gradientColorStopPositions:[hr,ir],inset:E(),margin:E(),opacity:D(),padding:S(),saturate:D(),scale:D(),sepia:A(),skew:I(),space:S(),translate:S()},classGroups:{aspect:[{aspect:["auto","square","video",mr]}],container:["container"],columns:[{columns:[vr]}],"break-after":[{"break-after":["auto","avoid","all","avoid-page","page","left","right","column"]}],"break-before":[{"break-before":["auto","avoid","all","avoid-page","page","left","right","column"]}],"break-inside":[{"break-inside":["auto","avoid","avoid-page","avoid-column"]}],"box-decoration":[{"box-decoration":["slice","clone"]}],box:[{box:["border","content"]}],display:["block","inline-block","inline","flex","inline-flex","table","inline-table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row-group","table-row","flow-root","grid","inline-grid","contents","list-item","hidden"],float:[{float:["right","left","none"]}],clear:[{clear:["left","right","both","none"]}],isolation:["isolate","isolation-auto"],"object-fit":[{object:["contain","cover","fill","none","scale-down"]}],"object-position":[{object:[].concat(["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top"],[mr])}],overflow:[{overflow:["auto","hidden","clip","visible","scroll"]}],"overflow-x":[{"overflow-x":["auto","hidden","clip","visible","scroll"]}],"overflow-y":[{"overflow-y":["auto","hidden","clip","visible","scroll"]}],overscroll:[{overscroll:["auto","contain","none"]}],"overscroll-x":[{"overscroll-x":["auto","contain","none"]}],"overscroll-y":[{"overscroll-y":["auto","contain","none"]}],position:["static","fixed","absolute","relative","sticky"],inset:[{inset:[m]}],"inset-x":[{"inset-x":[m]}],"inset-y":[{"inset-y":[m]}],start:[{start:[m]}],end:[{end:[m]}],top:[{top:[m]}],right:[{right:[m]}],bottom:[{bottom:[m]}],left:[{left:[m]}],visibility:["visible","invisible","collapse"],z:[{z:["auto",fr]}],basis:[{basis:E()}],"flex-direction":[{flex:["row","row-reverse","col","col-reverse"]}],"flex-wrap":[{flex:["wrap","wrap-reverse","nowrap"]}],flex:[{flex:["1","auto","initial","none",mr]}],grow:[{grow:A()}],shrink:[{shrink:A()}],order:[{order:["first","last","none",fr]}],"grid-cols":[{"grid-cols":[gr]}],"col-start-end":[{col:["auto",{span:["full",fr]},mr]}],"col-start":[{"col-start":M()}],"col-end":[{"col-end":M()}],"grid-rows":[{"grid-rows":[gr]}],"row-start-end":[{row:["auto",{span:[fr]},mr]}],"row-start":[{"row-start":M()}],"row-end":[{"row-end":M()}],"grid-flow":[{"grid-flow":["row","col","dense","row-dense","col-dense"]}],"auto-cols":[{"auto-cols":["auto","min","max","fr",mr]}],"auto-rows":[{"auto-rows":["auto","min","max","fr",mr]}],gap:[{gap:[p]}],"gap-x":[{"gap-x":[p]}],"gap-y":[{"gap-y":[p]}],"justify-content":[{justify:["normal"].concat(["start","end","center","between","around","evenly","stretch"])}],"justify-items":[{"justify-items":["start","end","center","stretch"]}],"justify-self":[{"justify-self":["auto","start","end","center","stretch"]}],"align-content":[{content:["normal"].concat(["start","end","center","between","around","evenly","stretch"],["baseline"])}],"align-items":[{items:["start","end","center","baseline","stretch"]}],"align-self":[{self:["auto","start","end","center","stretch","baseline"]}],"place-content":[{"place-content":[].concat(["start","end","center","between","around","evenly","stretch"],["baseline"])}],"place-items":[{"place-items":["start","end","center","baseline","stretch"]}],"place-self":[{"place-self":["auto","start","end","center","stretch"]}],p:[{p:[y]}],px:[{px:[y]}],py:[{py:[y]}],ps:[{ps:[y]}],pe:[{pe:[y]}],pt:[{pt:[y]}],pr:[{pr:[y]}],pb:[{pb:[y]}],pl:[{pl:[y]}],m:[{m:[g]}],mx:[{mx:[g]}],my:[{my:[g]}],ms:[{ms:[g]}],me:[{me:[g]}],mt:[{mt:[g]}],mr:[{mr:[g]}],mb:[{mb:[g]}],ml:[{ml:[g]}],"space-x":[{"space-x":[T]}],"space-x-reverse":["space-x-reverse"],"space-y":[{"space-y":[T]}],"space-y-reverse":["space-y-reverse"],w:[{w:["auto","min","max","fit",mr,t]}],"min-w":[{"min-w":["min","max","fit",mr,ar]}],"max-w":[{"max-w":["0","none","full","min","max","fit","prose",{screen:[vr]},vr,mr]}],h:[{h:[mr,t,"auto","min","max","fit"]}],"min-h":[{"min-h":["min","max","fit",mr,ar]}],"max-h":[{"max-h":[mr,t,"min","max","fit"]}],"font-size":[{text:["base",vr,ir]}],"font-smoothing":["antialiased","subpixel-antialiased"],"font-style":["italic","not-italic"],"font-weight":[{font:["thin","extralight","light","normal","medium","semibold","bold","extrabold","black",dr]}],"font-family":[{font:[gr]}],"fvn-normal":["normal-nums"],"fvn-ordinal":["ordinal"],"fvn-slashed-zero":["slashed-zero"],"fvn-figure":["lining-nums","oldstyle-nums"],"fvn-spacing":["proportional-nums","tabular-nums"],"fvn-fraction":["diagonal-fractions","stacked-fractons"],tracking:[{tracking:["tighter","tight","normal","wide","wider","widest",mr]}],"line-clamp":[{"line-clamp":["none",pr,dr]}],leading:[{leading:["none","tight","snug","normal","relaxed","loose",mr,ar]}],"list-image":[{"list-image":["none",mr]}],"list-style-type":[{list:["none","disc","decimal",mr]}],"list-style-position":[{list:["inside","outside"]}],"placeholder-color":[{placeholder:[e]}],"placeholder-opacity":[{"placeholder-opacity":[v]}],"text-alignment":[{text:["left","center","right","justify","start","end"]}],"text-color":[{text:[e]}],"text-opacity":[{"text-opacity":[v]}],"text-decoration":["underline","overline","line-through","no-underline"],"text-decoration-style":[{decoration:[].concat(["solid","dashed","dotted","double","none"],["wavy"])}],"text-decoration-thickness":[{decoration:["auto","from-font",ar]}],"underline-offset":[{"underline-offset":["auto",mr,ar]}],"text-decoration-color":[{decoration:[e]}],"text-transform":["uppercase","lowercase","capitalize","normal-case"],"text-overflow":["truncate","text-ellipsis","text-clip"],indent:[{indent:S()}],"vertical-align":[{align:["baseline","top","middle","bottom","text-top","text-bottom","sub","super",mr]}],whitespace:[{whitespace:["normal","nowrap","pre","pre-line","pre-wrap","break-spaces"]}],break:[{break:["normal","words","all","keep"]}],hyphens:[{hyphens:["none","manual","auto"]}],content:[{content:["none",mr]}],"bg-attachment":[{bg:["fixed","local","scroll"]}],"bg-clip":[{"bg-clip":["border","padding","content","text"]}],"bg-opacity":[{"bg-opacity":[v]}],"bg-origin":[{"bg-origin":["border","padding","content"]}],"bg-position":[{bg:[].concat(["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top"],[ur])}],"bg-repeat":[{bg:["no-repeat",{repeat:["","x","y","round","space"]}]}],"bg-size":[{bg:["auto","cover","contain",lr]}],"bg-image":[{bg:["none",{"gradient-to":["t","tr","r","br","b","bl","l","tl"]},cr]}],"bg-color":[{bg:[e]}],"gradient-from-pos":[{from:[f]}],"gradient-via-pos":[{via:[f]}],"gradient-to-pos":[{to:[f]}],"gradient-from":[{from:[h]}],"gradient-via":[{via:[h]}],"gradient-to":[{to:[h]}],rounded:[{rounded:[o]}],"rounded-s":[{"rounded-s":[o]}],"rounded-e":[{"rounded-e":[o]}],"rounded-t":[{"rounded-t":[o]}],"rounded-r":[{"rounded-r":[o]}],"rounded-b":[{"rounded-b":[o]}],"rounded-l":[{"rounded-l":[o]}],"rounded-ss":[{"rounded-ss":[o]}],"rounded-se":[{"rounded-se":[o]}],"rounded-ee":[{"rounded-ee":[o]}],"rounded-es":[{"rounded-es":[o]}],"rounded-tl":[{"rounded-tl":[o]}],"rounded-tr":[{"rounded-tr":[o]}],"rounded-br":[{"rounded-br":[o]}],"rounded-bl":[{"rounded-bl":[o]}],"border-w":[{border:[i]}],"border-w-x":[{"border-x":[i]}],"border-w-y":[{"border-y":[i]}],"border-w-s":[{"border-s":[i]}],"border-w-e":[{"border-e":[i]}],"border-w-t":[{"border-t":[i]}],"border-w-r":[{"border-r":[i]}],"border-w-b":[{"border-b":[i]}],"border-w-l":[{"border-l":[i]}],"border-opacity":[{"border-opacity":[v]}],"border-style":[{border:[].concat(["solid","dashed","dotted","double","none"],["hidden"])}],"divide-x":[{"divide-x":[i]}],"divide-x-reverse":["divide-x-reverse"],"divide-y":[{"divide-y":[i]}],"divide-y-reverse":["divide-y-reverse"],"divide-opacity":[{"divide-opacity":[v]}],"divide-style":[{divide:["solid","dashed","dotted","double","none"]}],"border-color":[{border:[s]}],"border-color-x":[{"border-x":[s]}],"border-color-y":[{"border-y":[s]}],"border-color-t":[{"border-t":[s]}],"border-color-r":[{"border-r":[s]}],"border-color-b":[{"border-b":[s]}],"border-color-l":[{"border-l":[s]}],"divide-color":[{divide:[s]}],"outline-style":[{outline:[""].concat(["solid","dashed","dotted","double","none"])}],"outline-offset":[{"outline-offset":[mr,ar]}],"outline-w":[{outline:[ar]}],"outline-color":[{outline:[e]}],"ring-w":[{ring:k()}],"ring-w-inset":["ring-inset"],"ring-color":[{ring:[e]}],"ring-opacity":[{"ring-opacity":[v]}],"ring-offset-w":[{"ring-offset":[ar]}],"ring-offset-color":[{"ring-offset":[e]}],shadow:[{shadow:["","inner","none",vr,yr]}],"shadow-color":[{shadow:[gr]}],opacity:[{opacity:[v]}],"mix-blend":[{"mix-blend":["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity","plus-lighter"]}],"bg-blend":[{"bg-blend":["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity","plus-lighter"]}],filter:[{filter:["","none"]}],blur:[{blur:[r]}],brightness:[{brightness:[n]}],contrast:[{contrast:[l]}],"drop-shadow":[{"drop-shadow":["","none",vr,mr]}],grayscale:[{grayscale:[u]}],"hue-rotate":[{"hue-rotate":[c]}],invert:[{invert:[d]}],saturate:[{saturate:[b]}],sepia:[{sepia:[w]}],"backdrop-filter":[{"backdrop-filter":["","none"]}],"backdrop-blur":[{"backdrop-blur":[r]}],"backdrop-brightness":[{"backdrop-brightness":[n]}],"backdrop-contrast":[{"backdrop-contrast":[l]}],"backdrop-grayscale":[{"backdrop-grayscale":[u]}],"backdrop-hue-rotate":[{"backdrop-hue-rotate":[c]}],"backdrop-invert":[{"backdrop-invert":[d]}],"backdrop-opacity":[{"backdrop-opacity":[v]}],"backdrop-saturate":[{"backdrop-saturate":[b]}],"backdrop-sepia":[{"backdrop-sepia":[w]}],"border-collapse":[{border:["collapse","separate"]}],"border-spacing":[{"border-spacing":[a]}],"border-spacing-x":[{"border-spacing-x":[a]}],"border-spacing-y":[{"border-spacing-y":[a]}],"table-layout":[{table:["auto","fixed"]}],caption:[{caption:["top","bottom"]}],transition:[{transition:["none","all","","colors","opacity","shadow","transform",mr]}],duration:[{duration:I()}],ease:[{ease:["linear","in","out","in-out",mr]}],delay:[{delay:I()}],animate:[{animate:["none","spin","ping","pulse","bounce",mr]}],transform:[{transform:["","gpu","none"]}],scale:[{scale:[x]}],"scale-x":[{"scale-x":[x]}],"scale-y":[{"scale-y":[x]}],rotate:[{rotate:[fr,mr]}],"translate-x":[{"translate-x":[C]}],"translate-y":[{"translate-y":[C]}],"skew-x":[{"skew-x":[P]}],"skew-y":[{"skew-y":[P]}],"transform-origin":[{origin:["center","top","top-right","right","bottom-right","bottom","bottom-left","left","top-left",mr]}],accent:[{accent:["auto",e]}],appearance:["appearance-none"],cursor:[{cursor:["auto","default","pointer","wait","text","move","help","not-allowed","none","context-menu","progress","cell","crosshair","vertical-text","alias","copy","no-drop","grab","grabbing","all-scroll","col-resize","row-resize","n-resize","e-resize","s-resize","w-resize","ne-resize","nw-resize","se-resize","sw-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","zoom-in","zoom-out",mr]}],"caret-color":[{caret:[e]}],"pointer-events":[{"pointer-events":["none","auto"]}],resize:[{resize:["none","y","x",""]}],"scroll-behavior":[{scroll:["auto","smooth"]}],"scroll-m":[{"scroll-m":S()}],"scroll-mx":[{"scroll-mx":S()}],"scroll-my":[{"scroll-my":S()}],"scroll-ms":[{"scroll-ms":S()}],"scroll-me":[{"scroll-me":S()}],"scroll-mt":[{"scroll-mt":S()}],"scroll-mr":[{"scroll-mr":S()}],"scroll-mb":[{"scroll-mb":S()}],"scroll-ml":[{"scroll-ml":S()}],"scroll-p":[{"scroll-p":S()}],"scroll-px":[{"scroll-px":S()}],"scroll-py":[{"scroll-py":S()}],"scroll-ps":[{"scroll-ps":S()}],"scroll-pe":[{"scroll-pe":S()}],"scroll-pt":[{"scroll-pt":S()}],"scroll-pr":[{"scroll-pr":S()}],"scroll-pb":[{"scroll-pb":S()}],"scroll-pl":[{"scroll-pl":S()}],"snap-align":[{snap:["start","end","center","align-none"]}],"snap-stop":[{snap:["normal","always"]}],"snap-type":[{snap:["none","x","y","both"]}],"snap-strictness":[{snap:["mandatory","proximity"]}],touch:[{touch:["auto","none","pinch-zoom","manipulation",{pan:["x","left","right","y","up","down"]}]}],select:[{select:["none","text","all","auto"]}],"will-change":[{"will-change":["auto","scroll","contents","transform",mr]}],fill:[{fill:[e,"none"]}],"stroke-w":[{stroke:[ar,dr]}],stroke:[{stroke:[e,"none"]}],sr:["sr-only","not-sr-only"]},conflictingClassGroups:{overflow:["overflow-x","overflow-y"],overscroll:["overscroll-x","overscroll-y"],inset:["inset-x","inset-y","start","end","top","right","bottom","left"],"inset-x":["right","left"],"inset-y":["top","bottom"],flex:["basis","grow","shrink"],gap:["gap-x","gap-y"],p:["px","py","ps","pe","pt","pr","pb","pl"],px:["pr","pl"],py:["pt","pb"],m:["mx","my","ms","me","mt","mr","mb","ml"],mx:["mr","ml"],my:["mt","mb"],"font-size":["leading"],"fvn-normal":["fvn-ordinal","fvn-slashed-zero","fvn-figure","fvn-spacing","fvn-fraction"],"fvn-ordinal":["fvn-normal"],"fvn-slashed-zero":["fvn-normal"],"fvn-figure":["fvn-normal"],"fvn-spacing":["fvn-normal"],"fvn-fraction":["fvn-normal"],rounded:["rounded-s","rounded-e","rounded-t","rounded-r","rounded-b","rounded-l","rounded-ss","rounded-se","rounded-ee","rounded-es","rounded-tl","rounded-tr","rounded-br","rounded-bl"],"rounded-s":["rounded-ss","rounded-es"],"rounded-e":["rounded-se","rounded-ee"],"rounded-t":["rounded-tl","rounded-tr"],"rounded-r":["rounded-tr","rounded-br"],"rounded-b":["rounded-br","rounded-bl"],"rounded-l":["rounded-tl","rounded-bl"],"border-spacing":["border-spacing-x","border-spacing-y"],"border-w":["border-w-s","border-w-e","border-w-t","border-w-r","border-w-b","border-w-l"],"border-w-x":["border-w-r","border-w-l"],"border-w-y":["border-w-t","border-w-b"],"border-color":["border-color-t","border-color-r","border-color-b","border-color-l"],"border-color-x":["border-color-r","border-color-l"],"border-color-y":["border-color-t","border-color-b"],"scroll-m":["scroll-mx","scroll-my","scroll-ms","scroll-me","scroll-mt","scroll-mr","scroll-mb","scroll-ml"],"scroll-mx":["scroll-mr","scroll-ml"],"scroll-my":["scroll-mt","scroll-mb"],"scroll-p":["scroll-px","scroll-py","scroll-ps","scroll-pe","scroll-pt","scroll-pr","scroll-pb","scroll-pl"],"scroll-px":["scroll-pr","scroll-pl"],"scroll-py":["scroll-pt","scroll-pb"]},conflictingClassGroupModifiers:{"font-size":["leading"]}}}var Sr=Object.prototype.hasOwnProperty,kr=new Set(["string","number","boolean"]);function Mr(e,t,r){if(Sr.call(e,t)&&!kr.has(typeof r)&&null!==r){if(Array.isArray(r)&&Array.isArray(e[t]))e[t]=e[t].concat(r);else if("object"==typeof r&&"object"==typeof e[t]){if(null===e[t])return void(e[t]=r);for(var n in r)Mr(e[t],n,r[n]);}}else e[t]=r;}function Ar(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return "function"==typeof e?Jt.apply(void 0,[Er,e].concat(r)):Jt.apply(void 0,[function(){return function(e,t){for(var r in t)Mr(e,r,t[r]);return e}(Er(),e)}].concat(r))}var Dr=Jt(Er),Ir={twMerge:!0,twMergeConfig:{},responsiveVariants:!1},Vr=e=>e||void 0,Lr=(...e)=>Vr(jt(e).filter(Boolean).join(" ")),Kr=null,Rr={},Nr=!1,jr=(...e)=>t=>t.twMerge?((!Kr||Nr)&&(Nr=!1,Kr=Rt(Rr)?Dr:Ar(Rr)),Vr(Kr(Lr(e)))):Lr(e),Fr=(e,t)=>{for(let r in t)e.hasOwnProperty(r)?e[r]=Lr(e[r],t[r]):e[r]=t[r];return e},Or=(e,t)=>{let{extend:r=null,slots:n={},variants:s={},compoundVariants:o=[],compoundSlots:a=[],defaultVariants:i={}}=e,l={...Ir,...t},u=null!=r&&r.base?Lr(r.base,null==e?void 0:e.base):null==e?void 0:e.base,c=null!=r&&r.variants&&!Rt(r.variants)?Ft(s,r.variants):s,d=null!=r&&r.defaultVariants&&!Rt(r.defaultVariants)?{...r.defaultVariants,...i}:i;!Rt(l.twMergeConfig)&&!((e,t)=>JSON.stringify(e)===JSON.stringify(t))(l.twMergeConfig,Rr)&&(Nr=!0,Rr=l.twMergeConfig);let p=Rt(n)?{}:{base:null==e?void 0:e.base,...n},h=Rt(null==r?void 0:r.slots)?p:Fr({...null==r?void 0:r.slots},Rt(p)?{base:null==e?void 0:e.base}:p),f=e=>{if(Rt(c)&&Rt(n)&&Rt(null==r?void 0:r.slots))return jr(u,null==e?void 0:e.class,null==e?void 0:e.className)(l);if(o&&!Array.isArray(o))throw new TypeError('The "compoundVariants" prop must be an array. Received: '+typeof o);if(a&&!Array.isArray(a))throw new TypeError('The "compoundSlots" prop must be an array. Received: '+typeof a);let t=(e,t,r=[],n)=>{let s=r;if("string"==typeof t)s=s.concat(Ot(t).split(" ").map((t=>`${e}:${t}`)));else if(Array.isArray(t))s=s.concat(t.reduce(((t,r)=>t.concat(`${e}:${r}`)),[]));else if("object"==typeof t&&"string"==typeof n)for(let r in t)if(t.hasOwnProperty(r)&&r===n){let o=t[r];if(o&&"string"==typeof o){let t=Ot(o);s[n]?s[n]=s[n].concat(t.split(" ").map((t=>`${e}:${t}`))):s[n]=t.split(" ").map((t=>`${e}:${t}`));}else Array.isArray(o)&&o.length>0&&(s[n]=o.reduce(((t,r)=>t.concat(`${e}:${r}`)),[]));}return s},s=(r,n=c,s=null,o=null)=>{var a;let i=n[r];if(!i||Rt(i))return null;let u=null!=(a=null==o?void 0:o[r])?a:null==e?void 0:e[r];if(null===u)return null;let p=Kt(u),h=Array.isArray(l.responsiveVariants)&&l.responsiveVariants.length>0||!0===l.responsiveVariants,f=null==d?void 0:d[r],m=[];if("object"==typeof p&&h)for(let[e,r]of Object.entries(p)){let n=i[r];"initial"!==e?Array.isArray(l.responsiveVariants)&&!l.responsiveVariants.includes(e)||(m=t(e,n,m,s)):f=r;}let g=i[p]||i[Kt(f)];return "object"==typeof m&&"string"==typeof s&&m[s]?Fr(m,g):m.length>0?(m.push(g),m):g},i=(e,t)=>{if(!c||"object"!=typeof c)return null;let r=new Array;for(let n in c){let o=s(n,c,e,t),a="base"===e&&"string"==typeof o?o:o&&o[e];a&&(r[r.length]=a);}return r},p={};for(let t in e)void 0!==e[t]&&(p[t]=e[t]);let f=(t,r)=>{var n;let s="object"==typeof(null==e?void 0:e[t])?{[t]:null==(n=e[t])?void 0:n.initial}:{};return {...d,...p,...s,...r}},m=(e=[],t)=>{let r=[];for(let{class:n,className:s,...o}of e){let e=!0;for(let[r,n]of Object.entries(o)){let s=f(r,t);if(Array.isArray(n)){if(!n.includes(s[r])){e=!1;break}}else if(s[r]!==n){e=!1;break}}e&&(n&&r.push(n),s&&r.push(s));}return r},g=e=>{let t=m(o,e);return ((...e)=>jt(e).filter(Boolean))(m(null==r?void 0:r.compoundVariants,e),t)},v=e=>{let t=g(e);if(!Array.isArray(t))return t;let r={};for(let e of t)if("string"==typeof e&&(r.base=jr(r.base,e)(l)),"object"==typeof e)for(let[t,n]of Object.entries(e))r[t]=jr(r[t],n)(l);return r},y=e=>{if(a.length<1)return null;let t={};for(let{slots:r=[],class:n,className:s,...o}of a){if(!Rt(o)){let t=!0;for(let r of Object.keys(o)){let n=f(r,e)[r];if(void 0===n||(Array.isArray(o[r])?!o[r].includes(n):o[r]!==n)){t=!1;break}}if(!t)continue}for(let e of r)t[e]=t[e]||[],t[e].push([n,s]);}return t};if(!Rt(n)||!Rt(null==r?void 0:r.slots)){let e={};if("object"==typeof h&&!Rt(h))for(let t of Object.keys(h))e[t]=e=>{var r,n;return jr(h[t],i(t,e),(null!=(r=v(e))?r:[])[t],(null!=(n=y(e))?n:[])[t],null==e?void 0:e.class,null==e?void 0:e.className)(l)};return e}return jr(u,c?Object.keys(c).map((e=>s(e,c))):null,g(),null==e?void 0:e.class,null==e?void 0:e.className)(l)};return f.variantKeys=(()=>{if(c&&"object"==typeof c)return Object.keys(c)})(),f.extend=r,f.base=u,f.slots=h,f.variants=c,f.defaultVariants=d,f.compoundSlots=a,f.compoundVariants=o,f},Br=["small","medium","large"],Wr=(e,t)=>{var r,n,s;return Or(e,{...t,twMerge:null==(r=null==t?void 0:t.twMerge)||r,twMergeConfig:{...null==t?void 0:t.twMergeConfig,theme:{...null==(n=null==t?void 0:t.twMergeConfig)?void 0:n.theme,opacity:["disabled"],spacing:["divider","unit",...Lt],borderWidth:Br,borderRadius:Br},classGroups:{...null==(s=null==t?void 0:t.twMergeConfig)?void 0:s.classGroups,shadow:[{shadow:Br}],"font-size":[{text:["tiny",...Br]}],"bg-image":["bg-stripe-gradient"],"min-w":[{"min-w":["unit",...Lt]}],"min-h":[{"min-h":["unit",...Lt]}]}}})},zr=["outline-none","data-[focus-visible=true]:z-10","data-[focus-visible=true]:outline-2","data-[focus-visible=true]:outline-focus","data-[focus-visible=true]:outline-offset-2"],Ur=["outline-none","group-data-[focus-visible=true]:z-10","group-data-[focus-visible=true]:ring-2","group-data-[focus-visible=true]:ring-focus","group-data-[focus-visible=true]:ring-offset-2","group-data-[focus-visible=true]:ring-offset-background"],Hr=["absolute","top-1/2","left-1/2","-translate-x-1/2","-translate-y-1/2"],$r={default:["[&+.border-medium.border-default]:ms-[calc(theme(borderWidth.medium)*-1)]"],primary:["[&+.border-medium.border-primary]:ms-[calc(theme(borderWidth.medium)*-1)]"],secondary:["[&+.border-medium.border-secondary]:ms-[calc(theme(borderWidth.medium)*-1)]"],success:["[&+.border-medium.border-success]:ms-[calc(theme(borderWidth.medium)*-1)]"],warning:["[&+.border-medium.border-warning]:ms-[calc(theme(borderWidth.medium)*-1)]"],danger:["[&+.border-medium.border-danger]:ms-[calc(theme(borderWidth.medium)*-1)]"]},_r={default:"bg-default text-default-foreground",primary:"bg-primary text-primary-foreground",secondary:"bg-secondary text-secondary-foreground",success:"bg-success text-success-foreground",warning:"bg-warning text-warning-foreground",danger:"bg-danger text-danger-foreground",foreground:"bg-foreground text-background"},Gr={default:"shadow-lg shadow-default/50 bg-default text-default-foreground",primary:"shadow-lg shadow-primary/40 bg-primary text-primary-foreground",secondary:"shadow-lg shadow-secondary/40 bg-secondary text-secondary-foreground",success:"shadow-lg shadow-success/40 bg-success text-success-foreground",warning:"shadow-lg shadow-warning/40 bg-warning text-warning-foreground",danger:"shadow-lg shadow-danger/40 bg-danger text-danger-foreground",foreground:"shadow-lg shadow-foreground/40 bg-foreground text-background"},qr={default:"bg-transparent border-default text-foreground",primary:"bg-transparent border-primary text-primary",secondary:"bg-transparent border-secondary text-secondary",success:"bg-transparent border-success text-success",warning:"bg-transparent border-warning text-warning",danger:"bg-transparent border-danger text-danger",foreground:"bg-transparent border-foreground text-foreground"},Yr={default:"bg-default/40 text-default-foreground",primary:"bg-primary/20 text-primary",secondary:"bg-secondary/20 text-secondary",success:"bg-success/20 text-success-600 dark:text-success",warning:"bg-warning/20 text-warning-600 dark:text-warning",danger:"bg-danger/20 text-danger dark:text-danger-500",foreground:"bg-foreground/10 text-foreground"},Xr={default:"border-default bg-default-100 text-default-foreground",primary:"border-default bg-default-100 text-primary",secondary:"border-default bg-default-100 text-secondary",success:"border-default bg-default-100 text-success",warning:"border-default bg-default-100 text-warning",danger:"border-default bg-default-100 text-danger",foreground:"border-default bg-default-100 text-foreground"},Zr={default:"bg-transparent text-default-foreground",primary:"bg-transparent text-primary",secondary:"bg-transparent text-secondary",success:"bg-transparent text-success",warning:"bg-transparent text-warning",danger:"bg-transparent text-danger",foreground:"bg-transparent text-foreground"},Jr={default:"border-default text-default-foreground hover:!bg-default",primary:"border-primary text-primary hover:!text-primary-foreground hover:!bg-primary",secondary:"border-secondary text-secondary hover:text-secondary-foreground hover:!bg-secondary",success:"border-success text-success hover:!text-success-foreground hover:!bg-success",warning:"border-warning text-warning hover:!text-warning-foreground hover:!bg-warning",danger:"border-danger text-danger hover:!text-danger-foreground hover:!bg-danger",foreground:"border-foreground text-foreground hover:!bg-foreground"},Qr=Wr({slots:{base:"relative inline-flex flex-col gap-2 items-center justify-center",wrapper:"relative flex",circle1:["absolute","w-full","h-full","rounded-full","animate-spinner-ease-spin","border-2","border-solid","border-t-transparent","border-l-transparent","border-r-transparent"],circle2:["absolute","w-full","h-full","rounded-full","opacity-75","animate-spinner-linear-spin","border-2","border-dotted","border-t-transparent","border-l-transparent","border-r-transparent"],label:"text-foreground dark:text-foreground-dark font-regular"},variants:{size:{sm:{wrapper:"w-5 h-5",circle1:"border-2",circle2:"border-2",label:"text-small"},md:{wrapper:"w-8 h-8",circle1:"border-3",circle2:"border-3",label:"text-medium"},lg:{wrapper:"w-10 h-10",circle1:"border-3",circle2:"border-3",label:"text-large"}},color:{current:{circle1:"border-b-current",circle2:"border-b-current"},white:{circle1:"border-b-white",circle2:"border-b-white"},default:{circle1:"border-b-default",circle2:"border-b-default"},primary:{circle1:"border-b-primary",circle2:"border-b-primary"},secondary:{circle1:"border-b-secondary",circle2:"border-b-secondary"},success:{circle1:"border-b-success",circle2:"border-b-success"},warning:{circle1:"border-b-warning",circle2:"border-b-warning"},danger:{circle1:"border-b-danger",circle2:"border-b-danger"}},labelColor:{foreground:{label:"text-foreground"},primary:{label:"text-primary"},secondary:{label:"text-secondary"},success:{label:"text-success"},warning:{label:"text-warning"},danger:{label:"text-danger"}}},defaultVariants:{size:"md",color:"primary",labelColor:"foreground"}}),en=Wr({slots:{base:"inline-flex",tabList:["flex","p-1","h-fit","gap-2","items-center","flex-nowrap","overflow-x-scroll","scrollbar-hide","bg-default-100"],tab:["z-0","w-full","px-3","py-1","flex","group","relative","justify-center","items-center","outline-none","cursor-pointer","transition-opacity","tap-highlight-transparent","data-[disabled=true]:cursor-not-allowed","data-[disabled=true]:opacity-30","data-[hover-unselected=true]:opacity-disabled",...zr],tabContent:["relative","z-10","text-inherit","whitespace-nowrap","transition-colors","text-default-500","group-data-[selected=true]:text-foreground"],cursor:["absolute","z-0","bg-white"],panel:["py-3","px-1","outline-none",...zr]},variants:{variant:{solid:{cursor:"inset-0"},light:{tabList:"bg-transparent dark:bg-transparent",cursor:"inset-0"},underlined:{tabList:"bg-transparent dark:bg-transparent",cursor:"h-[2px] w-[80%] bottom-0 shadow-[0_1px_0px_0_rgba(0,0,0,0.05)]"},bordered:{tabList:"bg-transparent dark:bg-transparent border-medium border-default-200 shadow-sm",cursor:"inset-0"}},color:{default:{},primary:{},secondary:{},success:{},warning:{},danger:{}},size:{sm:{tabList:"rounded-medium",tab:"h-7 text-tiny rounded-small",cursor:"rounded-small"},md:{tabList:"rounded-medium",tab:"h-8 text-small rounded-small",cursor:"rounded-small"},lg:{tabList:"rounded-large",tab:"h-9 text-medium rounded-medium",cursor:"rounded-medium"}},radius:{none:{tabList:"rounded-none",tab:"rounded-none",cursor:"rounded-none"},sm:{tabList:"rounded-medium",tab:"rounded-small",cursor:"rounded-small"},md:{tabList:"rounded-medium",tab:"rounded-small",cursor:"rounded-small"},lg:{tabList:"rounded-large",tab:"rounded-medium",cursor:"rounded-medium"},full:{tabList:"rounded-full",tab:"rounded-full",cursor:"rounded-full"}},fullWidth:{true:{base:"w-full",tabList:"w-full"}},isDisabled:{true:{tabList:"opacity-disabled pointer-events-none"}},disableAnimation:{true:{tab:"transition-none",tabContent:"transition-none"}}},defaultVariants:{color:"default",variant:"solid",size:"md",fullWidth:!1,isDisabled:!1,disableAnimation:!1},compoundVariants:[{variant:["solid","bordered","light"],color:"default",class:{cursor:["bg-background","dark:bg-default","shadow-small"],tabContent:"group-data-[selected=true]:text-default-foreground"}},{variant:["solid","bordered","light"],color:"primary",class:{cursor:_r.primary,tabContent:"group-data-[selected=true]:text-primary-foreground"}},{variant:["solid","bordered","light"],color:"secondary",class:{cursor:_r.secondary,tabContent:"group-data-[selected=true]:text-secondary-foreground"}},{variant:["solid","bordered","light"],color:"success",class:{cursor:_r.success,tabContent:"group-data-[selected=true]:text-success-foreground"}},{variant:["solid","bordered","light"],color:"warning",class:{cursor:_r.warning,tabContent:"group-data-[selected=true]:text-warning-foreground"}},{variant:["solid","bordered","light"],color:"danger",class:{cursor:_r.danger,tabContent:"group-data-[selected=true]:text-danger-foreground"}},{variant:"underlined",color:"default",class:{cursor:"bg-foreground",tabContent:"group-data-[selected=true]:text-foreground"}},{variant:"underlined",color:"primary",class:{cursor:"bg-primary",tabContent:"group-data-[selected=true]:text-primary"}},{variant:"underlined",color:"secondary",class:{cursor:"bg-secondary",tabContent:"group-data-[selected=true]:text-secondary"}},{variant:"underlined",color:"success",class:{cursor:"bg-success",tabContent:"group-data-[selected=true]:text-success"}},{variant:"underlined",color:"warning",class:{cursor:"bg-warning",tabContent:"group-data-[selected=true]:text-warning"}},{variant:"underlined",color:"danger",class:{cursor:"bg-danger",tabContent:"group-data-[selected=true]:text-danger"}},{disableAnimation:!0,variant:"underlined",class:{tab:["after:content-['']","after:absolute","after:bottom-0","after:h-[2px]","after:w-[80%]","after:opacity-0","after:shadow-[0_1px_0px_0_rgba(0,0,0,0.05)]","data-[selected=true]:after:opacity-100"]}},{disableAnimation:!0,color:"default",variant:["solid","bordered","light"],class:{tab:"data-[selected=true]:bg-default data-[selected=true]:text-default-foreground"}},{disableAnimation:!0,color:"primary",variant:["solid","bordered","light"],class:{tab:"data-[selected=true]:bg-primary data-[selected=true]:text-primary-foreground"}},{disableAnimation:!0,color:"secondary",variant:["solid","bordered","light"],class:{tab:"data-[selected=true]:bg-secondary data-[selected=true]:text-secondary-foreground"}},{disableAnimation:!0,color:"success",variant:["solid","bordered","light"],class:{tab:"data-[selected=true]:bg-success data-[selected=true]:text-success-foreground"}},{disableAnimation:!0,color:"warning",variant:["solid","bordered","light"],class:{tab:"data-[selected=true]:bg-warning data-[selected=true]:text-warning-foreground"}},{disableAnimation:!0,color:"danger",variant:["solid","bordered","light"],class:{tab:"data-[selected=true]:bg-danger data-[selected=true]:text-danger-foreground"}},{disableAnimation:!0,color:"default",variant:"underlined",class:{tab:"data-[selected=true]:after:bg-foreground"}},{disableAnimation:!0,color:"primary",variant:"underlined",class:{tab:"data-[selected=true]:after:bg-primary"}},{disableAnimation:!0,color:"secondary",variant:"underlined",class:{tab:"data-[selected=true]:after:bg-secondary"}},{disableAnimation:!0,color:"success",variant:"underlined",class:{tab:"data-[selected=true]:after:bg-success"}},{disableAnimation:!0,color:"warning",variant:"underlined",class:{tab:"data-[selected=true]:after:bg-warning"}},{disableAnimation:!0,color:"danger",variant:"underlined",class:{tab:"data-[selected=true]:after:bg-danger"}}],compoundSlots:[{variant:"underlined",slots:["tab","tabList","cursor"],class:["rounded-none"]}]}),tn=Wr({slots:{base:"group relative max-w-fit inline-flex items-center justify-start cursor-pointer touch-none tap-highlight-transparent",wrapper:["px-1","relative","inline-flex","items-center","justify-start","flex-shrink-0","overflow-hidden","bg-default-200","rounded-full",...Ur],thumb:["z-10","flex","items-center","justify-center","bg-white","shadow-small","rounded-full","origin-right"],startContent:"z-0 absolute left-1.5 text-current",endContent:"z-0 absolute right-1.5 text-default-600",thumbIcon:"text-black",label:"relative text-foreground select-none"},variants:{color:{default:{wrapper:["group-data-[selected=true]:bg-default-400","group-data-[selected=true]:text-default-foreground"]},primary:{wrapper:["group-data-[selected=true]:bg-primary","group-data-[selected=true]:text-primary-foreground"]},secondary:{wrapper:["group-data-[selected=true]:bg-secondary","group-data-[selected=true]:text-secondary-foreground"]},success:{wrapper:["group-data-[selected=true]:bg-success","group-data-[selected=true]:text-success-foreground"]},warning:{wrapper:["group-data-[selected=true]:bg-warning","group-data-[selected=true]:text-warning-foreground"]},danger:{wrapper:["group-data-[selected=true]:bg-danger","data-[selected=true]:text-danger-foreground"]}},size:{sm:{wrapper:"w-10 h-6 mr-2",thumb:["w-4 h-4 text-tiny","group-data-[selected=true]:ml-4"],endContent:"text-tiny",startContent:"text-tiny",label:"text-small"},md:{wrapper:"w-12 h-7 mr-2",thumb:["w-5 h-5 text-small","group-data-[selected=true]:ml-5"],endContent:"text-small",startContent:"text-small",label:"text-medium"},lg:{wrapper:"w-14 h-8 mr-2",thumb:["w-6 h-6 text-medium","group-data-[selected=true]:ml-6"],endContent:"text-medium",startContent:"text-medium",label:"text-large"}},isDisabled:{true:{base:"opacity-disabled pointer-events-none"}},disableAnimation:{true:{wrapper:"transition-none",thumb:"transition-none"},false:{wrapper:"transition-background",thumb:"transition-all",startContent:["opacity-0","scale-50","transition-transform-opacity","group-data-[selected=true]:scale-100","group-data-[selected=true]:opacity-100"],endContent:["opacity-100","transition-transform-opacity","group-data-[selected=true]:translate-x-3","group-data-[selected=true]:opacity-0"]}}},defaultVariants:{color:"primary",size:"md",isDisabled:!1,disableAnimation:!1},compoundVariants:[{disableAnimation:!1,size:"sm",class:{thumb:["group-data-[pressed=true]:w-5","group-data-[selected]:group-data-[pressed]:ml-3"]}},{disableAnimation:!1,size:"md",class:{thumb:["group-data-[pressed=true]:w-6","group-data-[selected]:group-data-[pressed]:ml-4"]}},{disableAnimation:!1,size:"lg",class:{thumb:["group-data-[pressed=true]:w-7","group-data-[selected]:group-data-[pressed]:ml-5"]}}]}),rn=Wr({slots:{base:"group relative max-w-fit inline-flex items-center justify-start cursor-pointer tap-highlight-transparent p-2 -m-2",wrapper:["relative","inline-flex","items-center","justify-center","flex-shrink-0","overflow-hidden","border-solid","border-medium","box-border","border-default","rounded-full","group-data-[hover-unselected=true]:bg-default-100",...Ur],labelWrapper:"flex flex-col ml-1",control:["z-10","w-2","h-2","opacity-0","scale-0","origin-center","rounded-full","group-data-[selected=true]:opacity-100","group-data-[selected=true]:scale-100"],label:"relative text-foreground select-none",description:"relative text-foreground-400"},variants:{color:{default:{control:"bg-default-500 text-default-foreground",wrapper:"group-data-[selected=true]:border-default-500"},primary:{control:"bg-primary text-primary-foreground",wrapper:"group-data-[selected=true]:border-primary"},secondary:{control:"bg-secondary text-secondary-foreground",wrapper:"group-data-[selected=true]:border-secondary"},success:{control:"bg-success text-success-foreground",wrapper:"group-data-[selected=true]:border-success"},warning:{control:"bg-warning text-warning-foreground",wrapper:"group-data-[selected=true]:border-warning"},danger:{control:"bg-danger text-danger-foreground",wrapper:"group-data-[selected=true]:border-danger"}},size:{sm:{wrapper:"w-4 h-4",control:"w-1.5 h-1.5",labelWrapper:"ml-1",label:"text-small",description:"text-tiny"},md:{wrapper:"w-5 h-5",control:"w-2 h-2",labelWrapper:"ml-2",label:"text-medium",description:"text-small"},lg:{wrapper:"w-6 h-6",control:"w-2.5 h-2.5",labelWrapper:"ml-2",label:"text-large",description:"text-medium"}},isDisabled:{true:{base:"opacity-disabled pointer-events-none"}},isInvalid:{true:{control:"bg-danger text-danger-foreground",wrapper:"border-danger group-data-[selected=true]:border-danger",label:"text-danger",description:"text-danger-300"}},disableAnimation:{true:{},false:{wrapper:["group-data-[pressed=true]:scale-95","transition-transform-colors","motion-reduce:transition-none"],control:"transition-transform-opacity motion-reduce:transition-none",label:"transition-colors motion-reduce:transition-none",description:"transition-colors motion-reduce:transition-none"}}},defaultVariants:{color:"primary",size:"md",isDisabled:!1,isInvalid:!1,disableAnimation:!1}}),nn=Wr({slots:{base:"relative flex flex-col gap-2",label:"relative text-foreground-500",wrapper:"flex flex-col flex-wrap gap-2 data-[orientation=horizontal]:flex-row",description:"text-tiny text-foreground-400",errorMessage:"text-tiny text-danger"},variants:{isRequired:{true:{label:"after:content-['*'] after:text-danger after:ml-0.5"}},isInvalid:{true:{description:"text-danger"}},disableAnimation:{true:{},false:{description:"transition-colors !duration-150 motion-reduce:transition-none"}}},defaultVariants:{isInvalid:!1,isRequired:!1,disableAnimation:!1}}),sn=Wr({slots:{base:"group flex flex-col",label:["absolute","z-10","pointer-events-none","origin-top-left","subpixel-antialiased","block","text-small","text-foreground-500"],mainWrapper:"h-full",inputWrapper:"relative w-full inline-flex tap-highlight-transparent flex-row items-center shadow-sm px-3 gap-3",innerWrapper:"inline-flex w-full items-center h-full box-border",input:["w-full font-normal bg-transparent !outline-none placeholder:text-foreground-500 focus-visible:outline-none","data-[has-start-content=true]:ps-1.5","data-[has-end-content=true]:pe-1.5"],clearButton:["p-2","-m-2","z-10","hidden","absolute","right-3","appearance-none","outline-none","select-none","opacity-0","hover:!opacity-100","cursor-pointer","active:!opacity-70","rounded-full",...zr],helperWrapper:"hidden group-data-[has-helper=true]:flex p-1 relative flex-col gap-1.5",description:"text-tiny text-foreground-400",errorMessage:"text-tiny text-danger"},variants:{variant:{flat:{inputWrapper:["bg-default-100","data-[hover=true]:bg-default-200","group-data-[focus=true]:bg-default-100"]},faded:{inputWrapper:["bg-default-100","border-medium","border-default-200","data-[hover=true]:border-default-400"],value:"group-data-[has-value=true]:text-default-foreground"},bordered:{inputWrapper:["border-medium","border-default-200","data-[hover=true]:border-default-400","group-data-[focus=true]:border-default-foreground"]},underlined:{inputWrapper:["!px-1","!pb-0","!gap-0","relative","box-border","border-b-medium","shadow-[0_1px_0px_0_rgba(0,0,0,0.05)]","border-default-200","!rounded-none","hover:border-default-300","after:content-['']","after:w-0","after:origin-center","after:bg-default-foreground","after:absolute","after:left-1/2","after:-translate-x-1/2","after:-bottom-[2px]","after:h-[2px]","group-data-[focus=true]:after:w-full"],innerWrapper:"pb-1",label:"group-data-[filled-within=true]:text-foreground"}},color:{default:{},primary:{},secondary:{},success:{},warning:{},danger:{}},size:{sm:{label:"text-tiny",inputWrapper:"h-unit-8 min-h-unit-8 px-2 rounded-small",input:"text-small",clearButton:"text-medium"},md:{inputWrapper:"h-unit-10 min-h-unit-10 rounded-medium",input:"text-small",clearButton:"text-large"},lg:{inputWrapper:"h-unit-12 min-h-unit-12 rounded-large",input:"text-medium",clearButton:"text-large"}},radius:{none:{inputWrapper:"rounded-none"},sm:{inputWrapper:"rounded-small"},md:{inputWrapper:"rounded-medium"},lg:{inputWrapper:"rounded-large"},full:{inputWrapper:"rounded-full"}},labelPlacement:{outside:{mainWrapper:"flex flex-col"},"outside-left":{base:"flex-row items-center flex-nowrap data-[has-helper=true]:items-start",inputWrapper:"flex-1",mainWrapper:"flex flex-col",label:"relative text-foreground pr-2"},inside:{label:"text-tiny cursor-text",inputWrapper:"flex-col items-start justify-center gap-0",innerWrapper:"group-data-[has-label=true]:items-end"}},fullWidth:{true:{base:"w-full"}},isClearable:{true:{input:"peer pr-6",clearButton:"peer-data-[filled=true]:opacity-70 peer-data-[filled=true]:block"}},isDisabled:{true:{base:"opacity-disabled pointer-events-none",inputWrapper:"pointer-events-none",label:"pointer-events-none"}},isInvalid:{true:{label:"!text-danger",input:"!placeholder:text-danger !text-danger"}},isRequired:{true:{label:"after:content-['*'] after:text-danger after:ml-0.5"}},isMultiline:{true:{label:"relative",inputWrapper:"!h-auto",innerWrapper:"items-start group-data-[has-label=true]:items-start",input:"resize-none data-[hide-scroll=true]:scrollbar-hide"}},disableAnimation:{true:{input:"transition-none",inputWrapper:"transition-none",label:"transition-none"},false:{inputWrapper:"transition-background motion-reduce:transition-none !duration-150",label:["will-change-auto","!duration-200","!ease-out","motion-reduce:transition-none","transition-[transform,color,left,opacity]"],clearButton:["transition-opacity","motion-reduce:transition-none"]}}},defaultVariants:{variant:"flat",color:"default",size:"md",fullWidth:!0,labelPlacement:"inside",isDisabled:!1,isMultiline:!1,disableAnimation:!1},compoundVariants:[{variant:"flat",color:"default",class:{input:"group-data-[has-value=true]:text-default-foreground"}},{variant:"flat",color:"primary",class:{inputWrapper:["bg-primary-50","data-[hover=true]:bg-primary-100","text-primary","group-data-[focus=true]:bg-primary-50","placeholder:text-primary"],input:"placeholder:text-primary",label:"text-primary"}},{variant:"flat",color:"secondary",class:{inputWrapper:["bg-secondary-50","text-secondary","data-[hover=true]:bg-secondary-100","group-data-[focus=true]:bg-secondary-50","placeholder:text-secondary"],input:"placeholder:text-secondary",label:"text-secondary"}},{variant:"flat",color:"success",class:{inputWrapper:["bg-success-50","text-success-600","dark:text-success","placeholder:text-success-600","dark:placeholder:text-success","data-[hover=true]:bg-success-100","group-data-[focus=true]:bg-success-50"],input:"placeholder:text-success-600 dark:placeholder:text-success",label:"text-success-600 dark:text-success"}},{variant:"flat",color:"warning",class:{inputWrapper:["bg-warning-50","text-warning-600","dark:text-warning","placeholder:text-warning-600","dark:placeholder:text-warning","data-[hover=true]:bg-warning-100","group-data-[focus=true]:bg-warning-50"],input:"placeholder:text-warning-600 dark:placeholder:text-warning",label:"text-warning-600 dark:text-warning"}},{variant:"flat",color:"danger",class:{inputWrapper:["bg-danger-50","text-danger","dark:text-danger-500","placeholder:text-danger","dark:placeholder:text-danger-500","data-[hover=true]:bg-danger-100","group-data-[focus=true]:bg-danger-50"],input:"placeholder:text-danger dark:placeholder:text-danger-500",label:"text-danger dark:text-danger-500"}},{variant:"faded",color:"primary",class:{label:"text-primary",inputWrapper:"data-[hover=true]:border-primary focus-within:border-primary"}},{variant:"faded",color:"secondary",class:{label:"text-secondary",inputWrapper:"data-[hover=true]:border-secondary focus-within:border-secondary"}},{variant:"faded",color:"success",class:{label:"text-success",inputWrapper:"data-[hover=true]:border-success focus-within:border-success"}},{variant:"faded",color:"warning",class:{label:"text-warning",inputWrapper:"data-[hover=true]:border-warning focus-within:border-warning"}},{variant:"faded",color:"danger",class:{label:"text-danger",inputWrapper:"data-[hover=true]:border-danger focus-within:border-danger"}},{variant:"underlined",color:"default",class:{input:"group-data-[has-value=true]:text-foreground"}},{variant:"underlined",color:"primary",class:{inputWrapper:"after:bg-primary",label:"text-primary"}},{variant:"underlined",color:"secondary",class:{inputWrapper:"after:bg-secondary",label:"text-secondary"}},{variant:"underlined",color:"success",class:{inputWrapper:"after:bg-success",label:"text-success"}},{variant:"underlined",color:"warning",class:{inputWrapper:"after:bg-warning",label:"text-warning"}},{variant:"underlined",color:"danger",class:{inputWrapper:"after:bg-danger",label:"text-danger"}},{variant:"bordered",color:"primary",class:{inputWrapper:"group-data-[focus=true]:border-primary",label:"text-primary"}},{variant:"bordered",color:"secondary",class:{inputWrapper:"group-data-[focus=true]:border-secondary",label:"text-secondary"}},{variant:"bordered",color:"success",class:{inputWrapper:"group-data-[focus=true]:border-success",label:"text-success"}},{variant:"bordered",color:"warning",class:{inputWrapper:"group-data-[focus=true]:border-warning",label:"text-warning"}},{variant:"bordered",color:"danger",class:{inputWrapper:"group-data-[focus=true]:border-danger",label:"text-danger"}},{labelPlacement:"inside",color:"default",class:{label:"group-data-[filled-within=true]:text-default-600"}},{labelPlacement:"outside",color:"default",class:{label:"group-data-[filled-within=true]:text-foreground"}},{radius:"full",size:["sm"],class:{inputWrapper:"px-3"}},{radius:"full",size:"md",class:{inputWrapper:"px-4"}},{radius:"full",size:"lg",class:{inputWrapper:"px-5"}},{disableAnimation:!1,variant:["faded","bordered"],class:{inputWrapper:"transition-colors motion-reduce:transition-none"}},{disableAnimation:!1,variant:"underlined",class:{inputWrapper:"after:transition-width motion-reduce:after:transition-none"}},{variant:["flat","faded"],class:{inputWrapper:[...Ur]}},{isInvalid:!0,variant:"flat",class:{inputWrapper:["bg-danger-50","data-[hover=true]:bg-danger-100","group-data-[focus=true]:bg-danger-50"]}},{isInvalid:!0,variant:"bordered",class:{inputWrapper:"!border-danger group-data-[focus=true]:border-danger"}},{isInvalid:!0,variant:"underlined",class:{inputWrapper:"after:bg-danger"}},{labelPlacement:"inside",size:"sm",class:{inputWrapper:"h-12 py-1.5 px-3"}},{labelPlacement:"inside",size:"md",class:{inputWrapper:"h-14 py-2"}},{labelPlacement:"inside",size:"lg",class:{label:"text-small",inputWrapper:"h-16 py-2.5 gap-0"}},{labelPlacement:"inside",size:"sm",variant:["bordered","faded"],class:{inputWrapper:"py-1"}},{labelPlacement:["inside","outside"],class:{label:["group-data-[filled-within=true]:pointer-events-auto"]}},{labelPlacement:["outside","outside-left"],class:{input:"h-full"}},{labelPlacement:"outside",isMultiline:!1,class:{base:"group relative justify-end",label:["pb-0","z-20","top-1/2","-translate-y-1/2","group-data-[filled-within=true]:left-0"]}},{labelPlacement:["inside"],class:{label:["group-data-[filled-within=true]:scale-85"]}},{labelPlacement:["inside"],variant:"flat",class:{innerWrapper:"pb-0.5"}},{variant:"underlined",size:"sm",class:{innerWrapper:"pb-1"}},{variant:"underlined",size:["md","lg"],class:{innerWrapper:"pb-1.5"}},{labelPlacement:"inside",size:["sm","md"],class:{label:"text-small"}},{labelPlacement:"inside",isMultiline:!1,size:"sm",class:{label:["group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.tiny)/2_-_8px)]"]}},{labelPlacement:"inside",isMultiline:!1,size:"md",class:{label:["group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_6px)]"]}},{labelPlacement:"inside",isMultiline:!1,size:"lg",class:{label:["text-medium","group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_8px)]"]}},{labelPlacement:"inside",variant:["faded","bordered"],isMultiline:!1,size:"sm",class:{label:["group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.tiny)/2_-_8px_-_theme(borderWidth.medium))]"]}},{labelPlacement:"inside",variant:["faded","bordered"],isMultiline:!1,size:"md",class:{label:["group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_6px_-_theme(borderWidth.medium))]"]}},{labelPlacement:"inside",variant:["faded","bordered"],isMultiline:!1,size:"lg",class:{label:["text-medium","group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_8px_-_theme(borderWidth.medium))]"]}},{labelPlacement:"inside",variant:"underlined",isMultiline:!1,size:"sm",class:{label:["group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.tiny)/2_-_5px)]"]}},{labelPlacement:"inside",variant:"underlined",isMultiline:!1,size:"md",class:{label:["group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_3.5px)]"]}},{labelPlacement:"inside",variant:"underlined",size:"lg",isMultiline:!1,class:{label:["text-medium","group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_4px)]"]}},{labelPlacement:"outside",size:"sm",isMultiline:!1,class:{label:["left-2","text-tiny","group-data-[filled-within=true]:-translate-y-[calc(100%_+_theme(fontSize.tiny)/2_+_16px)]"],base:"data-[has-label=true]:mt-[calc(theme(fontSize.small)_+_8px)]"}},{labelPlacement:"outside",size:"md",isMultiline:!1,class:{label:["left-3","text-small","group-data-[filled-within=true]:-translate-y-[calc(100%_+_theme(fontSize.small)/2_+_20px)]"],base:"data-[has-label=true]:mt-[calc(theme(fontSize.small)_+_10px)]"}},{labelPlacement:"outside",size:"lg",isMultiline:!1,class:{label:["left-3","text-medium","group-data-[filled-within=true]:-translate-y-[calc(100%_+_theme(fontSize.small)/2_+_24px)]"],base:"data-[has-label=true]:mt-[calc(theme(fontSize.small)_+_12px)]"}},{labelPlacement:"outside-left",size:"sm",class:{label:"group-data-[has-helper=true]:pt-2"}},{labelPlacement:"outside-left",size:"md",class:{label:"group-data-[has-helper=true]:pt-3"}},{labelPlacement:"outside-left",size:"lg",class:{label:"group-data-[has-helper=true]:pt-4"}},{labelPlacement:["outside","outside-left"],isMultiline:!0,class:{inputWrapper:"py-2"}},{labelPlacement:"outside",isMultiline:!0,class:{label:"pb-1.5"}},{labelPlacement:"inside",isMultiline:!0,class:{label:"pb-0.5",input:"pt-0"}},{isMultiline:!0,disableAnimation:!1,class:{input:"transition-height !duration-100 motion-reduce:transition-none"}},{labelPlacement:["inside","outside"],class:{label:["pe-2","max-w-full","text-ellipsis","overflow-hidden"]}},{isMultiline:!0,radius:"full",class:{inputWrapper:"data-[has-multiple-rows=true]:rounded-large"}}]}),on$1=Wr({slots:{base:["relative","max-w-fit","inline-flex","items-center","justify-between","box-border","whitespace-nowrap"],content:"flex-1 text-inherit font-normal",dot:["w-2","h-2","ml-1","rounded-full"],avatar:"flex-shrink-0",closeButton:["z-10","appearance-none","outline-none","select-none","transition-opacity","opacity-70","hover:opacity-100","cursor-pointer","active:opacity-disabled","tap-highlight-transparent"]},variants:{variant:{solid:{},bordered:{base:"border-medium bg-transparent"},light:{base:"bg-transparent"},flat:{},faded:{base:"border-medium"},shadow:{},dot:{base:"border-medium border-default text-foreground bg-transparent"}},color:{default:{dot:"bg-default-400"},primary:{dot:"bg-primary"},secondary:{dot:"bg-secondary"},success:{dot:"bg-success"},warning:{dot:"bg-warning"},danger:{dot:"bg-danger"}},size:{sm:{base:"px-1 h-6 text-tiny",content:"px-1",closeButton:"text-medium",avatar:"w-4 h-4"},md:{base:"px-1 h-7 text-small",content:"px-2",closeButton:"text-large",avatar:"w-5 h-5"},lg:{base:"px-2 h-8 text-medium",content:"px-2",closeButton:"text-xl",avatar:"w-6 h-6"}},radius:{none:{base:"rounded-none"},sm:{base:"rounded-small"},md:{base:"rounded-medium"},lg:{base:"rounded-large"},full:{base:"rounded-full"}},isOneChar:{true:{},false:{}},isCloseable:{true:{},false:{}},hasStartContent:{true:{}},hasEndContent:{true:{}},isDisabled:{true:{base:"opacity-disabled pointer-events-none"}},isCloseButtonFocusVisible:{true:{closeButton:["outline-none","ring-2","ring-focus","ring-offset-2","ring-offset-background","ring-1","rounded-full"]}}},defaultVariants:{variant:"solid",color:"default",size:"md",radius:"full",isDisabled:!1},compoundVariants:[{variant:"solid",color:"default",class:{base:_r.default}},{variant:"solid",color:"primary",class:{base:_r.primary}},{variant:"solid",color:"secondary",class:{base:_r.secondary}},{variant:"solid",color:"success",class:{base:_r.success}},{variant:"solid",color:"warning",class:{base:_r.warning}},{variant:"solid",color:"danger",class:{base:_r.danger}},{variant:"shadow",color:"default",class:{base:Gr.default}},{variant:"shadow",color:"primary",class:{base:Gr.primary}},{variant:"shadow",color:"secondary",class:{base:Gr.secondary}},{variant:"shadow",color:"success",class:{base:Gr.success}},{variant:"shadow",color:"warning",class:{base:Gr.warning}},{variant:"shadow",color:"danger",class:{base:Gr.danger}},{variant:"bordered",color:"default",class:{base:qr.default}},{variant:"bordered",color:"primary",class:{base:qr.primary}},{variant:"bordered",color:"secondary",class:{base:qr.secondary}},{variant:"bordered",color:"success",class:{base:qr.success}},{variant:"bordered",color:"warning",class:{base:qr.warning}},{variant:"bordered",color:"danger",class:{base:qr.danger}},{variant:"flat",color:"default",class:{base:Yr.default}},{variant:"flat",color:"primary",class:{base:Yr.primary}},{variant:"flat",color:"secondary",class:{base:Yr.secondary}},{variant:"flat",color:"success",class:{base:Yr.success}},{variant:"flat",color:"warning",class:{base:Yr.warning}},{variant:"flat",color:"danger",class:{base:Yr.danger}},{variant:"faded",color:"default",class:{base:Xr.default}},{variant:"faded",color:"primary",class:{base:Xr.primary}},{variant:"faded",color:"secondary",class:{base:Xr.secondary}},{variant:"faded",color:"success",class:{base:Xr.success}},{variant:"faded",color:"warning",class:{base:Xr.warning}},{variant:"faded",color:"danger",class:{base:Xr.danger}},{variant:"light",color:"default",class:{base:Zr.default}},{variant:"light",color:"primary",class:{base:Zr.primary}},{variant:"light",color:"secondary",class:{base:Zr.secondary}},{variant:"light",color:"success",class:{base:Zr.success}},{variant:"light",color:"warning",class:{base:Zr.warning}},{variant:"light",color:"danger",class:{base:Zr.danger}},{isOneChar:!0,size:"sm",class:{base:"w-5 h-5 min-w-unit-5 min-h-5"}},{isOneChar:!0,size:"md",class:{base:"w-6 h-6 min-w-unit-6 min-h-6"}},{isOneChar:!0,size:"lg",class:{base:"w-7 h-7 min-w-unit-7 min-h-7"}},{isOneChar:!0,isCloseable:!1,class:{base:"px-0 justify-center",content:"px-0 flex-none"}},{isOneChar:!0,isCloseable:!0,class:{base:"w-auto"}},{hasStartContent:!0,size:"sm",class:{content:"pl-0.5"}},{hasStartContent:!0,size:["md","lg"],class:{content:"pl-1"}},{hasEndContent:!0,size:"sm",class:{content:"pr-0.5"}},{hasEndContent:!0,size:["md","lg"],class:{content:"pr-1"}}]}),an=Wr({slots:{base:["flex","relative","justify-center","items-center","box-border","overflow-hidden","align-middle","text-white","z-0",...zr],img:["flex","object-cover","w-full","h-full","transition-opacity","!duration-500","opacity-0","data-[loaded=true]:opacity-100"],fallback:[...Hr,"flex","items-center","justify-center"],name:[...Hr,"font-normal","text-center","text-inherit"],icon:[...Hr,"flex","items-center","justify-center","text-inherit","w-full","h-full"]},variants:{size:{sm:{base:"w-8 h-8 text-tiny"},md:{base:"w-10 h-10 text-tiny"},lg:{base:"w-14 h-14 text-small"}},color:{default:{base:_r.default},primary:{base:_r.primary},secondary:{base:_r.secondary},success:{base:_r.success},warning:{base:_r.warning},danger:{base:_r.danger}},radius:{none:{base:"rounded-none"},sm:{base:"rounded-small"},md:{base:"rounded-medium"},lg:{base:"rounded-large"},full:{base:"rounded-full"}},isBordered:{true:{base:"ring-2 ring-offset-2 ring-offset-background dark:ring-offset-background-dark"}},isDisabled:{true:{base:"opacity-disabled"}},isInGroup:{true:{base:["-ms-2 data-[hover=true]:-translate-x-3 transition-transform","data-[focus-visible=true]:-translate-x-3"]}},isInGridGroup:{true:{base:"m-0 data-[hover=true]:translate-x-0"}}},defaultVariants:{size:"md",color:"default",radius:"full"},compoundVariants:[{color:"default",isBordered:!0,class:{base:"ring-default"}},{color:"primary",isBordered:!0,class:{base:"ring-primary"}},{color:"secondary",isBordered:!0,class:{base:"ring-secondary"}},{color:"success",isBordered:!0,class:{base:"ring-success"}},{color:"warning",isBordered:!0,class:{base:"ring-warning"}},{color:"danger",isBordered:!0,class:{base:"ring-danger"}}]});Wr({base:"flex items-center justify-center h-auto w-max-content",variants:{isGrid:{true:"inline-grid grid-cols-4 gap-3"}}});var ln=Wr({base:["z-0","group","relative","inline-flex","items-center","justify-center","box-border","appearance-none","outline-none","select-none","whitespace-nowrap","min-w-max","font-normal","subpixel-antialiased","overflow-hidden","tap-highlight-transparent",...zr],variants:{variant:{solid:"",bordered:"border-medium bg-transparent",light:"bg-transparent",flat:"",faded:"border-medium",shadow:"",ghost:"border-medium bg-transparent"},size:{sm:"px-unit-3 min-w-unit-16 h-unit-8 text-tiny gap-unit-2 rounded-small",md:"px-unit-4 min-w-unit-20 h-unit-10 text-small gap-unit-2 rounded-medium",lg:"px-unit-6 min-w-unit-24 h-unit-12 text-medium gap-unit-3 rounded-large"},color:{default:"",primary:"",secondary:"",success:"",warning:"",danger:""},radius:{none:"rounded-none",sm:"rounded-small",md:"rounded-medium",lg:"rounded-large",full:"rounded-full"},fullWidth:{true:"w-full"},isDisabled:{true:"opacity-disabled pointer-events-none"},isInGroup:{true:"[&:not(:first-child):not(:last-child)]:rounded-none"},isIconOnly:{true:"px-unit-0 !gap-unit-0",false:"[&>svg]:max-w-[theme(spacing.unit-8)]"},disableAnimation:{true:"!transition-none",false:"data-[pressed=true]:scale-[0.97] transition-transform-colors-opacity motion-reduce:transition-none"}},defaultVariants:{size:"md",variant:"solid",color:"default",fullWidth:!1,isDisabled:!1,isInGroup:!1,disableAnimation:!1},compoundVariants:[{variant:"solid",color:"default",class:_r.default},{variant:"solid",color:"primary",class:_r.primary},{variant:"solid",color:"secondary",class:_r.secondary},{variant:"solid",color:"success",class:_r.success},{variant:"solid",color:"warning",class:_r.warning},{variant:"solid",color:"danger",class:_r.danger},{variant:"shadow",color:"default",class:Gr.default},{variant:"shadow",color:"primary",class:Gr.primary},{variant:"shadow",color:"secondary",class:Gr.secondary},{variant:"shadow",color:"success",class:Gr.success},{variant:"shadow",color:"warning",class:Gr.warning},{variant:"shadow",color:"danger",class:Gr.danger},{variant:"bordered",color:"default",class:qr.default},{variant:"bordered",color:"primary",class:qr.primary},{variant:"bordered",color:"secondary",class:qr.secondary},{variant:"bordered",color:"success",class:qr.success},{variant:"bordered",color:"warning",class:qr.warning},{variant:"bordered",color:"danger",class:qr.danger},{variant:"flat",color:"default",class:Yr.default},{variant:"flat",color:"primary",class:Yr.primary},{variant:"flat",color:"secondary",class:Yr.secondary},{variant:"flat",color:"success",class:Yr.success},{variant:"flat",color:"warning",class:Yr.warning},{variant:"flat",color:"danger",class:Yr.danger},{variant:"faded",color:"default",class:Xr.default},{variant:"faded",color:"primary",class:Xr.primary},{variant:"faded",color:"secondary",class:Xr.secondary},{variant:"faded",color:"success",class:Xr.success},{variant:"faded",color:"warning",class:Xr.warning},{variant:"faded",color:"danger",class:Xr.danger},{variant:"light",color:"default",class:[Zr.default,"data-[hover=true]:bg-default/40"]},{variant:"light",color:"primary",class:[Zr.primary,"data-[hover=true]:bg-primary/20"]},{variant:"light",color:"secondary",class:[Zr.secondary,"data-[hover=true]:bg-secondary/20"]},{variant:"light",color:"success",class:[Zr.success,"data-[hover=true]:bg-success/20"]},{variant:"light",color:"warning",class:[Zr.warning,"data-[hover=true]:bg-warning/20"]},{variant:"light",color:"danger",class:[Zr.danger,"data-[hover=true]:bg-danger/20"]},{variant:"ghost",color:"default",class:Jr.default},{variant:"ghost",color:"primary",class:Jr.primary},{variant:"ghost",color:"secondary",class:Jr.secondary},{variant:"ghost",color:"success",class:Jr.success},{variant:"ghost",color:"warning",class:Jr.warning},{variant:"ghost",color:"danger",class:Jr.danger},{isInGroup:!0,class:"rounded-none first:rounded-s-medium last:rounded-e-medium"},{isInGroup:!0,size:"sm",class:"rounded-none first:rounded-s-small last:rounded-e-small"},{isInGroup:!0,size:"md",class:"rounded-none first:rounded-s-medium last:rounded-e-medium"},{isInGroup:!0,size:"lg",class:"rounded-none first:rounded-s-large last:rounded-e-large"},{isInGroup:!0,isRounded:!0,class:"rounded-none first:rounded-s-full last:rounded-e-full"},{isInGroup:!0,radius:"none",class:"rounded-none first:rounded-s-none last:rounded-e-none"},{isInGroup:!0,radius:"sm",class:"rounded-none first:rounded-s-small last:rounded-e-small"},{isInGroup:!0,radius:"md",class:"rounded-none first:rounded-s-medium last:rounded-e-medium"},{isInGroup:!0,radius:"lg",class:"rounded-none first:rounded-s-large last:rounded-e-large"},{isInGroup:!0,radius:"full",class:"rounded-none first:rounded-s-full last:rounded-e-full"},{isInGroup:!0,variant:["ghost","bordered"],color:"default",className:$r.default},{isInGroup:!0,variant:["ghost","bordered"],color:"primary",className:$r.primary},{isInGroup:!0,variant:["ghost","bordered"],color:"secondary",className:$r.secondary},{isInGroup:!0,variant:["ghost","bordered"],color:"success",className:$r.success},{isInGroup:!0,variant:["ghost","bordered"],color:"warning",className:$r.warning},{isInGroup:!0,variant:["ghost","bordered"],color:"danger",className:$r.danger},{isIconOnly:!0,size:"sm",class:"min-w-unit-8 w-unit-8 h-unit-8"},{isIconOnly:!0,size:"md",class:"min-w-unit-10 w-unit-10 h-unit-10"},{isIconOnly:!0,size:"lg",class:"min-w-unit-12 w-unit-12 h-unit-12"},{variant:["solid","faded","flat","bordered","shadow"],class:"data-[hover=true]:opacity-hover"}]});Wr({base:"inline-flex items-center justify-center h-auto",variants:{fullWidth:{true:"w-full"}},defaultVariants:{fullWidth:!1}});var un=e=>(null==e?void 0:e.length)<=4?e:null==e?void 0:e.slice(0,3),cn=(...e)=>{let t=" ";for(const r of e)if("string"==typeof r&&r.length>0){t=r;break}return t};function dn(e){var t,r,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(r=dn(e[t]))&&(n&&(n+=" "),n+=r);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function pn(...e){for(var t,r,n=0,s="";n<e.length;)(t=e[n++])&&(r=dn(t))&&(s&&(s+=" "),s+=r);return s}var hn={};function fn(e,t,...r){var n;const s=`[Next UI]${t?` [${t}]`:" "}: ${e}`;if("undefined"!=typeof console&&!hn[s])return hn[s]=!0,"production"!==(null==(n=null==process?void 0:process.env)?void 0:n.NODE_ENV)?console.warn(s,r):void 0}var mn="production"!==process.env.NODE_ENV;process.env.NODE_ENV;var gn=e=>e?"true":void 0;function vn(e={}){const{strict:t=!0,errorMessage:r="useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",name:n}=e,o=s.createContext(void 0);return o.displayName=n,[o.Provider,function e(){var n;const a=s.useContext(o);if(!a&&t){const t=new Error(r);throw t.name="ContextError",null==(n=Error.captureStackTrace)||n.call(Error,t,e),t}return a},o]}function yn(e){const r=t.useRef(null);return t.useImperativeHandle(e,(()=>r.current)),r}var bn=new Set(["id","type","style","title","role","tabIndex","htmlFor","width","height","abbr","accept","acceptCharset","accessKey","action","allowFullScreen","allowTransparency","alt","async","autoComplete","autoFocus","autoPlay","cellPadding","cellSpacing","challenge","charset","checked","cite","class","className","cols","colSpan","command","content","contentEditable","contextMenu","controls","coords","crossOrigin","data","dateTime","default","defer","dir","disabled","download","draggable","dropzone","encType","for","form","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","headers","hidden","high","href","hrefLang","httpEquiv","icon","inputMode","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","list","loop","manifest","max","maxLength","media","mediaGroup","method","min","minLength","multiple","muted","name","noValidate","open","optimum","pattern","ping","placeholder","poster","preload","radioGroup","referrerPolicy","readOnly","rel","required","rows","rowSpan","sandbox","scope","scoped","scrolling","seamless","selected","shape","size","sizes","slot","sortable","span","spellCheck","src","srcDoc","srcSet","start","step","target","translate","typeMustMatch","useMap","value","wmode","wrap"]),xn=new Set(["onCopy","onCut","onPaste","onLoad","onError","onWheel","onScroll","onCompositionEnd","onCompositionStart","onCompositionUpdate","onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onSubmit","onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onPointerDown","onPointerEnter","onPointerLeave","onPointerUp","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onAnimationStart","onAnimationEnd","onAnimationIteration","onTransitionEnd"]),wn=/^(data-.*)$/,Pn=/^(aria-.*)$/,Tn=/^(on[A-Z].*)$/;function Cn(e,t={}){let{labelable:r=!0,enabled:n=!0,propNames:s,omitPropNames:o,omitEventNames:a}=t,i={};if(!n)return e;for(const t in e)(null==o?void 0:o.has(t))||(null==a?void 0:a.has(t))&&Tn.test(t)||Tn.test(t)&&!xn.has(t)||(Object.prototype.hasOwnProperty.call(e,t)&&(bn.has(t)||r&&Pn.test(t)||(null==s?void 0:s.has(t))||wn.test(t))||Tn.test(t))&&(i[t]=e[t]);return i}function En(e){return O()||W()?e.altKey:e.ctrlKey}function Sn(e){return O()?e.metaKey:e.ctrlKey}const kn=1e3;function Mn(e){let{selectionManager:n,keyboardDelegate:s,ref:o,autoFocus:a=!1,shouldFocusWrap:i=!1,disallowEmptySelection:l=!1,disallowSelectAll:u=!1,selectOnFocus:c="replace"===n.selectionBehavior,disallowTypeAhead:d=!1,shouldUseVirtualFocus:p,allowsTabNavigation:h=!1,isVirtualized:f,scrollRef:m=o,linkBehavior:g="action"}=e,{direction:v}=ye(),y=$(),b=t.useRef({top:0,left:0});!function(e,r,n,s){let o=x(n),a=null==n;t.useEffect((()=>{if(a)return;let t=e.current;return t.addEventListener(r,o,s),()=>{t.removeEventListener(r,o,s);}}),[e,r,s,a,o]);}(m,"scroll",f?null:()=>{b.current={top:m.current.scrollTop,left:m.current.scrollLeft};});const w=t.useRef(a);t.useEffect((()=>{if(w.current){let e=null;"first"===a&&(e=s.getFirstKey()),"last"===a&&(e=s.getLastKey());let t=n.selectedKeys;t.size&&(e=t.values().next().value),n.setFocused(!0),n.setFocusedKey(e),null!=e||p||vt(o.current);}w.current=!1;}),[]);let P=t.useRef(n.focusedKey);t.useEffect((()=>{let e=st();if(n.isFocused&&null!=n.focusedKey&&(null==m?void 0:m.current)){let t=m.current.querySelector(`[data-key="${n.focusedKey}"]`);t&&"keyboard"===e&&(f||se(m.current,t),ae(t,{containingElement:o.current}));}n.isFocused&&null==n.focusedKey&&null!=P.current&&vt(o.current),P.current=n.focusedKey;}),[f,m,n.focusedKey,n.isFocused,o]);let T,C={onKeyDown:e=>{if(e.altKey&&"Tab"===e.key&&e.preventDefault(),!o.current.contains(e.target))return;const t=(t,s)=>{if(null!=t){if(n.isLink(t)&&"selection"===g&&c&&!En(e)){r.flushSync((()=>{n.setFocusedKey(t,s);}));let o=m.current.querySelector(`[data-key="${t}"]`);return void y.open(o,e)}if(n.setFocusedKey(t,s),n.isLink(t)&&"override"===g)return;e.shiftKey&&"multiple"===n.selectionMode?n.extendSelection(t):c&&!En(e)&&n.replaceSelection(t);}};switch(e.key){case"ArrowDown":if(s.getKeyBelow){var a,d;e.preventDefault();let r=null!=n.focusedKey?s.getKeyBelow(n.focusedKey):null===(a=s.getFirstKey)||void 0===a?void 0:a.call(s);null==r&&i&&(r=null===(d=s.getFirstKey)||void 0===d?void 0:d.call(s,n.focusedKey)),t(r);}break;case"ArrowUp":if(s.getKeyAbove){var p,f;e.preventDefault();let r=null!=n.focusedKey?s.getKeyAbove(n.focusedKey):null===(p=s.getLastKey)||void 0===p?void 0:p.call(s);null==r&&i&&(r=null===(f=s.getLastKey)||void 0===f?void 0:f.call(s,n.focusedKey)),t(r);}break;case"ArrowLeft":if(s.getKeyLeftOf){var b,x;e.preventDefault();let r=s.getKeyLeftOf(n.focusedKey);null==r&&i&&(r="rtl"===v?null===(b=s.getFirstKey)||void 0===b?void 0:b.call(s,n.focusedKey):null===(x=s.getLastKey)||void 0===x?void 0:x.call(s,n.focusedKey)),t(r,"rtl"===v?"first":"last");}break;case"ArrowRight":if(s.getKeyRightOf){var w,P;e.preventDefault();let r=s.getKeyRightOf(n.focusedKey);null==r&&i&&(r="rtl"===v?null===(w=s.getLastKey)||void 0===w?void 0:w.call(s,n.focusedKey):null===(P=s.getFirstKey)||void 0===P?void 0:P.call(s,n.focusedKey)),t(r,"rtl"===v?"last":"first");}break;case"Home":if(s.getFirstKey){e.preventDefault();let t=s.getFirstKey(n.focusedKey,Sn(e));n.setFocusedKey(t),Sn(e)&&e.shiftKey&&"multiple"===n.selectionMode?n.extendSelection(t):c&&n.replaceSelection(t);}break;case"End":if(s.getLastKey){e.preventDefault();let t=s.getLastKey(n.focusedKey,Sn(e));n.setFocusedKey(t),Sn(e)&&e.shiftKey&&"multiple"===n.selectionMode?n.extendSelection(t):c&&n.replaceSelection(t);}break;case"PageDown":if(s.getKeyPageBelow){e.preventDefault(),t(s.getKeyPageBelow(n.focusedKey));}break;case"PageUp":if(s.getKeyPageAbove){e.preventDefault(),t(s.getKeyPageAbove(n.focusedKey));}break;case"a":Sn(e)&&"multiple"===n.selectionMode&&!0!==u&&(e.preventDefault(),n.selectAll());break;case"Escape":e.preventDefault(),l||n.clearSelection();break;case"Tab":if(!h){if(e.shiftKey)o.current.focus();else {let e,t,r=Tt(o.current,{tabbable:!0});do{t=r.lastChild(),t&&(e=t);}while(t);e&&!e.contains(document.activeElement)&&R(e);}break}}},onFocus:e=>{if(n.isFocused)e.currentTarget.contains(e.target)||n.setFocused(!1);else if(e.currentTarget.contains(e.target)){if(n.setFocused(!0),null==n.focusedKey){let o=e=>{null!=e&&(n.setFocusedKey(e),c&&n.replaceSelection(e));},a=e.relatedTarget;var t,r;a&&e.currentTarget.compareDocumentPosition(a)&Node.DOCUMENT_POSITION_FOLLOWING?o(null!==(t=n.lastSelectedKey)&&void 0!==t?t:s.getLastKey()):o(null!==(r=n.firstSelectedKey)&&void 0!==r?r:s.getFirstKey());}else f||(m.current.scrollTop=b.current.top,m.current.scrollLeft=b.current.left);if(!f&&null!=n.focusedKey){let e=m.current.querySelector(`[data-key="${n.focusedKey}"]`);if(e){e.contains(document.activeElement)||R(e),"keyboard"===st()&&ae(e,{containingElement:o.current});}}}},onBlur:e=>{e.currentTarget.contains(e.relatedTarget)||n.setFocused(!1);},onMouseDown(e){m.current===e.target&&e.preventDefault();}},{typeSelectProps:E}=function(e){let{keyboardDelegate:r,selectionManager:n,onTypeSelect:s}=e,o=t.useRef({search:"",timeout:null}).current;return {typeSelectProps:{onKeyDownCapture:r.getKeyForSearch?e=>{let t=function(e){return 1!==e.length&&/^[A-Z]/i.test(e)?"":e}(e.key);if(!t||e.ctrlKey||e.metaKey||!e.currentTarget.contains(e.target))return;" "===t&&o.search.trim().length>0&&(e.preventDefault(),"continuePropagation"in e||e.stopPropagation()),o.search+=t;let a=r.getKeyForSearch(o.search,n.focusedKey);null==a&&(a=r.getKeyForSearch(o.search)),null!=a&&(n.setFocusedKey(a),s&&s(a)),clearTimeout(o.timeout),o.timeout=setTimeout((()=>{o.search="";}),kn);}:null}}}({keyboardDelegate:s,selectionManager:n});return d||(C=A(E,C)),p||(T=null==n.focusedKey?0:-1),{collectionProps:{...C,tabIndex:T}}}function An(){let e=window.event;return "Enter"===(null==e?void 0:e.key)}function Dn(){let e=window.event;return " "===(null==e?void 0:e.key)||"Space"===(null==e?void 0:e.code)}var In=t.createContext(null);In.displayName="PressResponderContext";var Vn,Ln=Object.defineProperty,Kn=(e,t,r)=>(((e,t,r)=>{t in e?Ln(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;})(e,"symbol"!=typeof t?t+"":t,r),r),Rn=(e,t,r)=>{if(!t.has(e))throw TypeError("Cannot "+r)},Nn=class{constructor(e,t,r){Kn(this,"type"),Kn(this,"pointerType"),Kn(this,"target"),Kn(this,"shiftKey"),Kn(this,"ctrlKey"),Kn(this,"metaKey"),Kn(this,"altKey"),((e,t,r)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,r);})(this,Vn,!0),this.type=e,this.pointerType=t,this.target=r.currentTarget,this.shiftKey=r.shiftKey,this.metaKey=r.metaKey,this.ctrlKey=r.ctrlKey,this.altKey=r.altKey;}continuePropagation(){var e,t,r;r=!1,Rn(e=this,t=Vn,"write to private field"),t.set(e,r);}get shouldStopPropagation(){return Rn(e=this,t=Vn,"read from private field"),r?r.call(e):t.get(e);var e,t,r;}};Vn=new WeakMap;var jn=e=>{var t;return null!=(t=null==e?void 0:e.ownerDocument)?t:document},Fn=e=>{var t,r;return null!=(r=null==(t=null==e?void 0:e.ownerDocument)?void 0:t.defaultView)?r:window},On="default",Bn="",Wn=new WeakMap;function zn(e){if(W()){if("default"===On){const t=jn(e);Bn=t.documentElement.style.webkitUserSelect,t.documentElement.style.webkitUserSelect="none";}On="disabled";}else (e instanceof HTMLElement||e instanceof SVGElement)&&(Wn.set(e,e.style.userSelect),e.style.userSelect="none");}function Un(e){if(W()){if("disabled"!==On)return;On="restoring",setTimeout((()=>{X((()=>{if("restoring"===On){const t=jn(e);"none"===t.documentElement.style.webkitUserSelect&&(t.documentElement.style.webkitUserSelect=Bn||""),Bn="",On="default";}}));}),300);}else if((e instanceof HTMLElement||e instanceof SVGElement)&&e&&Wn.has(e)){let t=Wn.get(e);"none"===e.style.userSelect&&t&&(e.style.userSelect=t),""===e.getAttribute("style")&&e.removeAttribute("style"),Wn.delete(e);}}var Hn=Symbol("linkClicked");function $n(e){let{onPress:r,onPressChange:n,onPressStart:s,onPressEnd:o,onPressUp:a,isDisabled:i,isPressed:l,preventFocusOnPress:u,shouldCancelOnPointerExit:c,allowTextSelectionOnPress:d,ref:p,...h}=function(e){let r=t.useContext(In);if(r){let{register:t,...n}=r;e=A(n,e),t();}return Q(r,e.ref),e}(e),[f,m]=t.useState(!1),g=t.useRef({isPressed:!1,ignoreEmulatedMouseEvents:!1,ignoreClickAfterPress:!1,didFirePressStart:!1,isTriggeringEvent:!1,activePointerId:null,target:null,isOverTarget:!1,pointerType:null}),{addGlobalListener:v,removeAllGlobalListeners:y}=Z(),b=x(((e,t)=>{let r=g.current;if(i||r.didFirePressStart)return;let o=!0;if(r.isTriggeringEvent=!0,s){let r=new Nn("pressstart",t,e);s(r),o=r.shouldStopPropagation;}return n&&n(!0),r.isTriggeringEvent=!1,r.didFirePressStart=!0,m(!0),o})),w=x(((e,t,s=!0)=>{let a=g.current;if(!a.didFirePressStart)return;a.ignoreClickAfterPress=!0,a.didFirePressStart=!1,a.isTriggeringEvent=!0;let l=!0;if(o){let r=new Nn("pressend",t,e);o(r),l=r.shouldStopPropagation;}if(n&&n(!1),m(!1),r&&s&&!i){let n=new Nn("press",t,e);r(n),l&&(l=n.shouldStopPropagation);}return a.isTriggeringEvent=!1,l})),P=x(((e,t)=>{let r=g.current;if(!i){if(a){r.isTriggeringEvent=!0;let n=new Nn("pressup",t,e);return a(n),r.isTriggeringEvent=!1,n.shouldStopPropagation}return !0}})),T=x((e=>{let t=g.current;t.isPressed&&(t.isOverTarget&&t.target&&w(Yn(t.target,e),t.pointerType,!1),t.isPressed=!1,t.isOverTarget=!1,t.activePointerId=null,t.pointerType=null,y(),!d&&t.target&&Un(t.target));})),C=x((e=>{c&&T(e);})),E=t.useMemo((()=>{let e=g.current,t={onKeyDown(t){var n;if(Gn(t.nativeEvent,t.currentTarget)&&t.currentTarget.contains(t.target)){Jn(t.target,t.key)&&t.preventDefault();let s=!0;e.isPressed||t.repeat||(e.target=t.currentTarget,e.isPressed=!0,s=b(t,"keyboard"),v(jn(t.currentTarget),"keyup",r,!1)),s&&t.stopPropagation(),t.metaKey&&O()&&(null==(n=e.metaKeyEvents)||n.set(t.key,t.nativeEvent));}else "Meta"===t.key&&(e.metaKeyEvents=new Map);},onKeyUp(t){e.target&&Gn(t.nativeEvent,t.currentTarget)&&!t.repeat&&t.currentTarget.contains(t.target)&&P(Yn(e.target,t),"keyboard");},onClick(t){if((!t||t.currentTarget.contains(t.target))&&t&&0===t.button&&!e.isTriggeringEvent&&!_.isOpening){let r=!0;if(i&&t.preventDefault(),!e.ignoreClickAfterPress&&!e.ignoreEmulatedMouseEvents&&!e.isPressed&&("virtual"===e.pointerType||ie(t.nativeEvent))){i||u||R(t.currentTarget);let e=b(t,"virtual"),n=P(t,"virtual"),s=w(t,"virtual");r=e&&n&&s;}e.ignoreEmulatedMouseEvents=!1,e.ignoreClickAfterPress=!1,r&&t.stopPropagation();}}},r=t=>{var r,n;if(e.isPressed&&e.target&&Gn(t,e.target)){Jn(t.target,t.key)&&t.preventDefault();let n=t.target,s=w(Yn(e.target,t),"keyboard",e.target.contains(n));y(),s&&t.stopPropagation(),"Enter"!==t.key&&_n(e.target)&&e.target.contains(n)&&!t[Hn]&&(t[Hn]=!0,_(e.target,t,!1)),e.isPressed=!1,null==(r=e.metaKeyEvents)||r.delete(t.key);}else if("Meta"===t.key&&(null==(n=e.metaKeyEvents)?void 0:n.size)){let t=e.metaKeyEvents;e.metaKeyEvents=null;for(let r of t.values())e.target&&e.target.dispatchEvent(new KeyboardEvent("keyup",r));}};if("undefined"!=typeof PointerEvent){t.onPointerDown=t=>{if(0!==t.button||!t.currentTarget.contains(t.target))return;if(le(t.nativeEvent))return void(e.pointerType="virtual");Zn(t.currentTarget)&&t.preventDefault(),e.pointerType=t.pointerType;let o=!0;e.isPressed||(e.isPressed=!0,e.isOverTarget=!0,e.activePointerId=t.pointerId,e.target=t.currentTarget,i||u||R(t.currentTarget),d||zn(e.target),o=b(t,e.pointerType),v(jn(t.currentTarget),"pointermove",r,!1),v(jn(t.currentTarget),"pointerup",n,!1),v(jn(t.currentTarget),"pointercancel",s,!1)),o&&t.stopPropagation();},t.onMouseDown=e=>{e.currentTarget.contains(e.target)&&0===e.button&&(Zn(e.currentTarget)&&e.preventDefault(),e.stopPropagation());},t.onPointerUp=t=>{t.currentTarget.contains(t.target)&&"virtual"!==e.pointerType&&0===t.button&&Xn(t,t.currentTarget)&&P(t,e.pointerType||t.pointerType);};let r=t=>{t.pointerId===e.activePointerId&&e.target&&(Xn(t,e.target)?e.isOverTarget||(e.isOverTarget=!0,b(Yn(e.target,t),e.pointerType)):e.isOverTarget&&(e.isOverTarget=!1,w(Yn(e.target,t),e.pointerType,!1),C(t)));},n=t=>{t.pointerId===e.activePointerId&&e.isPressed&&0===t.button&&e.target&&((Xn(t,e.target)||e.isOverTarget)&&w(Yn(e.target,t),e.pointerType),e.isPressed=!1,e.isOverTarget=!1,e.activePointerId=null,e.pointerType=null,y(),d||Un(e.target));},s=e=>{T(e);};t.onDragStart=e=>{e.currentTarget.contains(e.target)&&T(e);};}else {t.onMouseDown=t=>{if(0!==t.button||!t.currentTarget.contains(t.target))return;if(Zn(t.currentTarget)&&t.preventDefault(),e.ignoreEmulatedMouseEvents)return void t.stopPropagation();e.isPressed=!0,e.isOverTarget=!0,e.target=t.currentTarget,e.pointerType=ie(t.nativeEvent)?"virtual":"mouse",i||u||R(t.currentTarget),b(t,e.pointerType)&&t.stopPropagation(),v(jn(t.currentTarget),"mouseup",r,!1);},t.onMouseEnter=t=>{if(!t.currentTarget.contains(t.target))return;let r=!0;e.isPressed&&!e.ignoreEmulatedMouseEvents&&(e.isOverTarget=!0,r=b(t,e.pointerType)),r&&t.stopPropagation();},t.onMouseLeave=t=>{if(!t.currentTarget.contains(t.target))return;let r=!0;e.isPressed&&!e.ignoreEmulatedMouseEvents&&(e.isOverTarget=!1,r=w(t,e.pointerType,!1),C(t)),r&&t.stopPropagation();},t.onMouseUp=t=>{t.currentTarget.contains(t.target)&&(e.ignoreEmulatedMouseEvents||0!==t.button||P(t,e.pointerType||"mouse"));};let r=t=>{0===t.button&&(e.isPressed=!1,y(),e.ignoreEmulatedMouseEvents?e.ignoreEmulatedMouseEvents=!1:e.target&&(Xn(t,e.target)?w(Yn(e.target,t),e.pointerType):e.isOverTarget&&w(Yn(e.target,t),e.pointerType,!1),e.isOverTarget=!1));};t.onTouchStart=t=>{if(!t.currentTarget.contains(t.target))return;let r=function(e){const{targetTouches:t}=e;if(t.length>0)return t[0];return null}(t.nativeEvent);r&&(e.activePointerId=r.identifier,e.ignoreEmulatedMouseEvents=!0,e.isOverTarget=!0,e.isPressed=!0,e.target=t.currentTarget,e.pointerType="touch",i||u||R(t.currentTarget),d||zn(e.target),b(t,e.pointerType)&&t.stopPropagation(),v(Fn(t.currentTarget),"scroll",n,!0));},t.onTouchMove=t=>{if(!t.currentTarget.contains(t.target))return;if(!e.isPressed)return void t.stopPropagation();let r=qn(t.nativeEvent,e.activePointerId),n=!0;r&&Xn(r,t.currentTarget)?e.isOverTarget||(e.isOverTarget=!0,n=b(t,e.pointerType)):e.isOverTarget&&(e.isOverTarget=!1,n=w(t,e.pointerType,!1),C(t)),n&&t.stopPropagation();},t.onTouchEnd=t=>{if(!t.currentTarget.contains(t.target))return;if(!e.isPressed)return void t.stopPropagation();let r=qn(t.nativeEvent,e.activePointerId),n=!0;r&&Xn(r,t.currentTarget)?(P(t,e.pointerType),n=w(t,e.pointerType)):e.isOverTarget&&(n=w(t,e.pointerType,!1)),n&&t.stopPropagation(),e.isPressed=!1,e.activePointerId=null,e.isOverTarget=!1,e.ignoreEmulatedMouseEvents=!0,!d&&e.target&&Un(e.target),y();},t.onTouchCancel=t=>{t.currentTarget.contains(t.target)&&(t.stopPropagation(),e.isPressed&&T(t));};let n=t=>{e.isPressed&&t.target.contains(e.target)&&T({currentTarget:e.target,shiftKey:!1,ctrlKey:!1,metaKey:!1,altKey:!1});};t.onDragStart=e=>{e.currentTarget.contains(e.target)&&T(e);};}return t}),[v,i,u,y,d,T,C,w,b,P]);return t.useEffect((()=>()=>{!d&&g.current.target&&Un(g.current.target);}),[d]),{isPressed:l||f,pressProps:A(h,E)}}function _n(e){return "A"===e.tagName&&e.hasAttribute("href")}function Gn(e,t){const{key:r,code:n}=e,s=t,o=s.getAttribute("role");return !("Enter"!==r&&" "!==r&&"Spacebar"!==r&&"Space"!==n||s instanceof Fn(s).HTMLInputElement&&!es(s,r)||s instanceof Fn(s).HTMLTextAreaElement||s.isContentEditable||("link"===o||!o&&_n(s))&&"Enter"!==r)}function qn(e,t){const r=e.changedTouches;for(let e=0;e<r.length;e++){const n=r[e];if(n.identifier===t)return n}return null}function Yn(e,t){return {currentTarget:e,shiftKey:t.shiftKey,ctrlKey:t.ctrlKey,metaKey:t.metaKey,altKey:t.altKey}}function Xn(e,t){let r=t.getBoundingClientRect(),n=function(e){let t=e.width?e.width/2:e.radiusX||0,r=e.height?e.height/2:e.radiusY||0;return {top:e.clientY-r,right:e.clientX+t,bottom:e.clientY+r,left:e.clientX-t}}(e);return function(e,t){return !(e.left>t.right||t.left>e.right||e.top>t.bottom||t.top>e.bottom)}(r,n)}function Zn(e){return !(e instanceof HTMLElement&&e.hasAttribute("draggable"))}function Jn(e,t){return e instanceof HTMLInputElement?!es(e,t):e instanceof HTMLButtonElement?"submit"!==e.type&&"reset"!==e.type:!_n(e)}var Qn=new Set(["checkbox","radio","range","color","file","image","button","submit","reset"]);function es(e,t){return "checkbox"===e.type||"radio"===e.type?" "===t:Qn.has(e.type)}var ts=t=>e.jsx("svg",{"aria-hidden":"true",focusable:"false",height:"1em",role:"presentation",viewBox:"0 0 24 24",width:"1em",...t,children:e.jsx("path",{d:"M12 2a10 10 0 1010 10A10.016 10.016 0 0012 2zm3.36 12.3a.754.754 0 010 1.06.748.748 0 01-1.06 0l-2.3-2.3-2.3 2.3a.748.748 0 01-1.06 0 .754.754 0 010-1.06l2.3-2.3-2.3-2.3A.75.75 0 019.7 8.64l2.3 2.3 2.3-2.3a.75.75 0 011.06 1.06l-2.3 2.3z",fill:"currentColor"})});const rs=t.createContext({transformPagePoint:e=>e,isStatic:!1,reducedMotion:"never"}),ns=t.createContext({}),ss=t.createContext(null),os="undefined"!=typeof document,as=os?t.useLayoutEffect:t.useEffect,is=t.createContext({strict:!1});function ls(e){return "object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function us(e){return "string"==typeof e||Array.isArray(e)}function cs(e){return "object"==typeof e&&"function"==typeof e.start}const ds=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],ps=["initial",...ds];function hs(e){return cs(e.animate)||ps.some((t=>us(e[t])))}function fs(e){return Boolean(hs(e)||e.variants)}function ms$1(e){const{initial:r,animate:n}=function(e,t){if(hs(e)){const{initial:t,animate:r}=e;return {initial:!1===t||us(t)?t:void 0,animate:us(r)?r:void 0}}return !1!==e.inherit?t:{}}(e,t.useContext(ns));return t.useMemo((()=>({initial:r,animate:n})),[gs(r),gs(n)])}function gs(e){return Array.isArray(e)?e.join(" "):e}const vs={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},ys={};for(const e in vs)ys[e]={isEnabled:t=>vs[e].some((e=>!!t[e]))};const bs=t.createContext({}),xs=t.createContext({}),ws=Symbol.for("motionComponentSymbol");function Ps({preloadedFeatures:e,createVisualElement:r,useRender:n,useVisualState:o,Component:a}){e&&function(e){for(const t in e)ys[t]={...ys[t],...e[t]};}(e);const i=t.forwardRef((function(i,l){let u;const c={...t.useContext(rs),...i,layoutId:Ts(i)},{isStatic:d}=c,p=ms$1(i),h=o(i,d);if(!d&&os){p.visualElement=function(e,r,n,s){const{visualElement:o}=t.useContext(ns),a=t.useContext(is),i=t.useContext(ss),l=t.useContext(rs).reducedMotion,u=t.useRef();s=s||a.renderer,!u.current&&s&&(u.current=s(e,{visualState:r,parent:o,props:n,presenceContext:i,blockInitialAnimation:!!i&&!1===i.initial,reducedMotionConfig:l}));const c=u.current;t.useInsertionEffect((()=>{c&&c.update(n,i);}));const d=t.useRef(Boolean(window.HandoffAppearAnimations));return as((()=>{c&&(c.render(),d.current&&c.animationState&&c.animationState.animateChanges());})),t.useEffect((()=>{c&&(c.updateFeatures(),!d.current&&c.animationState&&c.animationState.animateChanges(),window.HandoffAppearAnimations=void 0,d.current=!1);})),c}(a,h,c,r);const n=t.useContext(xs),s=t.useContext(is).strict;p.visualElement&&(u=p.visualElement.loadFeatures(c,s,e,n));}return s.createElement(ns.Provider,{value:p},u&&p.visualElement?s.createElement(u,{visualElement:p.visualElement,...c}):null,n(a,i,function(e,r,n){return t.useCallback((t=>{t&&e.mount&&e.mount(t),r&&(t?r.mount(t):r.unmount()),n&&("function"==typeof n?n(t):ls(n)&&(n.current=t));}),[r])}(h,p.visualElement,l),h,d,p.visualElement))}));return i[ws]=a,i}function Ts({layoutId:e}){const r=t.useContext(bs).id;return r&&void 0!==e?r+"-"+e:e}function Cs(e){function t(t,r={}){return Ps(e(t,r))}if("undefined"==typeof Proxy)return t;const r=new Map;return new Proxy(t,{get:(e,n)=>(r.has(n)||r.set(n,t(n)),r.get(n))})}const Es=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function Ss(e){return "string"==typeof e&&!e.includes("-")&&!!(Es.indexOf(e)>-1||/[A-Z]/.test(e))}const ks={};const Ms=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],As=new Set(Ms);function Ds(e,{layout:t,layoutId:r}){return As.has(e)||e.startsWith("origin")||(t||void 0!==r)&&(!!ks[e]||"opacity"===e)}const Is=e=>Boolean(e&&e.getVelocity),Vs={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},Ls=Ms.length;const Ks=e=>t=>"string"==typeof t&&t.startsWith(e),Rs=Ks("--"),Ns=Ks("var(--"),js=(e,t)=>t&&"number"==typeof e?t.transform(e):e,Fs=(e,t,r)=>Math.min(Math.max(r,e),t),Os={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},Bs={...Os,transform:e=>Fs(0,1,e)},Ws={...Os,default:1},zs=e=>Math.round(1e5*e)/1e5,Us=/(-)?([\d]*\.?[\d])+/g,Hs=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,$s=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function _s(e){return "string"==typeof e}const Gs=e=>({test:t=>_s(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),qs=Gs("deg"),Ys=Gs("%"),Xs=Gs("px"),Zs=Gs("vh"),Js=Gs("vw"),Qs={...Ys,parse:e=>Ys.parse(e)/100,transform:e=>Ys.transform(100*e)},eo={...Os,transform:Math.round},to={borderWidth:Xs,borderTopWidth:Xs,borderRightWidth:Xs,borderBottomWidth:Xs,borderLeftWidth:Xs,borderRadius:Xs,radius:Xs,borderTopLeftRadius:Xs,borderTopRightRadius:Xs,borderBottomRightRadius:Xs,borderBottomLeftRadius:Xs,width:Xs,maxWidth:Xs,height:Xs,maxHeight:Xs,size:Xs,top:Xs,right:Xs,bottom:Xs,left:Xs,padding:Xs,paddingTop:Xs,paddingRight:Xs,paddingBottom:Xs,paddingLeft:Xs,margin:Xs,marginTop:Xs,marginRight:Xs,marginBottom:Xs,marginLeft:Xs,rotate:qs,rotateX:qs,rotateY:qs,rotateZ:qs,scale:Ws,scaleX:Ws,scaleY:Ws,scaleZ:Ws,skew:qs,skewX:qs,skewY:qs,distance:Xs,translateX:Xs,translateY:Xs,translateZ:Xs,x:Xs,y:Xs,z:Xs,perspective:Xs,transformPerspective:Xs,opacity:Bs,originX:Qs,originY:Qs,originZ:Xs,zIndex:eo,fillOpacity:Bs,strokeOpacity:Bs,numOctaves:eo};function ro(e,t,r,n){const{style:s,vars:o,transform:a,transformOrigin:i}=e;let l=!1,u=!1,c=!0;for(const e in t){const r=t[e];if(Rs(e)){o[e]=r;continue}const n=to[e],d=js(r,n);if(As.has(e)){if(l=!0,a[e]=d,!c)continue;r!==(n.default||0)&&(c=!1);}else e.startsWith("origin")?(u=!0,i[e]=d):s[e]=d;}if(t.transform||(l||n?s.transform=function(e,{enableHardwareAcceleration:t=!0,allowTransformNone:r=!0},n,s){let o="";for(let t=0;t<Ls;t++){const r=Ms[t];void 0!==e[r]&&(o+=`${Vs[r]||r}(${e[r]}) `);}return t&&!e.z&&(o+="translateZ(0)"),o=o.trim(),s?o=s(e,n?"":o):r&&n&&(o="none"),o}(e.transform,r,c,n):s.transform&&(s.transform="none")),u){const{originX:e="50%",originY:t="50%",originZ:r=0}=i;s.transformOrigin=`${e} ${t} ${r}`;}}const no=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function so(e,t,r){for(const n in t)Is(t[n])||Ds(n,r)||(e[n]=t[n]);}function oo(e,r,n){const s={};return so(s,e.style||{},e),Object.assign(s,function({transformTemplate:e},r,n){return t.useMemo((()=>{const t=no();return ro(t,r,{enableHardwareAcceleration:!n},e),Object.assign({},t.vars,t.style)}),[r])}(e,r,n)),e.transformValues?e.transformValues(s):s}function ao(e,t,r){const n={},s=oo(e,t,r);return e.drag&&!1!==e.dragListener&&(n.draggable=!1,s.userSelect=s.WebkitUserSelect=s.WebkitTouchCallout="none",s.touchAction=!0===e.drag?"none":"pan-"+("x"===e.drag?"y":"x")),void 0===e.tabIndex&&(e.onTap||e.onTapStart||e.whileTap)&&(n.tabIndex=0),n.style=s,n}const io=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function lo(e){return e.startsWith("while")||e.startsWith("drag")&&"draggable"!==e||e.startsWith("layout")||e.startsWith("onTap")||e.startsWith("onPan")||io.has(e)}let uo=e=>!lo(e);try{(co=require$$3$1.default)&&(uo=e=>e.startsWith("on")?!lo(e):co(e));}catch(e){}var co;function po(e,t,r){return "string"==typeof e?e:Xs.transform(t+r*e)}const ho={offset:"stroke-dashoffset",array:"stroke-dasharray"},fo={offset:"strokeDashoffset",array:"strokeDasharray"};function mo(e,{attrX:t,attrY:r,attrScale:n,originX:s,originY:o,pathLength:a,pathSpacing:i=1,pathOffset:l=0,...u},c,d,p){if(ro(e,u,c,p),d)return void(e.style.viewBox&&(e.attrs.viewBox=e.style.viewBox));e.attrs=e.style,e.style={};const{attrs:h,style:f,dimensions:m}=e;h.transform&&(m&&(f.transform=h.transform),delete h.transform),m&&(void 0!==s||void 0!==o||f.transform)&&(f.transformOrigin=function(e,t,r){return `${po(t,e.x,e.width)} ${po(r,e.y,e.height)}`}(m,void 0!==s?s:.5,void 0!==o?o:.5)),void 0!==t&&(h.x=t),void 0!==r&&(h.y=r),void 0!==n&&(h.scale=n),void 0!==a&&function(e,t,r=1,n=0,s=!0){e.pathLength=1;const o=s?ho:fo;e[o.offset]=Xs.transform(-n);const a=Xs.transform(t),i=Xs.transform(r);e[o.array]=`${a} ${i}`;}(h,a,i,l,!1);}const go=()=>({...no(),attrs:{}}),vo=e=>"string"==typeof e&&"svg"===e.toLowerCase();function yo(e,r,n,s){const o=t.useMemo((()=>{const t=go();return mo(t,r,{enableHardwareAcceleration:!1},vo(s),e.transformTemplate),{...t.attrs,style:{...t.style}}}),[r]);if(e.style){const t={};so(t,e.style,e),o.style={...t,...o.style};}return o}function bo(e=!1){return (r,n,s,{latestValues:o},a)=>{const i=(Ss(r)?yo:ao)(n,o,a,r),l=function(e,t,r){const n={};for(const s in e)"values"===s&&"object"==typeof e.values||(uo(s)||!0===r&&lo(s)||!t&&!lo(s)||e.draggable&&s.startsWith("onDrag"))&&(n[s]=e[s]);return n}(n,"string"==typeof r,e),u={...l,...i,ref:s},{children:c}=n,d=t.useMemo((()=>Is(c)?c.get():c),[c]);return t.createElement(r,{...u,children:d})}}const xo=e=>e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();function wo(e,{style:t,vars:r},n,s){Object.assign(e.style,t,s&&s.getProjectionStyles(n));for(const t in r)e.style.setProperty(t,r[t]);}const Po=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function To(e,t,r,n){wo(e,t,void 0,n);for(const r in t.attrs)e.setAttribute(Po.has(r)?r:xo(r),t.attrs[r]);}function Co(e,t){const{style:r}=e,n={};for(const s in r)(Is(r[s])||t.style&&Is(t.style[s])||Ds(s,e))&&(n[s]=r[s]);return n}function Eo(e,t){const r=Co(e,t);for(const n in e)if(Is(e[n])||Is(t[n])){r[-1!==Ms.indexOf(n)?"attr"+n.charAt(0).toUpperCase()+n.substring(1):n]=e[n];}return r}function So(e,t,r,n={},s={}){return "function"==typeof t&&(t=t(void 0!==r?r:e.custom,n,s)),"string"==typeof t&&(t=e.variants&&e.variants[t]),"function"==typeof t&&(t=t(void 0!==r?r:e.custom,n,s)),t}function ko(e){const r=t.useRef(null);return null===r.current&&(r.current=e()),r.current}const Mo=e=>Array.isArray(e),Ao=e=>Boolean(e&&"object"==typeof e&&e.mix&&e.toValue),Do=e=>Mo(e)?e[e.length-1]||0:e;function Io(e){const t=Is(e)?e.get():e;return Ao(t)?t.toValue():t}const Vo=e=>(r,n)=>{const s=t.useContext(ns),o=t.useContext(ss),a=()=>function({scrapeMotionValuesFromProps:e,createRenderState:t,onMount:r},n,s,o){const a={latestValues:Lo(n,s,o,e),renderState:t()};return r&&(a.mount=e=>r(n,e,a)),a}(e,r,s,o);return n?a():ko(a)};function Lo(e,t,r,n){const s={},o=n(e,{});for(const e in o)s[e]=Io(o[e]);let{initial:a,animate:i}=e;const l=hs(e),u=fs(e);t&&u&&!l&&!1!==e.inherit&&(void 0===a&&(a=t.initial),void 0===i&&(i=t.animate));let c=!!r&&!1===r.initial;c=c||!1===a;const d=c?i:a;if(d&&"boolean"!=typeof d&&!cs(d)){(Array.isArray(d)?d:[d]).forEach((t=>{const r=So(e,t);if(!r)return;const{transitionEnd:n,transition:o,...a}=r;for(const e in a){let t=a[e];if(Array.isArray(t)){t=t[c?t.length-1:0];}null!==t&&(s[e]=t);}for(const e in n)s[e]=n[e];}));}return s}const Ko=e=>e;class Ro{constructor(){this.order=[],this.scheduled=new Set;}add(e){if(!this.scheduled.has(e))return this.scheduled.add(e),this.order.push(e),!0}remove(e){const t=this.order.indexOf(e);-1!==t&&(this.order.splice(t,1),this.scheduled.delete(e));}clear(){this.order.length=0,this.scheduled.clear();}}const No=["prepare","read","update","preRender","render","postRender"];const{schedule:jo,cancel:Fo,state:Oo,steps:Bo}=function(e,t){let r=!1,n=!0;const s={delta:0,timestamp:0,isProcessing:!1},o=No.reduce(((e,t)=>(e[t]=function(e){let t=new Ro,r=new Ro,n=0,s=!1,o=!1;const a=new WeakSet,i={schedule:(e,o=!1,i=!1)=>{const l=i&&s,u=l?t:r;return o&&a.add(e),u.add(e)&&l&&s&&(n=t.order.length),e},cancel:e=>{r.remove(e),a.delete(e);},process:l=>{if(s)o=!0;else {if(s=!0,[t,r]=[r,t],r.clear(),n=t.order.length,n)for(let r=0;r<n;r++){const n=t.order[r];n(l),a.has(n)&&(i.schedule(n),e());}s=!1,o&&(o=!1,i.process(l));}}};return i}((()=>r=!0)),e)),{}),a=e=>o[e].process(s),i=()=>{const o=performance.now();r=!1,s.delta=n?1e3/60:Math.max(Math.min(o-s.timestamp,40),1),s.timestamp=o,s.isProcessing=!0,No.forEach(a),s.isProcessing=!1,r&&t&&(n=!1,e(i));};return {schedule:No.reduce(((t,a)=>{const l=o[a];return t[a]=(t,o=!1,a=!1)=>(r||(r=!0,n=!0,s.isProcessing||e(i)),l.schedule(t,o,a)),t}),{}),cancel:e=>No.forEach((t=>o[t].cancel(e))),state:s,steps:o}}("undefined"!=typeof requestAnimationFrame?requestAnimationFrame:Ko,!0),Wo={useVisualState:Vo({scrapeMotionValuesFromProps:Eo,createRenderState:go,onMount:(e,t,{renderState:r,latestValues:n})=>{jo.read((()=>{try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect();}catch(e){r.dimensions={x:0,y:0,width:0,height:0};}})),jo.render((()=>{mo(r,n,{enableHardwareAcceleration:!1},vo(t.tagName),e.transformTemplate),To(t,r);}));}})},zo={useVisualState:Vo({scrapeMotionValuesFromProps:Co,createRenderState:no})};function Uo(e,t,r,n={passive:!0}){return e.addEventListener(t,r,n),()=>e.removeEventListener(t,r)}const Ho=e=>"mouse"===e.pointerType?"number"!=typeof e.button||e.button<=0:!1!==e.isPrimary;function $o(e,t="page"){return {point:{x:e[t+"X"],y:e[t+"Y"]}}}const _o=e=>t=>Ho(t)&&e(t,$o(t));function Go(e,t,r,n){return Uo(e,t,_o(r),n)}const qo=(e,t)=>r=>t(e(r)),Yo=(...e)=>e.reduce(qo);function Xo(e){let t=null;return ()=>{const r=()=>{t=null;};return null===t&&(t=e,r)}}const Zo=Xo("dragHorizontal"),Jo=Xo("dragVertical");function Qo(e){let t=!1;if("y"===e)t=Jo();else if("x"===e)t=Zo();else {const e=Zo(),r=Jo();e&&r?t=()=>{e(),r();}:(e&&e(),r&&r());}return t}function ea(){const e=Qo(!0);return !e||(e(),!1)}class ta{constructor(e){this.isMounted=!1,this.node=e;}update(){}}function ra(e,t){const r="pointer"+(t?"enter":"leave"),n="onHover"+(t?"Start":"End");return Go(e.current,r,((r,s)=>{if("touch"===r.type||ea())return;const o=e.getProps();e.animationState&&o.whileHover&&e.animationState.setActive("whileHover",t),o[n]&&jo.update((()=>o[n](r,s)));}),{passive:!e.getProps()[n]})}const na=(e,t)=>!!t&&(e===t||na(e,t.parentElement));function sa(e,t){if(!t)return;const r=new PointerEvent("pointer"+e);t(r,$o(r));}const oa=new WeakMap,aa=new WeakMap,ia=e=>{const t=oa.get(e.target);t&&t(e);},la=e=>{e.forEach(ia);};function ua(e,t,r){const n=function({root:e,...t}){const r=e||document;aa.has(r)||aa.set(r,{});const n=aa.get(r),s=JSON.stringify(t);return n[s]||(n[s]=new IntersectionObserver(la,{root:e,...t})),n[s]}(t);return oa.set(e,r),n.observe(e),()=>{oa.delete(e),n.unobserve(e);}}const ca={some:0,all:1};const da={inView:{Feature:class extends ta{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1;}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:t,margin:r,amount:n="some",once:s}=e,o={root:t?t.current:void 0,rootMargin:r,threshold:"number"==typeof n?n:ca[n]};return ua(this.node.current,o,(e=>{const{isIntersecting:t}=e;if(this.isInView===t)return;if(this.isInView=t,s&&!t&&this.hasEnteredView)return;t&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",t);const{onViewportEnter:r,onViewportLeave:n}=this.node.getProps(),o=t?r:n;o&&o(e);}))}mount(){this.startObserver();}update(){if("undefined"==typeof IntersectionObserver)return;const{props:e,prevProps:t}=this.node;["amount","margin","root"].some(function({viewport:e={}},{viewport:t={}}={}){return r=>e[r]!==t[r]}(e,t))&&this.startObserver();}unmount(){}}},tap:{Feature:class extends ta{constructor(){super(...arguments),this.removeStartListeners=Ko,this.removeEndListeners=Ko,this.removeAccessibleListeners=Ko,this.startPointerPress=(e,t)=>{if(this.removeEndListeners(),this.isPressing)return;const r=this.node.getProps(),n=Go(window,"pointerup",((e,t)=>{if(!this.checkPressEnd())return;const{onTap:r,onTapCancel:n}=this.node.getProps();jo.update((()=>{na(this.node.current,e.target)?r&&r(e,t):n&&n(e,t);}));}),{passive:!(r.onTap||r.onPointerUp)}),s=Go(window,"pointercancel",((e,t)=>this.cancelPress(e,t)),{passive:!(r.onTapCancel||r.onPointerCancel)});this.removeEndListeners=Yo(n,s),this.startPress(e,t);},this.startAccessiblePress=()=>{const e=Uo(this.node.current,"keydown",(e=>{if("Enter"!==e.key||this.isPressing)return;this.removeEndListeners(),this.removeEndListeners=Uo(this.node.current,"keyup",(e=>{"Enter"===e.key&&this.checkPressEnd()&&sa("up",((e,t)=>{const{onTap:r}=this.node.getProps();r&&jo.update((()=>r(e,t)));}));})),sa("down",((e,t)=>{this.startPress(e,t);}));})),t=Uo(this.node.current,"blur",(()=>{this.isPressing&&sa("cancel",((e,t)=>this.cancelPress(e,t)));}));this.removeAccessibleListeners=Yo(e,t);};}startPress(e,t){this.isPressing=!0;const{onTapStart:r,whileTap:n}=this.node.getProps();n&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),r&&jo.update((()=>r(e,t)));}checkPressEnd(){this.removeEndListeners(),this.isPressing=!1;return this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!ea()}cancelPress(e,t){if(!this.checkPressEnd())return;const{onTapCancel:r}=this.node.getProps();r&&jo.update((()=>r(e,t)));}mount(){const e=this.node.getProps(),t=Go(this.node.current,"pointerdown",this.startPointerPress,{passive:!(e.onTapStart||e.onPointerStart)}),r=Uo(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=Yo(t,r);}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners();}}},focus:{Feature:class extends ta{constructor(){super(...arguments),this.isActive=!1;}onFocus(){let e=!1;try{e=this.node.current.matches(":focus-visible");}catch(t){e=!0;}e&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0);}onBlur(){this.isActive&&this.node.animationState&&(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1);}mount(){this.unmount=Yo(Uo(this.node.current,"focus",(()=>this.onFocus())),Uo(this.node.current,"blur",(()=>this.onBlur())));}unmount(){}}},hover:{Feature:class extends ta{mount(){this.unmount=Yo(ra(this.node,!0),ra(this.node,!1));}unmount(){}}}};function pa(e,t){if(!Array.isArray(t))return !1;const r=t.length;if(r!==e.length)return !1;for(let n=0;n<r;n++)if(t[n]!==e[n])return !1;return !0}function ha(e,t,r){const n=e.getProps();return So(n,t,void 0!==r?r:n.custom,function(e){const t={};return e.values.forEach(((e,r)=>t[r]=e.get())),t}(e),function(e){const t={};return e.values.forEach(((e,r)=>t[r]=e.getVelocity())),t}(e))}const fa="data-"+xo("framerAppearId");let ma=Ko,ga=Ko;"production"!==process.env.NODE_ENV&&(ma=(e,t)=>{e||"undefined"==typeof console||console.warn(t);},ga=(e,t)=>{if(!e)throw new Error(t)});const va=e=>1e3*e,ya=e=>e/1e3,ba=!1,xa=e=>Array.isArray(e)&&"number"==typeof e[0];function wa(e){return Boolean(!e||"string"==typeof e&&Ta[e]||xa(e)||Array.isArray(e)&&e.every(wa))}const Pa=([e,t,r,n])=>`cubic-bezier(${e}, ${t}, ${r}, ${n})`,Ta={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:Pa([0,.65,.55,1]),circOut:Pa([.55,0,1,.45]),backIn:Pa([.31,.01,.66,-.59]),backOut:Pa([.33,1.53,.69,.99])};function Ca(e){if(e)return xa(e)?Pa(e):Array.isArray(e)?e.map(Ca):Ta[e]}const Ea=(e,t,r)=>(((1-3*r+3*t)*e+(3*r-6*t))*e+3*t)*e,Sa=1e-7,ka=12;function Ma(e,t,r,n){if(e===t&&r===n)return Ko;const s=t=>function(e,t,r,n,s){let o,a,i=0;do{a=t+(r-t)/2,o=Ea(a,n,s)-e,o>0?r=a:t=a;}while(Math.abs(o)>Sa&&++i<ka);return a}(t,0,1,e,r);return e=>0===e||1===e?e:Ea(s(e),t,n)}const Aa=Ma(.42,0,1,1),Da=Ma(0,0,.58,1),Ia=Ma(.42,0,.58,1),Va=e=>Array.isArray(e)&&"number"!=typeof e[0],La=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,Ka=e=>t=>1-e(1-t),Ra=e=>1-Math.sin(Math.acos(e)),Na=Ka(Ra),ja=La(Na),Fa=Ma(.33,1.53,.69,.99),Oa=Ka(Fa),Ba=La(Oa),Wa={linear:Ko,easeIn:Aa,easeInOut:Ia,easeOut:Da,circIn:Ra,circInOut:ja,circOut:Na,backIn:Oa,backInOut:Ba,backOut:Fa,anticipate:e=>(e*=2)<1?.5*Oa(e):.5*(2-Math.pow(2,-10*(e-1)))},za=e=>{if(Array.isArray(e)){ga(4===e.length,"Cubic bezier arrays must contain four numerical values.");const[t,r,n,s]=e;return Ma(t,r,n,s)}return "string"==typeof e?(ga(void 0!==Wa[e],`Invalid easing type '${e}'`),Wa[e]):e},Ua=(e,t)=>r=>Boolean(_s(r)&&$s.test(r)&&r.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(r,t)),Ha=(e,t,r)=>n=>{if(!_s(n))return n;const[s,o,a,i]=n.match(Us);return {[e]:parseFloat(s),[t]:parseFloat(o),[r]:parseFloat(a),alpha:void 0!==i?parseFloat(i):1}},$a={...Os,transform:e=>Math.round((e=>Fs(0,255,e))(e))},_a={test:Ua("rgb","red"),parse:Ha("red","green","blue"),transform:({red:e,green:t,blue:r,alpha:n=1})=>"rgba("+$a.transform(e)+", "+$a.transform(t)+", "+$a.transform(r)+", "+zs(Bs.transform(n))+")"};const Ga={test:Ua("#"),parse:function(e){let t="",r="",n="",s="";return e.length>5?(t=e.substring(1,3),r=e.substring(3,5),n=e.substring(5,7),s=e.substring(7,9)):(t=e.substring(1,2),r=e.substring(2,3),n=e.substring(3,4),s=e.substring(4,5),t+=t,r+=r,n+=n,s+=s),{red:parseInt(t,16),green:parseInt(r,16),blue:parseInt(n,16),alpha:s?parseInt(s,16)/255:1}},transform:_a.transform},qa={test:Ua("hsl","hue"),parse:Ha("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:r,alpha:n=1})=>"hsla("+Math.round(e)+", "+Ys.transform(zs(t))+", "+Ys.transform(zs(r))+", "+zs(Bs.transform(n))+")"},Ya={test:e=>_a.test(e)||Ga.test(e)||qa.test(e),parse:e=>_a.test(e)?_a.parse(e):qa.test(e)?qa.parse(e):Ga.parse(e),transform:e=>_s(e)?e:e.hasOwnProperty("red")?_a.transform(e):qa.transform(e)},Xa=(e,t,r)=>-r*e+r*t+e;function Za(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+(t-e)*(2/3-r)*6:e}const Ja=(e,t,r)=>{const n=e*e;return Math.sqrt(Math.max(0,r*(t*t-n)+n))},Qa=[Ga,_a,qa];function ei(e){const t=(r=e,Qa.find((e=>e.test(r))));var r;ga(Boolean(t),`'${e}' is not an animatable color. Use the equivalent color code instead.`);let n=t.parse(e);return t===qa&&(n=function({hue:e,saturation:t,lightness:r,alpha:n}){e/=360,r/=100;let s=0,o=0,a=0;if(t/=100){const n=r<.5?r*(1+t):r+t-r*t,i=2*r-n;s=Za(i,n,e+1/3),o=Za(i,n,e),a=Za(i,n,e-1/3);}else s=o=a=r;return {red:Math.round(255*s),green:Math.round(255*o),blue:Math.round(255*a),alpha:n}}(n)),n}const ti=(e,t)=>{const r=ei(e),n=ei(t),s={...r};return e=>(s.red=Ja(r.red,n.red,e),s.green=Ja(r.green,n.green,e),s.blue=Ja(r.blue,n.blue,e),s.alpha=Xa(r.alpha,n.alpha,e),_a.transform(s))};const ri={regex:/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,countKey:"Vars",token:"${v}",parse:Ko},ni={regex:Hs,countKey:"Colors",token:"${c}",parse:Ya.parse},si={regex:Us,countKey:"Numbers",token:"${n}",parse:Os.parse};function oi(e,{regex:t,countKey:r,token:n,parse:s}){const o=e.tokenised.match(t);o&&(e["num"+r]=o.length,e.tokenised=e.tokenised.replace(t,n),e.values.push(...o.map(s)));}function ai(e){const t=e.toString(),r={value:t,tokenised:t,values:[],numVars:0,numColors:0,numNumbers:0};return r.value.includes("var(--")&&oi(r,ri),oi(r,ni),oi(r,si),r}function ii(e){return ai(e).values}function li(e){const{values:t,numColors:r,numVars:n,tokenised:s}=ai(e),o=t.length;return e=>{let t=s;for(let s=0;s<o;s++)t=s<n?t.replace(ri.token,e[s]):s<n+r?t.replace(ni.token,Ya.transform(e[s])):t.replace(si.token,zs(e[s]));return t}}const ui=e=>"number"==typeof e?0:e;const ci={test:function(e){var t,r;return isNaN(e)&&_s(e)&&((null===(t=e.match(Us))||void 0===t?void 0:t.length)||0)+((null===(r=e.match(Hs))||void 0===r?void 0:r.length)||0)>0},parse:ii,createTransformer:li,getAnimatableNone:function(e){const t=ii(e);return li(e)(t.map(ui))}},di=(e,t)=>r=>`${r>0?t:e}`;function pi(e,t){return "number"==typeof e?r=>Xa(e,t,r):Ya.test(e)?ti(e,t):e.startsWith("var(")?di(e,t):mi(e,t)}const hi=(e,t)=>{const r=[...e],n=r.length,s=e.map(((e,r)=>pi(e,t[r])));return e=>{for(let t=0;t<n;t++)r[t]=s[t](e);return r}},fi=(e,t)=>{const r={...e,...t},n={};for(const s in r)void 0!==e[s]&&void 0!==t[s]&&(n[s]=pi(e[s],t[s]));return e=>{for(const t in n)r[t]=n[t](e);return r}},mi=(e,t)=>{const r=ci.createTransformer(t),n=ai(e),s=ai(t);return n.numVars===s.numVars&&n.numColors===s.numColors&&n.numNumbers>=s.numNumbers?Yo(hi(n.values,s.values),r):(ma(!0,`Complex values '${e}' and '${t}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),di(e,t))},gi=(e,t,r)=>{const n=t-e;return 0===n?1:(r-e)/n},vi=(e,t)=>r=>Xa(e,t,r);function yi(e,t,r){const n=[],s=r||("number"==typeof(o=e[0])?vi:"string"==typeof o?Ya.test(o)?ti:mi:Array.isArray(o)?hi:"object"==typeof o?fi:vi);var o;const a=e.length-1;for(let r=0;r<a;r++){let o=s(e[r],e[r+1]);if(t){const e=Array.isArray(t)?t[r]||Ko:t;o=Yo(e,o);}n.push(o);}return n}function bi(e,t,{clamp:r=!0,ease:n,mixer:s}={}){const o=e.length;if(ga(o===t.length,"Both input and output ranges must be the same length"),1===o)return ()=>t[0];e[0]>e[o-1]&&(e=[...e].reverse(),t=[...t].reverse());const a=yi(t,n,s),i=a.length,l=t=>{let r=0;if(i>1)for(;r<e.length-2&&!(t<e[r+1]);r++);const n=gi(e[r],e[r+1],t);return a[r](n)};return r?t=>l(Fs(e[0],e[o-1],t)):l}function xi(e){const t=[0];return function(e,t){const r=e[e.length-1];for(let n=1;n<=t;n++){const s=gi(0,t,n);e.push(Xa(r,1,s));}}(t,e.length-1),t}function wi({duration:e=300,keyframes:t,times:r,ease:n="easeInOut"}){const s=Va(n)?n.map(za):za(n),o={done:!1,value:t[0]},a=function(e,t){return e.map((e=>e*t))}(r&&r.length===t.length?r:xi(t),e),i=bi(a,t,{ease:Array.isArray(s)?s:(l=t,u=s,l.map((()=>u||Ia)).splice(0,l.length-1))});var l,u;return {calculatedDuration:e,next:t=>(o.value=i(t),o.done=t>=e,o)}}function Pi(e,t){return t?e*(1e3/t):0}const Ti=5;function Ci(e,t,r){const n=Math.max(t-Ti,0);return Pi(r-e(n),t-n)}const Ei=.001,Si=.01,ki=10,Mi=.05,Ai=1;function Di({duration:e=800,bounce:t=.25,velocity:r=0,mass:n=1}){let s,o;ma(e<=va(ki),"Spring duration must be 10 seconds or less");let a=1-t;a=Fs(Mi,Ai,a),e=Fs(Si,ki,ya(e)),a<1?(s=t=>{const n=t*a,s=n*e,o=n-r,i=Vi(t,a),l=Math.exp(-s);return Ei-o/i*l},o=t=>{const n=t*a*e,o=n*r+r,i=Math.pow(a,2)*Math.pow(t,2)*e,l=Math.exp(-n),u=Vi(Math.pow(t,2),a);return (-s(t)+Ei>0?-1:1)*((o-i)*l)/u}):(s=t=>Math.exp(-t*e)*((t-r)*e+1)-Ei,o=t=>Math.exp(-t*e)*(e*e*(r-t)));const i=function(e,t,r){let n=r;for(let r=1;r<Ii;r++)n-=e(n)/t(n);return n}(s,o,5/e);if(e=va(e),isNaN(i))return {stiffness:100,damping:10,duration:e};{const t=Math.pow(i,2)*n;return {stiffness:t,damping:2*a*Math.sqrt(n*t),duration:e}}}const Ii=12;function Vi(e,t){return e*Math.sqrt(1-t*t)}const Li=["duration","bounce"],Ki=["stiffness","damping","mass"];function Ri(e,t){return t.some((t=>void 0!==e[t]))}function Ni({keyframes:e,restDelta:t,restSpeed:r,...n}){const s=e[0],o=e[e.length-1],a={done:!1,value:s},{stiffness:i,damping:l,mass:u,velocity:c,duration:d,isResolvedFromDuration:p}=function(e){let t={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...e};if(!Ri(e,Ki)&&Ri(e,Li)){const r=Di(e);t={...t,...r,velocity:0,mass:1},t.isResolvedFromDuration=!0;}return t}(n),h=c?-ya(c):0,f=l/(2*Math.sqrt(i*u)),m=o-s,g=ya(Math.sqrt(i/u)),v=Math.abs(m)<5;let y;if(r||(r=v?.01:2),t||(t=v?.005:.5),f<1){const e=Vi(g,f);y=t=>{const r=Math.exp(-f*g*t);return o-r*((h+f*g*m)/e*Math.sin(e*t)+m*Math.cos(e*t))};}else if(1===f)y=e=>o-Math.exp(-g*e)*(m+(h+g*m)*e);else {const e=g*Math.sqrt(f*f-1);y=t=>{const r=Math.exp(-f*g*t),n=Math.min(e*t,300);return o-r*((h+f*g*m)*Math.sinh(n)+e*m*Math.cosh(n))/e};}return {calculatedDuration:p&&d||null,next:e=>{const n=y(e);if(p)a.done=e>=d;else {let s=h;0!==e&&(s=f<1?Ci(y,e,n):0);const i=Math.abs(s)<=r,l=Math.abs(o-n)<=t;a.done=i&&l;}return a.value=a.done?o:n,a}}}function ji({keyframes:e,velocity:t=0,power:r=.8,timeConstant:n=325,bounceDamping:s=10,bounceStiffness:o=500,modifyTarget:a,min:i,max:l,restDelta:u=.5,restSpeed:c}){const d=e[0],p={done:!1,value:d},h=e=>void 0===i?l:void 0===l||Math.abs(i-e)<Math.abs(l-e)?i:l;let f=r*t;const m=d+f,g=void 0===a?m:a(m);g!==m&&(f=g-d);const v=e=>-f*Math.exp(-e/n),y=e=>g+v(e),b=e=>{const t=v(e),r=y(e);p.done=Math.abs(t)<=u,p.value=p.done?g:r;};let x,w;const P=e=>{var t;(t=p.value,void 0!==i&&t<i||void 0!==l&&t>l)&&(x=e,w=Ni({keyframes:[p.value,h(p.value)],velocity:Ci(y,e,p.value),damping:s,stiffness:o,restDelta:u,restSpeed:c}));};return P(0),{calculatedDuration:null,next:e=>{let t=!1;return w||void 0!==x||(t=!0,b(e),P(e)),void 0!==x&&e>x?w.next(e-x):(!t&&b(e),p)}}}const Fi=e=>{const t=({timestamp:t})=>e(t);return {start:()=>jo.update(t,!0),stop:()=>Fo(t),now:()=>Oo.isProcessing?Oo.timestamp:performance.now()}},Oi=2e4;function Bi(e){let t=0;let r=e.next(t);for(;!r.done&&t<Oi;)t+=50,r=e.next(t);return t>=Oi?1/0:t}const Wi={decay:ji,inertia:ji,tween:wi,keyframes:wi,spring:Ni};function zi({autoplay:e=!0,delay:t=0,driver:r=Fi,keyframes:n,type:s="keyframes",repeat:o=0,repeatDelay:a=0,repeatType:i="loop",onPlay:l,onStop:u,onComplete:c,onUpdate:d,...p}){let h,f,m=1,g=!1;const v=()=>{f=new Promise((e=>{h=e;}));};let y;v();const b=Wi[s]||wi;let x;b!==wi&&"number"!=typeof n[0]&&(x=bi([0,100],n,{clamp:!1}),n=[0,100]);const w=b({...p,keyframes:n});let P;"mirror"===i&&(P=b({...p,keyframes:[...n].reverse(),velocity:-(p.velocity||0)}));let T="idle",C=null,E=null,S=null;null===w.calculatedDuration&&o&&(w.calculatedDuration=Bi(w));const{calculatedDuration:k}=w;let M=1/0,A=1/0;null!==k&&(M=k+a,A=M*(o+1)-a);let D=0;const I=e=>{if(null===E)return;m>0&&(E=Math.min(E,e)),m<0&&(E=Math.min(e-A/m,E)),D=null!==C?C:Math.round(e-E)*m;const r=D-t*(m>=0?1:-1),s=m>=0?r<0:r>A;D=Math.max(r,0),"finished"===T&&null===C&&(D=A);let l=D,u=w;if(o){const e=D/M;let t=Math.floor(e),r=e%1;!r&&e>=1&&(r=1),1===r&&t--,t=Math.min(t,o+1);const n=Boolean(t%2);n&&("reverse"===i?(r=1-r,a&&(r-=a/M)):"mirror"===i&&(u=P));let s=Fs(0,1,r);D>A&&(s="reverse"===i&&n?1:0),l=s*M;}const c=s?{done:!1,value:n[0]}:u.next(l);x&&(c.value=x(c.value));let{done:p}=c;s||null===k||(p=m>=0?D>=A:D<=0);const h=null===C&&("finished"===T||"running"===T&&p);return d&&d(c.value),h&&K(),c},V=()=>{y&&y.stop(),y=void 0;},L=()=>{T="idle",V(),h(),v(),E=S=null;},K=()=>{T="finished",c&&c(),V(),h();},R=()=>{if(g)return;y||(y=r(I));const e=y.now();l&&l(),null!==C?E=e-C:E&&"finished"!==T||(E=e),"finished"===T&&v(),S=E,C=null,T="running",y.start();};e&&R();const N={then:(e,t)=>f.then(e,t),get time(){return ya(D)},set time(e){e=va(e),D=e,null===C&&y&&0!==m?E=y.now()-e/m:C=e;},get duration(){const e=null===w.calculatedDuration?Bi(w):w.calculatedDuration;return ya(e)},get speed(){return m},set speed(e){e!==m&&y&&(m=e,N.time=ya(D));},get state(){return T},play:R,pause:()=>{T="paused",C=D;},stop:()=>{g=!0,"idle"!==T&&(T="idle",u&&u(),L());},cancel:()=>{null!==S&&I(S),L();},complete:()=>{T="finished";},sample:e=>(E=0,I(e))};return N}const Ui=function(e){let t;return ()=>(void 0===t&&(t=e()),t)}((()=>Object.hasOwnProperty.call(Element.prototype,"animate"))),Hi=new Set(["opacity","clipPath","filter","transform","backgroundColor"]);function $i(e,t,{onUpdate:r,onComplete:n,...s}){if(!(Ui()&&Hi.has(t)&&!s.repeatDelay&&"mirror"!==s.repeatType&&0!==s.damping&&"inertia"!==s.type))return !1;let o,a,i=!1;const l=()=>{a=new Promise((e=>{o=e;}));};l();let{keyframes:u,duration:c=300,ease:d,times:p}=s;if(((e,t)=>"spring"===t.type||"backgroundColor"===e||!wa(t.ease))(t,s)){const e=zi({...s,repeat:0,delay:0});let t={done:!1,value:u[0]};const r=[];let n=0;for(;!t.done&&n<2e4;)t=e.sample(n),r.push(t.value),n+=10;p=void 0,u=r,c=n-10,d="linear";}const h=function(e,t,r,{delay:n=0,duration:s,repeat:o=0,repeatType:a="loop",ease:i,times:l}={}){const u={[t]:r};l&&(u.offset=l);const c=Ca(i);return Array.isArray(c)&&(u.easing=c),e.animate(u,{delay:n,duration:s,easing:Array.isArray(c)?"linear":c,fill:"both",iterations:o+1,direction:"reverse"===a?"alternate":"normal"})}(e.owner.current,t,u,{...s,duration:c,ease:d,times:p});s.syncStart&&(h.startTime=Oo.isProcessing?Oo.timestamp:document.timeline?document.timeline.currentTime:performance.now());const f=()=>h.cancel(),m=()=>{jo.update(f),o(),l();};h.onfinish=()=>{e.set(function(e,{repeat:t,repeatType:r="loop"}){return e[t&&"loop"!==r&&t%2==1?0:e.length-1]}(u,s)),n&&n(),m();};return {then:(e,t)=>a.then(e,t),attachTimeline:e=>(h.timeline=e,h.onfinish=null,Ko),get time(){return ya(h.currentTime||0)},set time(e){h.currentTime=va(e);},get speed(){return h.playbackRate},set speed(e){h.playbackRate=e;},get duration(){return ya(c)},play:()=>{i||(h.play(),Fo(f));},pause:()=>h.pause(),stop:()=>{if(i=!0,"idle"===h.playState)return;const{currentTime:t}=h;if(t){const r=zi({...s,autoplay:!1});e.setWithVelocity(r.sample(t-10).value,r.sample(t).value,10);}m();},complete:()=>h.finish(),cancel:m}}const _i={type:"spring",stiffness:500,damping:25,restSpeed:10},Gi={type:"keyframes",duration:.8},qi={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},Yi=(e,{keyframes:t})=>t.length>2?Gi:As.has(e)?e.startsWith("scale")?{type:"spring",stiffness:550,damping:0===t[1]?2*Math.sqrt(550):30,restSpeed:10}:_i:qi,Xi=(e,t)=>"zIndex"!==e&&(!("number"!=typeof t&&!Array.isArray(t))||!("string"!=typeof t||!ci.test(t)&&"0"!==t||t.startsWith("url("))),Zi=new Set(["brightness","contrast","saturate","opacity"]);function Ji(e){const[t,r]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[n]=r.match(Us)||[];if(!n)return e;const s=r.replace(n,"");let o=Zi.has(t)?1:0;return n!==r&&(o*=100),t+"("+o+s+")"}const Qi=/([a-z-]*)\(.*?\)/g,el={...ci,getAnimatableNone:e=>{const t=e.match(Qi);return t?t.map(Ji).join(" "):e}},tl={...to,color:Ya,backgroundColor:Ya,outlineColor:Ya,fill:Ya,stroke:Ya,borderColor:Ya,borderTopColor:Ya,borderRightColor:Ya,borderBottomColor:Ya,borderLeftColor:Ya,filter:el,WebkitFilter:el},rl=e=>tl[e];function nl(e,t){let r=rl(e);return r!==el&&(r=ci),r.getAnimatableNone?r.getAnimatableNone(t):void 0}const sl=e=>/^0[^.\s]+$/.test(e);function ol(e){return "number"==typeof e?0===e:null!==e?"none"===e||"0"===e||sl(e):void 0}function al(e,t){return e[t]||e.default||e}const il=(e,t,r,n={})=>s=>{const o=al(n,e)||{},a=o.delay||n.delay||0;let{elapsed:i=0}=n;i-=va(a);const l=function(e,t,r,n){const s=Xi(t,r);let o;o=Array.isArray(r)?[...r]:[null,r];const a=void 0!==n.from?n.from:e.get();let i;const l=[];for(let e=0;e<o.length;e++)null===o[e]&&(o[e]=0===e?a:o[e-1]),ol(o[e])&&l.push(e),"string"==typeof o[e]&&"none"!==o[e]&&"0"!==o[e]&&(i=o[e]);if(s&&l.length&&i)for(let e=0;e<l.length;e++)o[l[e]]=nl(t,i);return o}(t,e,r,o),u=l[0],c=l[l.length-1],d=Xi(e,u),p=Xi(e,c);ma(d===p,`You are trying to animate ${e} from "${u}" to "${c}". ${u} is not an animatable value - to enable this animation set ${u} to a value animatable to ${c} via the \`style\` property.`);let h={keyframes:l,velocity:t.getVelocity(),ease:"easeOut",...o,delay:-i,onUpdate:e=>{t.set(e),o.onUpdate&&o.onUpdate(e);},onComplete:()=>{s(),o.onComplete&&o.onComplete();}};if(function({when:e,delay:t,delayChildren:r,staggerChildren:n,staggerDirection:s,repeat:o,repeatType:a,repeatDelay:i,from:l,elapsed:u,...c}){return !!Object.keys(c).length}(o)||(h={...h,...Yi(e,h)}),h.duration&&(h.duration=va(h.duration)),h.repeatDelay&&(h.repeatDelay=va(h.repeatDelay)),!d||!p||ba||!1===o.type)return function({keyframes:e,delay:t,onUpdate:r,onComplete:n}){const s=()=>(r&&r(e[e.length-1]),n&&n(),{time:0,speed:1,duration:0,play:Ko,pause:Ko,stop:Ko,then:e=>(e(),Promise.resolve()),cancel:Ko,complete:Ko});return t?zi({keyframes:[0,1],duration:0,delay:t,onComplete:s}):s()}(h);if(t.owner&&t.owner.current instanceof HTMLElement&&!t.owner.getProps().onUpdate){const r=$i(t,e,h);if(r)return r}return zi(h)};function ll(e){return Boolean(Is(e)&&e.add)}const ul=e=>/^\-?\d*\.?\d+$/.test(e);function cl(e,t){-1===e.indexOf(t)&&e.push(t);}function dl(e,t){const r=e.indexOf(t);r>-1&&e.splice(r,1);}class pl{constructor(){this.subscriptions=[];}add(e){return cl(this.subscriptions,e),()=>dl(this.subscriptions,e)}notify(e,t,r){const n=this.subscriptions.length;if(n)if(1===n)this.subscriptions[0](e,t,r);else for(let s=0;s<n;s++){const n=this.subscriptions[s];n&&n(e,t,r);}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0;}}const hl=new Set;function fl(e,t,r){e||hl.has(t)||(console.warn(t),r&&console.warn(r),hl.add(t));}class ml{constructor(e,t={}){var r;this.version="10.16.5",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(e,t=!0)=>{this.prev=this.current,this.current=e;const{delta:r,timestamp:n}=Oo;this.lastUpdated!==n&&(this.timeDelta=r,this.lastUpdated=n,jo.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),t&&this.events.renderRequest&&this.events.renderRequest.notify(this.current);},this.scheduleVelocityCheck=()=>jo.postRender(this.velocityCheck),this.velocityCheck=({timestamp:e})=>{e!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()));},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(r=this.current,!isNaN(parseFloat(r))),this.owner=t.owner;}onChange(e){return "production"!==process.env.NODE_ENV&&fl(!1,'value.onChange(callback) is deprecated. Switch to value.on("change", callback).'),this.on("change",e)}on(e,t){this.events[e]||(this.events[e]=new pl);const r=this.events[e].add(t);return "change"===e?()=>{r(),jo.read((()=>{this.events.change.getSize()||this.stop();}));}:r}clearListeners(){for(const e in this.events)this.events[e].clear();}attach(e,t){this.passiveEffect=e,this.stopPassiveEffect=t;}set(e,t=!0){t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t);}setWithVelocity(e,t,r){this.set(t),this.prev=e,this.timeDelta=r;}jump(e){this.updateAndNotify(e),this.prev=e,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect();}get(){return this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?Pi(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(e){return this.stop(),new Promise((t=>{this.hasAnimated=!0,this.animation=e(t),this.events.animationStart&&this.events.animationStart.notify();})).then((()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation();}))}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation();}isAnimating(){return !!this.animation}clearAnimation(){delete this.animation;}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect();}}function gl(e,t){return new ml(e,t)}const vl=e=>t=>t.test(e),yl=[Os,Xs,Ys,qs,Js,Zs,{test:e=>"auto"===e,parse:e=>e}],bl=e=>yl.find(vl(e)),xl=[...yl,Ya,ci];function wl(e,t,r){e.hasValue(t)?e.getValue(t).set(r):e.addValue(t,gl(r));}function Pl(e,t){if(!t)return;return (t[e]||t.default||t).from}function Tl({protectedKeys:e,needsAnimating:t},r){const n=e.hasOwnProperty(r)&&!0!==t[r];return t[r]=!1,n}function Cl(e,t,{delay:r=0,transitionOverride:n,type:s}={}){let{transition:o=e.getDefaultTransition(),transitionEnd:a,...i}=e.makeTargetAnimatable(t);const l=e.getValue("willChange");n&&(o=n);const u=[],c=s&&e.animationState&&e.animationState.getState()[s];for(const t in i){const n=e.getValue(t),s=i[t];if(!n||void 0===s||c&&Tl(c,t))continue;const a={delay:r,elapsed:0,...o};if(window.HandoffAppearAnimations&&!n.hasAnimated){const r=e.getProps()[fa];r&&(a.elapsed=window.HandoffAppearAnimations(r,t,n,jo),a.syncStart=!0);}n.start(il(t,n,s,e.shouldReduceMotion&&As.has(t)?{type:!1}:a));const d=n.animation;ll(l)&&(l.add(t),d.then((()=>l.remove(t)))),u.push(d);}return a&&Promise.all(u).then((()=>{a&&function(e,t){const r=ha(e,t);let{transitionEnd:n={},transition:s={},...o}=r?e.makeTargetAnimatable(r,!1):{};o={...o,...n};for(const t in o)wl(e,t,Do(o[t]));}(e,a);})),u}function El(e,t,r={}){const n=ha(e,t,r.custom);let{transition:s=e.getDefaultTransition()||{}}=n||{};r.transitionOverride&&(s=r.transitionOverride);const o=n?()=>Promise.all(Cl(e,n,r)):()=>Promise.resolve(),a=e.variantChildren&&e.variantChildren.size?(n=0)=>{const{delayChildren:o=0,staggerChildren:a,staggerDirection:i}=s;return function(e,t,r=0,n=0,s=1,o){const a=[],i=(e.variantChildren.size-1)*n,l=1===s?(e=0)=>e*n:(e=0)=>i-e*n;return Array.from(e.variantChildren).sort(Sl).forEach(((e,n)=>{e.notify("AnimationStart",t),a.push(El(e,t,{...o,delay:r+l(n)}).then((()=>e.notify("AnimationComplete",t))));})),Promise.all(a)}(e,t,o+n,a,i,r)}:()=>Promise.resolve(),{when:i}=s;if(i){const[e,t]="beforeChildren"===i?[o,a]:[a,o];return e().then((()=>t()))}return Promise.all([o(),a(r.delay)])}function Sl(e,t){return e.sortNodePosition(t)}const kl=[...ds].reverse(),Ml=ds.length;function Al(e){return t=>Promise.all(t.map((({animation:t,options:r})=>function(e,t,r={}){let n;if(e.notify("AnimationStart",t),Array.isArray(t)){const s=t.map((t=>El(e,t,r)));n=Promise.all(s);}else if("string"==typeof t)n=El(e,t,r);else {const s="function"==typeof t?ha(e,t,r.custom):t;n=Promise.all(Cl(e,s,r));}return n.then((()=>e.notify("AnimationComplete",t)))}(e,t,r))))}function Dl(e){let t=Al(e);const r={animate:Vl(!0),whileInView:Vl(),whileHover:Vl(),whileTap:Vl(),whileDrag:Vl(),whileFocus:Vl(),exit:Vl()};let n=!0;const s=(t,r)=>{const n=ha(e,r);if(n){const{transition:e,transitionEnd:r,...s}=n;t={...t,...s,...r};}return t};function o(o,a){const i=e.getProps(),l=e.getVariantContext(!0)||{},u=[],c=new Set;let d={},p=1/0;for(let t=0;t<Ml;t++){const h=kl[t],f=r[h],m=void 0!==i[h]?i[h]:l[h],g=us(m),v=h===a?f.isActive:null;!1===v&&(p=t);let y=m===l[h]&&m!==i[h]&&g;if(y&&n&&e.manuallyAnimateOnMount&&(y=!1),f.protectedKeys={...d},!f.isActive&&null===v||!m&&!f.prevProp||cs(m)||"boolean"==typeof m)continue;const b=Il(f.prevProp,m);let x=b||h===a&&f.isActive&&!y&&g||t>p&&g;const w=Array.isArray(m)?m:[m];let P=w.reduce(s,{});!1===v&&(P={});const{prevResolvedValues:T={}}=f,C={...T,...P},E=e=>{x=!0,c.delete(e),f.needsAnimating[e]=!0;};for(const e in C){const t=P[e],r=T[e];d.hasOwnProperty(e)||(t!==r?Mo(t)&&Mo(r)?!pa(t,r)||b?E(e):f.protectedKeys[e]=!0:void 0!==t?E(e):c.add(e):void 0!==t&&c.has(e)?E(e):f.protectedKeys[e]=!0);}f.prevProp=m,f.prevResolvedValues=P,f.isActive&&(d={...d,...P}),n&&e.blockInitialAnimation&&(x=!1),x&&!y&&u.push(...w.map((e=>({animation:e,options:{type:h,...o}}))));}if(c.size){const t={};c.forEach((r=>{const n=e.getBaseTarget(r);void 0!==n&&(t[r]=n);})),u.push({animation:t});}let h=Boolean(u.length);return n&&!1===i.initial&&!e.manuallyAnimateOnMount&&(h=!1),n=!1,h?t(u):Promise.resolve()}return {animateChanges:o,setActive:function(t,n,s){var a;if(r[t].isActive===n)return Promise.resolve();null===(a=e.variantChildren)||void 0===a||a.forEach((e=>{var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,n)})),r[t].isActive=n;const i=o(s,t);for(const e in r)r[e].protectedKeys={};return i},setAnimateFunction:function(r){t=r(e);},getState:()=>r}}function Il(e,t){return "string"==typeof t?t!==e:!!Array.isArray(t)&&!pa(t,e)}function Vl(e=!1){return {isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}let Ll=0;const Kl={animation:{Feature:class extends ta{constructor(e){super(e),e.animationState||(e.animationState=Dl(e));}updateAnimationControlsSubscription(){const{animate:e}=this.node.getProps();this.unmount(),cs(e)&&(this.unmount=e.subscribe(this.node));}mount(){this.updateAnimationControlsSubscription();}update(){const{animate:e}=this.node.getProps(),{animate:t}=this.node.prevProps||{};e!==t&&this.updateAnimationControlsSubscription();}unmount(){}}},exit:{Feature:class extends ta{constructor(){super(...arguments),this.id=Ll++;}update(){if(!this.node.presenceContext)return;const{isPresent:e,onExitComplete:t,custom:r}=this.node.presenceContext,{isPresent:n}=this.node.prevPresenceContext||{};if(!this.node.animationState||e===n)return;const s=this.node.animationState.setActive("exit",!e,{custom:null!=r?r:this.node.getProps().custom});t&&!e&&s.then((()=>t(this.id)));}mount(){const{register:e}=this.node.presenceContext||{};e&&(this.unmount=e(this.id));}unmount(){}}}},Rl=(e,t)=>Math.abs(e-t);class Nl{constructor(e,t,{transformPagePoint:r}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const e=Ol(this.lastMoveEventInfo,this.history),t=null!==this.startEvent,r=function(e,t){const r=Rl(e.x,t.x),n=Rl(e.y,t.y);return Math.sqrt(r**2+n**2)}(e.offset,{x:0,y:0})>=3;if(!t&&!r)return;const{point:n}=e,{timestamp:s}=Oo;this.history.push({...n,timestamp:s});const{onStart:o,onMove:a}=this.handlers;t||(o&&o(this.lastMoveEvent,e),this.startEvent=this.lastMoveEvent),a&&a(this.lastMoveEvent,e);},this.handlePointerMove=(e,t)=>{this.lastMoveEvent=e,this.lastMoveEventInfo=jl(t,this.transformPagePoint),jo.update(this.updatePoint,!0);},this.handlePointerUp=(e,t)=>{if(this.end(),!this.lastMoveEvent||!this.lastMoveEventInfo)return;const{onEnd:r,onSessionEnd:n}=this.handlers,s=Ol("pointercancel"===e.type?this.lastMoveEventInfo:jl(t,this.transformPagePoint),this.history);this.startEvent&&r&&r(e,s),n&&n(e,s);},!Ho(e))return;this.handlers=t,this.transformPagePoint=r;const n=jl($o(e),this.transformPagePoint),{point:s}=n,{timestamp:o}=Oo;this.history=[{...s,timestamp:o}];const{onSessionStart:a}=t;a&&a(e,Ol(n,this.history)),this.removeListeners=Yo(Go(window,"pointermove",this.handlePointerMove),Go(window,"pointerup",this.handlePointerUp),Go(window,"pointercancel",this.handlePointerUp));}updateHandlers(e){this.handlers=e;}end(){this.removeListeners&&this.removeListeners(),Fo(this.updatePoint);}}function jl(e,t){return t?{point:t(e.point)}:e}function Fl(e,t){return {x:e.x-t.x,y:e.y-t.y}}function Ol({point:e},t){return {point:e,delta:Fl(e,Wl(t)),offset:Fl(e,Bl(t)),velocity:zl(t,.1)}}function Bl(e){return e[0]}function Wl(e){return e[e.length-1]}function zl(e,t){if(e.length<2)return {x:0,y:0};let r=e.length-1,n=null;const s=Wl(e);for(;r>=0&&(n=e[r],!(s.timestamp-n.timestamp>va(t)));)r--;if(!n)return {x:0,y:0};const o=ya(s.timestamp-n.timestamp);if(0===o)return {x:0,y:0};const a={x:(s.x-n.x)/o,y:(s.y-n.y)/o};return a.x===1/0&&(a.x=0),a.y===1/0&&(a.y=0),a}function Ul(e){return e.max-e.min}function Hl(e,t=0,r=.01){return Math.abs(e-t)<=r}function $l(e,t,r,n=.5){e.origin=n,e.originPoint=Xa(t.min,t.max,e.origin),e.scale=Ul(r)/Ul(t),(Hl(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=Xa(r.min,r.max,e.origin)-e.originPoint,(Hl(e.translate)||isNaN(e.translate))&&(e.translate=0);}function _l(e,t,r,n){$l(e.x,t.x,r.x,n?n.originX:void 0),$l(e.y,t.y,r.y,n?n.originY:void 0);}function Gl(e,t,r){e.min=r.min+t.min,e.max=e.min+Ul(t);}function ql(e,t,r){e.min=t.min-r.min,e.max=e.min+Ul(t);}function Yl(e,t,r){ql(e.x,t.x,r.x),ql(e.y,t.y,r.y);}function Xl(e,t,r){return {min:void 0!==t?e.min+t:void 0,max:void 0!==r?e.max+r-(e.max-e.min):void 0}}function Zl(e,t){let r=t.min-e.min,n=t.max-e.max;return t.max-t.min<e.max-e.min&&([r,n]=[n,r]),{min:r,max:n}}const Jl=.35;function Ql(e,t,r){return {min:eu(e,t),max:eu(e,r)}}function eu(e,t){return "number"==typeof e?e:e[t]||0}const tu=()=>({x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}}),ru=()=>({x:{min:0,max:0},y:{min:0,max:0}});function nu(e){return [e("x"),e("y")]}function su({top:e,left:t,right:r,bottom:n}){return {x:{min:t,max:r},y:{min:e,max:n}}}function ou(e){return void 0===e||1===e}function au({scale:e,scaleX:t,scaleY:r}){return !ou(e)||!ou(t)||!ou(r)}function iu(e){return au(e)||lu(e)||e.z||e.rotate||e.rotateX||e.rotateY}function lu(e){return uu(e.x)||uu(e.y)}function uu(e){return e&&"0%"!==e}function cu(e,t,r){return r+t*(e-r)}function du(e,t,r,n,s){return void 0!==s&&(e=cu(e,s,n)),cu(e,r,n)+t}function pu(e,t=0,r=1,n,s){e.min=du(e.min,t,r,n,s),e.max=du(e.max,t,r,n,s);}function hu(e,{x:t,y:r}){pu(e.x,t.translate,t.scale,t.originPoint),pu(e.y,r.translate,r.scale,r.originPoint);}function fu(e){return Number.isInteger(e)||e>1.0000000000001||e<.999999999999?e:1}function mu(e,t){e.min=e.min+t,e.max=e.max+t;}function gu(e,t,[r,n,s]){const o=void 0!==t[s]?t[s]:.5,a=Xa(e.min,e.max,o);pu(e,t[r],t[n],a,t.scale);}const vu=["x","scaleX","originX"],yu=["y","scaleY","originY"];function bu(e,t){gu(e.x,t,vu),gu(e.y,t,yu);}function xu(e,t){return su(function(e,t){if(!t)return e;const r=t({x:e.left,y:e.top}),n=t({x:e.right,y:e.bottom});return {top:r.y,left:r.x,bottom:n.y,right:n.x}}(e.getBoundingClientRect(),t))}const wu=new WeakMap;class Pu{constructor(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=ru(),this.visualElement=e;}start(e,{snapToCursor:t=!1}={}){const{presenceContext:r}=this.visualElement;if(r&&!1===r.isPresent)return;this.panSession=new Nl(e,{onSessionStart:e=>{this.stopAnimation(),t&&this.snapToCursor($o(e,"page").point);},onStart:(e,t)=>{const{drag:r,dragPropagation:n,onDragStart:s}=this.getProps();if(r&&!n&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=Qo(r),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),nu((e=>{let t=this.getAxisMotionValue(e).get()||0;if(Ys.test(t)){const{projection:r}=this.visualElement;if(r&&r.layout){const n=r.layout.layoutBox[e];if(n){t=Ul(n)*(parseFloat(t)/100);}}}this.originPoint[e]=t;})),s&&jo.update((()=>s(e,t)),!1,!0);const{animationState:o}=this.visualElement;o&&o.setActive("whileDrag",!0);},onMove:(e,t)=>{const{dragPropagation:r,dragDirectionLock:n,onDirectionLock:s,onDrag:o}=this.getProps();if(!r&&!this.openGlobalLock)return;const{offset:a}=t;if(n&&null===this.currentDirection)return this.currentDirection=function(e,t=10){let r=null;Math.abs(e.y)>t?r="y":Math.abs(e.x)>t&&(r="x");return r}(a),void(null!==this.currentDirection&&s&&s(this.currentDirection));this.updateAxis("x",t.point,a),this.updateAxis("y",t.point,a),this.visualElement.render(),o&&o(e,t);},onSessionEnd:(e,t)=>this.stop(e,t)},{transformPagePoint:this.visualElement.getTransformPagePoint()});}stop(e,t){const r=this.isDragging;if(this.cancel(),!r)return;const{velocity:n}=t;this.startAnimation(n);const{onDragEnd:s}=this.getProps();s&&jo.update((()=>s(e,t)));}cancel(){this.isDragging=!1;const{projection:e,animationState:t}=this.visualElement;e&&(e.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:r}=this.getProps();!r&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),t&&t.setActive("whileDrag",!1);}updateAxis(e,t,r){const{drag:n}=this.getProps();if(!r||!Tu(e,n,this.currentDirection))return;const s=this.getAxisMotionValue(e);let o=this.originPoint[e]+r[e];this.constraints&&this.constraints[e]&&(o=function(e,{min:t,max:r},n){return void 0!==t&&e<t?e=n?Xa(t,e,n.min):Math.max(e,t):void 0!==r&&e>r&&(e=n?Xa(r,e,n.max):Math.min(e,r)),e}(o,this.constraints[e],this.elastic[e])),s.set(o);}resolveConstraints(){const{dragConstraints:e,dragElastic:t}=this.getProps(),{layout:r}=this.visualElement.projection||{},n=this.constraints;e&&ls(e)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!e||!r)&&function(e,{top:t,left:r,bottom:n,right:s}){return {x:Xl(e.x,r,s),y:Xl(e.y,t,n)}}(r.layoutBox,e),this.elastic=function(e=Jl){return !1===e?e=0:!0===e&&(e=Jl),{x:Ql(e,"left","right"),y:Ql(e,"top","bottom")}}(t),n!==this.constraints&&r&&this.constraints&&!this.hasMutatedConstraints&&nu((e=>{this.getAxisMotionValue(e)&&(this.constraints[e]=function(e,t){const r={};return void 0!==t.min&&(r.min=t.min-e.min),void 0!==t.max&&(r.max=t.max-e.min),r}(r.layoutBox[e],this.constraints[e]));}));}resolveRefConstraints(){const{dragConstraints:e,onMeasureDragConstraints:t}=this.getProps();if(!e||!ls(e))return !1;const r=e.current;ga(null!==r,"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");const{projection:n}=this.visualElement;if(!n||!n.layout)return !1;const s=function(e,t,r){const n=xu(e,r),{scroll:s}=t;return s&&(mu(n.x,s.offset.x),mu(n.y,s.offset.y)),n}(r,n.root,this.visualElement.getTransformPagePoint());let o=function(e,t){return {x:Zl(e.x,t.x),y:Zl(e.y,t.y)}}(n.layout.layoutBox,s);if(t){const e=t(function({x:e,y:t}){return {top:t.min,right:e.max,bottom:t.max,left:e.min}}(o));this.hasMutatedConstraints=!!e,e&&(o=su(e));}return o}startAnimation(e){const{drag:t,dragMomentum:r,dragElastic:n,dragTransition:s,dragSnapToOrigin:o,onDragTransitionEnd:a}=this.getProps(),i=this.constraints||{},l=nu((a=>{if(!Tu(a,t,this.currentDirection))return;let l=i&&i[a]||{};o&&(l={min:0,max:0});const u=n?200:1e6,c=n?40:1e7,d={type:"inertia",velocity:r?e[a]:0,bounceStiffness:u,bounceDamping:c,timeConstant:750,restDelta:1,restSpeed:10,...s,...l};return this.startAxisValueAnimation(a,d)}));return Promise.all(l).then(a)}startAxisValueAnimation(e,t){const r=this.getAxisMotionValue(e);return r.start(il(e,r,0,t))}stopAnimation(){nu((e=>this.getAxisMotionValue(e).stop()));}getAxisMotionValue(e){const t="_drag"+e.toUpperCase(),r=this.visualElement.getProps(),n=r[t];return n||this.visualElement.getValue(e,(r.initial?r.initial[e]:void 0)||0)}snapToCursor(e){nu((t=>{const{drag:r}=this.getProps();if(!Tu(t,r,this.currentDirection))return;const{projection:n}=this.visualElement,s=this.getAxisMotionValue(t);if(n&&n.layout){const{min:r,max:o}=n.layout.layoutBox[t];s.set(e[t]-Xa(r,o,.5));}}));}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:e,dragConstraints:t}=this.getProps(),{projection:r}=this.visualElement;if(!ls(t)||!r||!this.constraints)return;this.stopAnimation();const n={x:0,y:0};nu((e=>{const t=this.getAxisMotionValue(e);if(t){const r=t.get();n[e]=function(e,t){let r=.5;const n=Ul(e),s=Ul(t);return s>n?r=gi(t.min,t.max-n,e.min):n>s&&(r=gi(e.min,e.max-s,t.min)),Fs(0,1,r)}({min:r,max:r},this.constraints[e]);}}));const{transformTemplate:s}=this.visualElement.getProps();this.visualElement.current.style.transform=s?s({},""):"none",r.root&&r.root.updateScroll(),r.updateLayout(),this.resolveConstraints(),nu((t=>{if(!Tu(t,e,null))return;const r=this.getAxisMotionValue(t),{min:s,max:o}=this.constraints[t];r.set(Xa(s,o,n[t]));}));}addListeners(){if(!this.visualElement.current)return;wu.set(this.visualElement,this);const e=Go(this.visualElement.current,"pointerdown",(e=>{const{drag:t,dragListener:r=!0}=this.getProps();t&&r&&this.start(e);})),t=()=>{const{dragConstraints:e}=this.getProps();ls(e)&&(this.constraints=this.resolveRefConstraints());},{projection:r}=this.visualElement,n=r.addEventListener("measure",t);r&&!r.layout&&(r.root&&r.root.updateScroll(),r.updateLayout()),t();const s=Uo(window,"resize",(()=>this.scalePositionWithinConstraints())),o=r.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t})=>{this.isDragging&&t&&(nu((t=>{const r=this.getAxisMotionValue(t);r&&(this.originPoint[t]+=e[t].translate,r.set(r.get()+e[t].translate));})),this.visualElement.render());}));return ()=>{s(),e(),n(),o&&o();}}getProps(){const e=this.visualElement.getProps(),{drag:t=!1,dragDirectionLock:r=!1,dragPropagation:n=!1,dragConstraints:s=!1,dragElastic:o=Jl,dragMomentum:a=!0}=e;return {...e,drag:t,dragDirectionLock:r,dragPropagation:n,dragConstraints:s,dragElastic:o,dragMomentum:a}}}function Tu(e,t,r){return !(!0!==t&&t!==e||null!==r&&r!==e)}const Cu=e=>(t,r)=>{e&&jo.update((()=>e(t,r)));};const Eu={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function Su(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}const ku={correct:(e,t)=>{if(!t.target)return e;if("string"==typeof e){if(!Xs.test(e))return e;e=parseFloat(e);}return `${Su(e,t.target.x)}% ${Su(e,t.target.y)}%`}},Mu={correct:(e,{treeScale:t,projectionDelta:r})=>{const n=e,s=ci.parse(e);if(s.length>5)return n;const o=ci.createTransformer(e),a="number"!=typeof s[0]?1:0,i=r.x.scale*t.x,l=r.y.scale*t.y;s[0+a]/=i,s[1+a]/=l;const u=Xa(i,l,.5);return "number"==typeof s[2+a]&&(s[2+a]/=u),"number"==typeof s[3+a]&&(s[3+a]/=u),o(s)}};class Au extends t.Component{componentDidMount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:r,layoutId:n}=this.props,{projection:s}=e;var o;o=Iu,Object.assign(ks,o),s&&(t.group&&t.group.add(s),r&&r.register&&n&&r.register(s),s.root.didUpdate(),s.addEventListener("animationComplete",(()=>{this.safeToRemove();})),s.setOptions({...s.options,onExitComplete:()=>this.safeToRemove()})),Eu.hasEverUpdated=!0;}getSnapshotBeforeUpdate(e){const{layoutDependency:t,visualElement:r,drag:n,isPresent:s}=this.props,o=r.projection;return o?(o.isPresent=s,n||e.layoutDependency!==t||void 0===t?o.willUpdate():this.safeToRemove(),e.isPresent!==s&&(s?o.promote():o.relegate()||jo.postRender((()=>{const e=o.getStack();e&&e.members.length||this.safeToRemove();}))),null):null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask((()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove();})));}componentWillUnmount(){const{visualElement:e,layoutGroup:t,switchLayoutGroup:r}=this.props,{projection:n}=e;n&&(n.scheduleCheckAfterUnmount(),t&&t.group&&t.group.remove(n),r&&r.deregister&&r.deregister(n));}safeToRemove(){const{safeToRemove:e}=this.props;e&&e();}render(){return null}}function Du(e){const[r,n]=function(){const e=t.useContext(ss);if(null===e)return [!0,null];const{isPresent:r,onExitComplete:n,register:s}=e,o=t.useId();return t.useEffect((()=>s(o)),[]),!r&&n?[!1,()=>n&&n(o)]:[!0]}(),s=t.useContext(bs);return t.createElement(Au,{...e,layoutGroup:s,switchLayoutGroup:t.useContext(xs),isPresent:r,safeToRemove:n})}const Iu={borderRadius:{...ku,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:ku,borderTopRightRadius:ku,borderBottomLeftRadius:ku,borderBottomRightRadius:ku,boxShadow:Mu},Vu=["TopLeft","TopRight","BottomLeft","BottomRight"],Lu=Vu.length,Ku=e=>"string"==typeof e?parseFloat(e):e,Ru=e=>"number"==typeof e||Xs.test(e);function Nu(e,t){return void 0!==e[t]?e[t]:e.borderRadius}const ju=Ou(0,.5,Na),Fu=Ou(.5,.95,Ko);function Ou(e,t,r){return n=>n<e?0:n>t?1:r(gi(e,t,n))}function Bu(e,t){e.min=t.min,e.max=t.max;}function Wu(e,t){Bu(e.x,t.x),Bu(e.y,t.y);}function zu(e,t,r,n,s){return e=cu(e-=t,1/r,n),void 0!==s&&(e=cu(e,1/s,n)),e}function Uu(e,t,[r,n,s],o,a){!function(e,t=0,r=1,n=.5,s,o=e,a=e){Ys.test(t)&&(t=parseFloat(t),t=Xa(a.min,a.max,t/100)-a.min);if("number"!=typeof t)return;let i=Xa(o.min,o.max,n);e===o&&(i-=t),e.min=zu(e.min,t,r,i,s),e.max=zu(e.max,t,r,i,s);}(e,t[r],t[n],t[s],t.scale,o,a);}const Hu=["x","scaleX","originX"],$u=["y","scaleY","originY"];function _u(e,t,r,n){Uu(e.x,t,Hu,r?r.x:void 0,n?n.x:void 0),Uu(e.y,t,$u,r?r.y:void 0,n?n.y:void 0);}function Gu(e){return 0===e.translate&&1===e.scale}function qu(e){return Gu(e.x)&&Gu(e.y)}function Yu(e,t){return Math.round(e.x.min)===Math.round(t.x.min)&&Math.round(e.x.max)===Math.round(t.x.max)&&Math.round(e.y.min)===Math.round(t.y.min)&&Math.round(e.y.max)===Math.round(t.y.max)}function Xu(e){return Ul(e.x)/Ul(e.y)}class Zu{constructor(){this.members=[];}add(e){cl(this.members,e),e.scheduleRender();}remove(e){if(dl(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){const e=this.members[this.members.length-1];e&&this.promote(e);}}relegate(e){const t=this.members.findIndex((t=>e===t));if(0===t)return !1;let r;for(let e=t;e>=0;e--){const t=this.members[e];if(!1!==t.isPresent){r=t;break}}return !!r&&(this.promote(r),!0)}promote(e,t){const r=this.lead;if(e!==r&&(this.prevLead=r,this.lead=e,e.show(),r)){r.instance&&r.scheduleRender(),e.scheduleRender(),e.resumeFrom=r,t&&(e.resumeFrom.preserveOpacity=!0),r.snapshot&&(e.snapshot=r.snapshot,e.snapshot.latestValues=r.animationValues||r.latestValues),e.root&&e.root.isUpdating&&(e.isLayoutDirty=!0);const{crossfade:n}=e.options;!1===n&&r.hide();}}exitAnimationComplete(){this.members.forEach((e=>{const{options:t,resumingFrom:r}=e;t.onExitComplete&&t.onExitComplete(),r&&r.options.onExitComplete&&r.options.onExitComplete();}));}scheduleRender(){this.members.forEach((e=>{e.instance&&e.scheduleRender(!1);}));}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0);}}function Ju(e,t,r){let n="";const s=e.x.translate/t.x,o=e.y.translate/t.y;if((s||o)&&(n=`translate3d(${s}px, ${o}px, 0) `),1===t.x&&1===t.y||(n+=`scale(${1/t.x}, ${1/t.y}) `),r){const{rotate:e,rotateX:t,rotateY:s}=r;e&&(n+=`rotate(${e}deg) `),t&&(n+=`rotateX(${t}deg) `),s&&(n+=`rotateY(${s}deg) `);}const a=e.x.scale*t.x,i=e.y.scale*t.y;return 1===a&&1===i||(n+=`scale(${a}, ${i})`),n||"none"}const Qu=(e,t)=>e.depth-t.depth;class ec{constructor(){this.children=[],this.isDirty=!1;}add(e){cl(this.children,e),this.isDirty=!0;}remove(e){dl(this.children,e),this.isDirty=!0;}forEach(e){this.isDirty&&this.children.sort(Qu),this.isDirty=!1,this.children.forEach(e);}}const tc=["","X","Y","Z"];let rc=0;const nc={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function sc({attachResizeListener:e,defaultParent:t,measureScroll:r,checkIsScrollRoot:n,resetTransform:s}){return class{constructor(e={},r=(null==t?void 0:t())){this.id=rc++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots());},this.updateProjection=()=>{var e;nc.totalNodes=nc.resolvedTargetDeltas=nc.recalculatedProjection=0,this.nodes.forEach(ic),this.nodes.forEach(fc),this.nodes.forEach(mc),this.nodes.forEach(lc),e=nc,window.MotionDebug&&window.MotionDebug.record(e);},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=e,this.root=r?r.root||r:this,this.path=r?[...r.path,r]:[],this.parent=r,this.depth=r?r.depth+1:0;for(let e=0;e<this.path.length;e++)this.path[e].shouldResetTransform=!0;this.root===this&&(this.nodes=new ec);}addEventListener(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new pl),this.eventHandlers.get(e).add(t)}notifyListeners(e,...t){const r=this.eventHandlers.get(e);r&&r.notify(...t);}hasListeners(e){return this.eventHandlers.has(e)}mount(t,r=this.root.hasTreeAnimated){if(this.instance)return;var n;this.isSVG=(n=t)instanceof SVGElement&&"svg"!==n.tagName,this.instance=t;const{layoutId:s,layout:o,visualElement:a}=this.options;if(a&&!a.current&&a.mount(t),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),r&&(o||s)&&(this.isLayoutDirty=!0),e){let r;const n=()=>this.root.updateBlockedByResize=!1;e(t,(()=>{this.root.updateBlockedByResize=!0,r&&r(),r=function(e,t){const r=performance.now(),n=({timestamp:s})=>{const o=s-r;o>=t&&(Fo(n),e(o-t));};return jo.read(n,!0),()=>Fo(n)}(n,250),Eu.hasAnimatedSinceResize&&(Eu.hasAnimatedSinceResize=!1,this.nodes.forEach(hc));}));}s&&this.root.registerSharedNode(s,this),!1!==this.options.animate&&a&&(s||o)&&this.addEventListener("didUpdate",(({delta:e,hasLayoutChanged:t,hasRelativeTargetChanged:r,layout:n})=>{if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const s=this.options.transition||a.getDefaultTransition()||wc,{onLayoutAnimationStart:o,onLayoutAnimationComplete:i}=a.getProps(),l=!this.targetLayout||!Yu(this.targetLayout,n)||r,u=!t&&r;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||u||t&&(l||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(e,u);const t={...al(s,"layout"),onPlay:o,onComplete:i};(a.shouldReduceMotion||this.options.layoutRoot)&&(t.delay=0,t.type=!1),this.startAnimation(t);}else t||hc(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=n;}));}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const e=this.getStack();e&&e.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,Fo(this.updateProjection);}blockUpdate(){this.updateManuallyBlocked=!0;}unblockUpdate(){this.updateManuallyBlocked=!1;}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(gc),this.animationId++);}getTransformTemplate(){const{visualElement:e}=this.options;return e&&e.getProps().transformTemplate}willUpdate(e=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked())return void(this.options.onExitComplete&&this.options.onExitComplete());if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let e=0;e<this.path.length;e++){const t=this.path[e];t.shouldResetTransform=!0,t.updateScroll("snapshot"),t.options.layoutRoot&&t.willUpdate(!1);}const{layoutId:t,layout:r}=this.options;if(void 0===t&&!r)return;const n=this.getTransformTemplate();this.prevTransformTemplateValue=n?n(this.latestValues,""):void 0,this.updateSnapshot(),e&&this.notifyListeners("willUpdate");}update(){this.updateScheduled=!1;if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(cc);this.isUpdating||this.nodes.forEach(dc),this.isUpdating=!1,this.nodes.forEach(pc),this.nodes.forEach(oc),this.nodes.forEach(ac),this.clearAllSnapshots();const e=performance.now();Oo.delta=Fs(0,1e3/60,e-Oo.timestamp),Oo.timestamp=e,Oo.isProcessing=!0,Bo.update.process(Oo),Bo.preRender.process(Oo),Bo.render.process(Oo),Oo.isProcessing=!1;}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask((()=>this.update())));}clearAllSnapshots(){this.nodes.forEach(uc),this.sharedNodes.forEach(vc);}scheduleUpdateProjection(){jo.preRender(this.updateProjection,!1,!0);}scheduleCheckAfterUnmount(){jo.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed();}));}updateSnapshot(){!this.snapshot&&this.instance&&(this.snapshot=this.measure());}updateLayout(){if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let e=0;e<this.path.length;e++){this.path[e].updateScroll();}const e=this.layout;this.layout=this.measure(!1),this.layoutCorrected=ru(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:t}=this.options;t&&t.notify("LayoutMeasure",this.layout.layoutBox,e?e.layoutBox:void 0);}updateScroll(e="measure"){let t=Boolean(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===e&&(t=!1),t&&(this.scroll={animationId:this.root.animationId,phase:e,isRoot:n(this.instance),offset:r(this.instance)});}resetTransform(){if(!s)return;const e=this.isLayoutDirty||this.shouldResetTransform,t=this.projectionDelta&&!qu(this.projectionDelta),r=this.getTransformTemplate(),n=r?r(this.latestValues,""):void 0,o=n!==this.prevTransformTemplateValue;e&&(t||iu(this.latestValues)||o)&&(s(this.instance,n),this.shouldResetTransform=!1,this.scheduleRender());}measure(e=!0){const t=this.measurePageBox();let r=this.removeElementScroll(t);var n;return e&&(r=this.removeTransform(r)),Cc((n=r).x),Cc(n.y),{animationId:this.root.animationId,measuredBox:t,layoutBox:r,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:e}=this.options;if(!e)return ru();const t=e.measureViewportBox(),{scroll:r}=this.root;return r&&(mu(t.x,r.offset.x),mu(t.y,r.offset.y)),t}removeElementScroll(e){const t=ru();Wu(t,e);for(let r=0;r<this.path.length;r++){const n=this.path[r],{scroll:s,options:o}=n;if(n!==this.root&&s&&o.layoutScroll){if(s.isRoot){Wu(t,e);const{scroll:r}=this.root;r&&(mu(t.x,-r.offset.x),mu(t.y,-r.offset.y));}mu(t.x,s.offset.x),mu(t.y,s.offset.y);}}return t}applyTransform(e,t=!1){const r=ru();Wu(r,e);for(let e=0;e<this.path.length;e++){const n=this.path[e];!t&&n.options.layoutScroll&&n.scroll&&n!==n.root&&bu(r,{x:-n.scroll.offset.x,y:-n.scroll.offset.y}),iu(n.latestValues)&&bu(r,n.latestValues);}return iu(this.latestValues)&&bu(r,this.latestValues),r}removeTransform(e){const t=ru();Wu(t,e);for(let e=0;e<this.path.length;e++){const r=this.path[e];if(!r.instance)continue;if(!iu(r.latestValues))continue;au(r.latestValues)&&r.updateSnapshot();const n=ru();Wu(n,r.measurePageBox()),_u(t,r.latestValues,r.snapshot?r.snapshot.layoutBox:void 0,n);}return iu(this.latestValues)&&_u(t,this.latestValues),t}setTargetDelta(e){this.targetDelta=e,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0;}setOptions(e){this.options={...this.options,...e,crossfade:void 0===e.crossfade||e.crossfade};}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1;}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==Oo.timestamp&&this.relativeParent.resolveTargetDelta(!0);}resolveTargetDelta(e=!1){var t;const r=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=r.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=r.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=r.isSharedProjectionDirty);const n=Boolean(this.resumingFrom)||this!==r;if(!(e||n&&this.isSharedProjectionDirty||this.isProjectionDirty||(null===(t=this.parent)||void 0===t?void 0:t.isProjectionDirty)||this.attemptToResolveRelativeTarget))return;const{layout:s,layoutId:o}=this.options;if(this.layout&&(s||o)){if(this.resolvedRelativeTargetAt=Oo.timestamp,!this.targetDelta&&!this.relativeTarget){const e=this.getClosestProjectingParent();e&&e.layout&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=ru(),this.relativeTargetOrigin=ru(),Yl(this.relativeTargetOrigin,this.layout.layoutBox,e.layout.layoutBox),Wu(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0;}if(this.relativeTarget||this.targetDelta){var a,i,l;if(this.target||(this.target=ru(),this.targetWithTransforms=ru()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),a=this.target,i=this.relativeTarget,l=this.relativeParent.target,Gl(a.x,i.x,l.x),Gl(a.y,i.y,l.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.layoutBox):Wu(this.target,this.layout.layoutBox),hu(this.target,this.targetDelta)):Wu(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const e=this.getClosestProjectingParent();e&&Boolean(e.resumingFrom)===Boolean(this.resumingFrom)&&!e.options.layoutScroll&&e.target&&1!==this.animationProgress?(this.relativeParent=e,this.forceRelativeParentToResolveTarget(),this.relativeTarget=ru(),this.relativeTargetOrigin=ru(),Yl(this.relativeTargetOrigin,this.target,e.target),Wu(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0;}nc.resolvedTargetDeltas++;}}}getClosestProjectingParent(){if(this.parent&&!au(this.parent.latestValues)&&!lu(this.parent.latestValues))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return Boolean((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var e;const t=this.getLead(),r=Boolean(this.resumingFrom)||this!==t;let n=!0;if((this.isProjectionDirty||(null===(e=this.parent)||void 0===e?void 0:e.isProjectionDirty))&&(n=!1),r&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(n=!1),this.resolvedRelativeTargetAt===Oo.timestamp&&(n=!1),n)return;const{layout:s,layoutId:o}=this.options;if(this.isTreeAnimating=Boolean(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!s&&!o)return;Wu(this.layoutCorrected,this.layout.layoutBox);const a=this.treeScale.x,i=this.treeScale.y;!function(e,t,r,n=!1){const s=r.length;if(!s)return;let o,a;t.x=t.y=1;for(let i=0;i<s;i++){o=r[i],a=o.projectionDelta;const s=o.instance;s&&s.style&&"contents"===s.style.display||(n&&o.options.layoutScroll&&o.scroll&&o!==o.root&&bu(e,{x:-o.scroll.offset.x,y:-o.scroll.offset.y}),a&&(t.x*=a.x.scale,t.y*=a.y.scale,hu(e,a)),n&&iu(o.latestValues)&&bu(e,o.latestValues));}t.x=fu(t.x),t.y=fu(t.y);}(this.layoutCorrected,this.treeScale,this.path,r),!t.layout||t.target||1===this.treeScale.x&&1===this.treeScale.y||(t.target=t.layout.layoutBox);const{target:l}=t;if(!l)return void(this.projectionTransform&&(this.projectionDelta=tu(),this.projectionTransform="none",this.scheduleRender()));this.projectionDelta||(this.projectionDelta=tu(),this.projectionDeltaWithTransform=tu());const u=this.projectionTransform;_l(this.projectionDelta,this.layoutCorrected,l,this.latestValues),this.projectionTransform=Ju(this.projectionDelta,this.treeScale),this.projectionTransform===u&&this.treeScale.x===a&&this.treeScale.y===i||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",l)),nc.recalculatedProjection++;}hide(){this.isVisible=!1;}show(){this.isVisible=!0;}scheduleRender(e=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),e){const e=this.getStack();e&&e.scheduleRender();}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0);}setAnimationOrigin(e,t=!1){const r=this.snapshot,n=r?r.latestValues:{},s={...this.latestValues},o=tu();this.relativeParent&&this.relativeParent.options.layoutRoot||(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!t;const a=ru(),i=(r?r.source:void 0)!==(this.layout?this.layout.source:void 0),l=this.getStack(),u=!l||l.members.length<=1,c=Boolean(i&&!u&&!0===this.options.crossfade&&!this.path.some(xc));let d;this.animationProgress=0,this.mixTargetDelta=t=>{const r=t/1e3;yc(o.x,e.x,r),yc(o.y,e.y,r),this.setTargetDelta(o),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(Yl(a,this.layout.layoutBox,this.relativeParent.layout.layoutBox),function(e,t,r,n){bc(e.x,t.x,r.x,n),bc(e.y,t.y,r.y,n);}(this.relativeTarget,this.relativeTargetOrigin,a,r),d&&function(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}(this.relativeTarget,d)&&(this.isProjectionDirty=!1),d||(d=ru()),Wu(d,this.relativeTarget)),i&&(this.animationValues=s,function(e,t,r,n,s,o){s?(e.opacity=Xa(0,void 0!==r.opacity?r.opacity:1,ju(n)),e.opacityExit=Xa(void 0!==t.opacity?t.opacity:1,0,Fu(n))):o&&(e.opacity=Xa(void 0!==t.opacity?t.opacity:1,void 0!==r.opacity?r.opacity:1,n));for(let s=0;s<Lu;s++){const o=`border${Vu[s]}Radius`;let a=Nu(t,o),i=Nu(r,o);void 0===a&&void 0===i||(a||(a=0),i||(i=0),0===a||0===i||Ru(a)===Ru(i)?(e[o]=Math.max(Xa(Ku(a),Ku(i),n),0),(Ys.test(i)||Ys.test(a))&&(e[o]+="%")):e[o]=i);}(t.rotate||r.rotate)&&(e.rotate=Xa(t.rotate||0,r.rotate||0,n));}(s,n,this.latestValues,r,c,u)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=r;},this.mixTargetDelta(this.options.layoutRoot?1e3:0);}startAnimation(e){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(Fo(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=jo.update((()=>{Eu.hasAnimatedSinceResize=!0,this.currentAnimation=function(e,t,r){const n=Is(e)?e:gl(e);return n.start(il("",n,t,r)),n.animation}(0,1e3,{...e,onUpdate:t=>{this.mixTargetDelta(t),e.onUpdate&&e.onUpdate(t);},onComplete:()=>{e.onComplete&&e.onComplete(),this.completeAnimation();}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0;}));}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const e=this.getStack();e&&e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete");}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(1e3),this.currentAnimation.stop()),this.completeAnimation();}applyTransformsToTarget(){const e=this.getLead();let{targetWithTransforms:t,target:r,layout:n,latestValues:s}=e;if(t&&r&&n){if(this!==e&&this.layout&&n&&Ec(this.options.animationType,this.layout.layoutBox,n.layoutBox)){r=this.target||ru();const t=Ul(this.layout.layoutBox.x);r.x.min=e.target.x.min,r.x.max=r.x.min+t;const n=Ul(this.layout.layoutBox.y);r.y.min=e.target.y.min,r.y.max=r.y.min+n;}Wu(t,r),bu(t,s),_l(this.projectionDeltaWithTransform,this.layoutCorrected,t,s);}}registerSharedNode(e,t){this.sharedNodes.has(e)||this.sharedNodes.set(e,new Zu);this.sharedNodes.get(e).add(t);const r=t.options.initialPromotionConfig;t.promote({transition:r?r.transition:void 0,preserveFollowOpacity:r&&r.shouldPreserveFollowOpacity?r.shouldPreserveFollowOpacity(t):void 0});}isLead(){const e=this.getStack();return !e||e.lead===this}getLead(){var e;const{layoutId:t}=this.options;return t&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this}getPrevLead(){var e;const{layoutId:t}=this.options;return t?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0}getStack(){const{layoutId:e}=this.options;if(e)return this.root.sharedNodes.get(e)}promote({needsReset:e,transition:t,preserveFollowOpacity:r}={}){const n=this.getStack();n&&n.promote(this,r),e&&(this.projectionDelta=void 0,this.needsReset=!0),t&&this.setOptions({transition:t});}relegate(){const e=this.getStack();return !!e&&e.relegate(this)}resetRotation(){const{visualElement:e}=this.options;if(!e)return;let t=!1;const{latestValues:r}=e;if((r.rotate||r.rotateX||r.rotateY||r.rotateZ)&&(t=!0),!t)return;const n={};for(let t=0;t<tc.length;t++){const s="rotate"+tc[t];r[s]&&(n[s]=r[s],e.setStaticValue(s,0));}e.render();for(const t in n)e.setStaticValue(t,n[t]);e.scheduleRender();}getProjectionStyles(e={}){var t,r;const n={};if(!this.instance||this.isSVG)return n;if(!this.isVisible)return {visibility:"hidden"};n.visibility="";const s=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,n.opacity="",n.pointerEvents=Io(e.pointerEvents)||"",n.transform=s?s(this.latestValues,""):"none",n;const o=this.getLead();if(!this.projectionDelta||!this.layout||!o.target){const t={};return this.options.layoutId&&(t.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,t.pointerEvents=Io(e.pointerEvents)||""),this.hasProjected&&!iu(this.latestValues)&&(t.transform=s?s({},""):"none",this.hasProjected=!1),t}const a=o.animationValues||o.latestValues;this.applyTransformsToTarget(),n.transform=Ju(this.projectionDeltaWithTransform,this.treeScale,a),s&&(n.transform=s(a,n.transform));const{x:i,y:l}=this.projectionDelta;n.transformOrigin=`${100*i.origin}% ${100*l.origin}% 0`,o.animationValues?n.opacity=o===this?null!==(r=null!==(t=a.opacity)&&void 0!==t?t:this.latestValues.opacity)&&void 0!==r?r:1:this.preserveOpacity?this.latestValues.opacity:a.opacityExit:n.opacity=o===this?void 0!==a.opacity?a.opacity:"":void 0!==a.opacityExit?a.opacityExit:0;for(const e in ks){if(void 0===a[e])continue;const{correct:t,applyTo:r}=ks[e],s="none"===n.transform?a[e]:t(a[e],o);if(r){const e=r.length;for(let t=0;t<e;t++)n[r[t]]=s;}else n[e]=s;}return this.options.layoutId&&(n.pointerEvents=o===this?Io(e.pointerEvents)||"":"none"),n}clearSnapshot(){this.resumeFrom=this.snapshot=void 0;}resetTree(){this.root.nodes.forEach((e=>{var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(cc),this.root.sharedNodes.clear();}}}function oc(e){e.updateLayout();}function ac(e){var t;const r=(null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)||e.snapshot;if(e.isLead()&&e.layout&&r&&e.hasListeners("didUpdate")){const{layoutBox:t,measuredBox:n}=e.layout,{animationType:s}=e.options,o=r.source!==e.layout.source;"size"===s?nu((e=>{const n=o?r.measuredBox[e]:r.layoutBox[e],s=Ul(n);n.min=t[e].min,n.max=n.min+s;})):Ec(s,r.layoutBox,t)&&nu((n=>{const s=o?r.measuredBox[n]:r.layoutBox[n],a=Ul(t[n]);s.max=s.min+a,e.relativeTarget&&!e.currentAnimation&&(e.isProjectionDirty=!0,e.relativeTarget[n].max=e.relativeTarget[n].min+a);}));const a=tu();_l(a,t,r.layoutBox);const i=tu();o?_l(i,e.applyTransform(n,!0),r.measuredBox):_l(i,t,r.layoutBox);const l=!qu(a);let u=!1;if(!e.resumeFrom){const n=e.getClosestProjectingParent();if(n&&!n.resumeFrom){const{snapshot:s,layout:o}=n;if(s&&o){const a=ru();Yl(a,r.layoutBox,s.layoutBox);const i=ru();Yl(i,t,o.layoutBox),Yu(a,i)||(u=!0),n.options.layoutRoot&&(e.relativeTarget=i,e.relativeTargetOrigin=a,e.relativeParent=n);}}}e.notifyListeners("didUpdate",{layout:t,snapshot:r,delta:i,layoutDelta:a,hasLayoutChanged:l,hasRelativeTargetChanged:u});}else if(e.isLead()){const{onExitComplete:t}=e.options;t&&t();}e.options.transition=void 0;}function ic(e){nc.totalNodes++,e.parent&&(e.isProjecting()||(e.isProjectionDirty=e.parent.isProjectionDirty),e.isSharedProjectionDirty||(e.isSharedProjectionDirty=Boolean(e.isProjectionDirty||e.parent.isProjectionDirty||e.parent.isSharedProjectionDirty)),e.isTransformDirty||(e.isTransformDirty=e.parent.isTransformDirty));}function lc(e){e.isProjectionDirty=e.isSharedProjectionDirty=e.isTransformDirty=!1;}function uc(e){e.clearSnapshot();}function cc(e){e.clearMeasurements();}function dc(e){e.isLayoutDirty=!1;}function pc(e){const{visualElement:t}=e.options;t&&t.getProps().onBeforeLayoutMeasure&&t.notify("BeforeLayoutMeasure"),e.resetTransform();}function hc(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0,e.isProjectionDirty=!0;}function fc(e){e.resolveTargetDelta();}function mc(e){e.calcProjection();}function gc(e){e.resetRotation();}function vc(e){e.removeLeadSnapshot();}function yc(e,t,r){e.translate=Xa(t.translate,0,r),e.scale=Xa(t.scale,1,r),e.origin=t.origin,e.originPoint=t.originPoint;}function bc(e,t,r,n){e.min=Xa(t.min,r.min,n),e.max=Xa(t.max,r.max,n);}function xc(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}const wc={duration:.45,ease:[.4,0,.1,1]},Pc=e=>"undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().includes(e),Tc=Pc("applewebkit/")&&!Pc("chrome/")?Math.round:Ko;function Cc(e){e.min=Tc(e.min),e.max=Tc(e.max);}function Ec(e,t,r){return "position"===e||"preserve-aspect"===e&&!Hl(Xu(t),Xu(r),.2)}const Sc=sc({attachResizeListener:(e,t)=>Uo(e,"resize",t),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),kc={current:void 0},Mc=sc({measureScroll:e=>({x:e.scrollLeft,y:e.scrollTop}),defaultParent:()=>{if(!kc.current){const e=new Sc({});e.mount(window),e.setOptions({layoutScroll:!0}),kc.current=e;}return kc.current},resetTransform:(e,t)=>{e.style.transform=void 0!==t?t:"none";},checkIsScrollRoot:e=>Boolean("fixed"===window.getComputedStyle(e).position)}),Ac={pan:{Feature:class extends ta{constructor(){super(...arguments),this.removePointerDownListener=Ko;}onPointerDown(e){this.session=new Nl(e,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint()});}createPanHandlers(){const{onPanSessionStart:e,onPanStart:t,onPan:r,onPanEnd:n}=this.node.getProps();return {onSessionStart:Cu(e),onStart:Cu(t),onMove:r,onEnd:(e,t)=>{delete this.session,n&&jo.update((()=>n(e,t)));}}}mount(){this.removePointerDownListener=Go(this.node.current,"pointerdown",(e=>this.onPointerDown(e)));}update(){this.session&&this.session.updateHandlers(this.createPanHandlers());}unmount(){this.removePointerDownListener(),this.session&&this.session.end();}}},drag:{Feature:class extends ta{constructor(e){super(e),this.removeGroupControls=Ko,this.removeListeners=Ko,this.controls=new Pu(e);}mount(){const{dragControls:e}=this.node.getProps();e&&(this.removeGroupControls=e.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||Ko;}unmount(){this.removeGroupControls(),this.removeListeners();}},ProjectionNode:Mc,MeasureLayout:Du}},Dc=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;const Ic=4;function Vc(e,t,r=1){ga(r<=Ic,`Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`);const[n,s]=function(e){const t=Dc.exec(e);if(!t)return [,];const[,r,n]=t;return [r,n]}(e);if(!n)return;const o=window.getComputedStyle(t).getPropertyValue(n);if(o){const e=o.trim();return ul(e)?parseFloat(e):e}return Ns(s)?Vc(s,t,r+1):s}const Lc=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),Kc=e=>Lc.has(e),Rc=e=>e===Os||e===Xs,Nc=(e,t)=>parseFloat(e.split(", ")[t]),jc=(e,t)=>(r,{transform:n})=>{if("none"===n||!n)return 0;const s=n.match(/^matrix3d\((.+)\)$/);if(s)return Nc(s[1],t);{const t=n.match(/^matrix\((.+)\)$/);return t?Nc(t[1],e):0}},Fc=new Set(["x","y","z"]),Oc=Ms.filter((e=>!Fc.has(e)));const Bc={width:({x:e},{paddingLeft:t="0",paddingRight:r="0"})=>e.max-e.min-parseFloat(t)-parseFloat(r),height:({y:e},{paddingTop:t="0",paddingBottom:r="0"})=>e.max-e.min-parseFloat(t)-parseFloat(r),top:(e,{top:t})=>parseFloat(t),left:(e,{left:t})=>parseFloat(t),bottom:({y:e},{top:t})=>parseFloat(t)+(e.max-e.min),right:({x:e},{left:t})=>parseFloat(t)+(e.max-e.min),x:jc(4,13),y:jc(5,14)};Bc.translateX=Bc.x,Bc.translateY=Bc.y;const Wc=(e,t,r={},n={})=>{t={...t},n={...n};const s=Object.keys(t).filter(Kc);let o=[],a=!1;const i=[];if(s.forEach((s=>{const l=e.getValue(s);if(!e.hasValue(s))return;let u=r[s],c=bl(u);const d=t[s];let p;if(Mo(d)){const e=d.length,t=null===d[0]?1:0;u=d[t],c=bl(u);for(let r=t;r<e&&null!==d[r];r++)p?ga(bl(d[r])===p,"All keyframes must be of the same type"):(p=bl(d[r]),ga(p===c||Rc(c)&&Rc(p),"Keyframes must be of the same dimension as the current value"));}else p=bl(d);if(c!==p)if(Rc(c)&&Rc(p)){const e=l.get();"string"==typeof e&&l.set(parseFloat(e)),"string"==typeof d?t[s]=parseFloat(d):Array.isArray(d)&&p===Xs&&(t[s]=d.map(parseFloat));}else (null==c?void 0:c.transform)&&(null==p?void 0:p.transform)&&(0===u||0===d)?0===u?l.set(p.transform(u)):t[s]=c.transform(d):(a||(o=function(e){const t=[];return Oc.forEach((r=>{const n=e.getValue(r);void 0!==n&&(t.push([r,n.get()]),n.set(r.startsWith("scale")?1:0));})),t.length&&e.render(),t}(e),a=!0),i.push(s),n[s]=void 0!==n[s]?n[s]:t[s],l.jump(d));})),i.length){const r=i.indexOf("height")>=0?window.pageYOffset:null,s=((e,t,r)=>{const n=t.measureViewportBox(),s=t.current,o=getComputedStyle(s),{display:a}=o,i={};"none"===a&&t.setStaticValue("display",e.display||"block"),r.forEach((e=>{i[e]=Bc[e](n,o);})),t.render();const l=t.measureViewportBox();return r.forEach((r=>{const n=t.getValue(r);n&&n.jump(i[r]),e[r]=Bc[r](l,o);})),e})(t,e,i);return o.length&&o.forEach((([t,r])=>{e.getValue(t).set(r);})),e.render(),os&&null!==r&&window.scrollTo({top:r}),{target:s,transitionEnd:n}}return {target:t,transitionEnd:n}};function zc(e,t,r,n){return (e=>Object.keys(e).some(Kc))(t)?Wc(e,t,r,n):{target:t,transitionEnd:n}}const Uc=(e,t,r,n)=>{const s=function(e,{...t},r){const n=e.current;if(!(n instanceof Element))return {target:t,transitionEnd:r};r&&(r={...r}),e.values.forEach((e=>{const t=e.get();if(!Ns(t))return;const r=Vc(t,n);r&&e.set(r);}));for(const e in t){const s=t[e];if(!Ns(s))continue;const o=Vc(s,n);o&&(t[e]=o,r||(r={}),void 0===r[e]&&(r[e]=s));}return {target:t,transitionEnd:r}}(e,t,n);return zc(e,t=s.target,r,n=s.transitionEnd)},Hc={current:null},$c={current:!1};const _c=new WeakMap,Gc=Object.keys(ys),qc=Gc.length,Yc=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],Xc=ps.length;class Zc{constructor({parent:e,props:t,presenceContext:r,reducedMotionConfig:n,visualState:s},o={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection));},this.scheduleRender=()=>jo.render(this.render,!1,!0);const{latestValues:a,renderState:i}=s;this.latestValues=a,this.baseTarget={...a},this.initialValues=t.initial?{...a}:{},this.renderState=i,this.parent=e,this.props=t,this.presenceContext=r,this.depth=e?e.depth+1:0,this.reducedMotionConfig=n,this.options=o,this.isControllingVariants=hs(t),this.isVariantNode=fs(t),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=Boolean(e&&e.current);const{willChange:l,...u}=this.scrapeMotionValuesFromProps(t,{});for(const e in u){const t=u[e];void 0!==a[e]&&Is(t)&&(t.set(a[e],!1),ll(l)&&l.add(e));}}scrapeMotionValuesFromProps(e,t){return {}}mount(e){this.current=e,_c.set(e,this),this.projection&&!this.projection.instance&&this.projection.mount(e),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach(((e,t)=>this.bindToMotionValue(t,e))),$c.current||function(){if($c.current=!0,os)if(window.matchMedia){const e=window.matchMedia("(prefers-reduced-motion)"),t=()=>Hc.current=e.matches;e.addListener(t),t();}else Hc.current=!1;}(),this.shouldReduceMotion="never"!==this.reducedMotionConfig&&("always"===this.reducedMotionConfig||Hc.current),"production"!==process.env.NODE_ENV&&fl(!0!==this.shouldReduceMotion,"You have Reduced Motion enabled on your device. Animations may not appear as expected."),this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext);}unmount(){_c.delete(this.current),this.projection&&this.projection.unmount(),Fo(this.notifyUpdate),Fo(this.render),this.valueSubscriptions.forEach((e=>e())),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const e in this.events)this.events[e].clear();for(const e in this.features)this.features[e].unmount();this.current=null;}bindToMotionValue(e,t){const r=As.has(e),n=t.on("change",(t=>{this.latestValues[e]=t,this.props.onUpdate&&jo.update(this.notifyUpdate,!1,!0),r&&this.projection&&(this.projection.isTransformDirty=!0);})),s=t.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(e,(()=>{n(),s();}));}sortNodePosition(e){return this.current&&this.sortInstanceNodePosition&&this.type===e.type?this.sortInstanceNodePosition(this.current,e.current):0}loadFeatures({children:e,...t},r,n,s){let o,a;if("production"!==process.env.NODE_ENV&&n&&r){const e="You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";t.ignoreStrict?ma(!1,e):ga(!1,e);}for(let e=0;e<qc;e++){const r=Gc[e],{isEnabled:n,Feature:s,ProjectionNode:i,MeasureLayout:l}=ys[r];i&&(o=i),n(t)&&(!this.features[r]&&s&&(this.features[r]=new s(this)),l&&(a=l));}if(!this.projection&&o){this.projection=new o(this.latestValues,this.parent&&this.parent.projection);const{layoutId:e,layout:r,drag:n,dragConstraints:a,layoutScroll:i,layoutRoot:l}=t;this.projection.setOptions({layoutId:e,layout:r,alwaysMeasureLayout:Boolean(n)||a&&ls(a),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:"string"==typeof r?r:"both",initialPromotionConfig:s,layoutScroll:i,layoutRoot:l});}return a}updateFeatures(){for(const e in this.features){const t=this.features[e];t.isMounted?t.update():(t.mount(),t.isMounted=!0);}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props);}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):ru()}getStaticValue(e){return this.latestValues[e]}setStaticValue(e,t){this.latestValues[e]=t;}makeTargetAnimatable(e,t=!0){return this.makeTargetAnimatableFromInstance(e,this.props,t)}update(e,t){(e.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=e,this.prevPresenceContext=this.presenceContext,this.presenceContext=t;for(let t=0;t<Yc.length;t++){const r=Yc[t];this.propEventSubscriptions[r]&&(this.propEventSubscriptions[r](),delete this.propEventSubscriptions[r]);const n=e["on"+r];n&&(this.propEventSubscriptions[r]=this.on(r,n));}this.prevMotionValues=function(e,t,r){const{willChange:n}=t;for(const s in t){const o=t[s],a=r[s];if(Is(o))e.addValue(s,o),ll(n)&&n.add(s),"development"===process.env.NODE_ENV&&fl("10.16.5"===o.version,`Attempting to mix Framer Motion versions ${o.version} with 10.16.5 may not work as expected.`);else if(Is(a))e.addValue(s,gl(o,{owner:e})),ll(n)&&n.remove(s);else if(a!==o)if(e.hasValue(s)){const t=e.getValue(s);!t.hasAnimated&&t.set(o);}else {const t=e.getStaticValue(s);e.addValue(s,gl(void 0!==t?t:o,{owner:e}));}}for(const n in r)void 0===t[n]&&e.removeValue(n);return t}(this,this.scrapeMotionValuesFromProps(e,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue();}getProps(){return this.props}getVariant(e){return this.props.variants?this.props.variants[e]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(e=!1){if(e)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const e=this.parent&&this.parent.getVariantContext()||{};return void 0!==this.props.initial&&(e.initial=this.props.initial),e}const t={};for(let e=0;e<Xc;e++){const r=ps[e],n=this.props[r];(us(n)||!1===n)&&(t[r]=n);}return t}addVariantChild(e){const t=this.getClosestVariantNode();if(t)return t.variantChildren&&t.variantChildren.add(e),()=>t.variantChildren.delete(e)}addValue(e,t){t!==this.values.get(e)&&(this.removeValue(e),this.bindToMotionValue(e,t)),this.values.set(e,t),this.latestValues[e]=t.get();}removeValue(e){this.values.delete(e);const t=this.valueSubscriptions.get(e);t&&(t(),this.valueSubscriptions.delete(e)),delete this.latestValues[e],this.removeValueFromRenderState(e,this.renderState);}hasValue(e){return this.values.has(e)}getValue(e,t){if(this.props.values&&this.props.values[e])return this.props.values[e];let r=this.values.get(e);return void 0===r&&void 0!==t&&(r=gl(t,{owner:this}),this.addValue(e,r)),r}readValue(e){var t;return void 0===this.latestValues[e]&&this.current?null!==(t=this.getBaseTargetFromProps(this.props,e))&&void 0!==t?t:this.readValueFromInstance(this.current,e,this.options):this.latestValues[e]}setBaseTarget(e,t){this.baseTarget[e]=t;}getBaseTarget(e){var t;const{initial:r}=this.props,n="string"==typeof r||"object"==typeof r?null===(t=So(this.props,r))||void 0===t?void 0:t[e]:void 0;if(r&&void 0!==n)return n;const s=this.getBaseTargetFromProps(this.props,e);return void 0===s||Is(s)?void 0!==this.initialValues[e]&&void 0===n?void 0:this.baseTarget[e]:s}on(e,t){return this.events[e]||(this.events[e]=new pl),this.events[e].add(t)}notify(e,...t){this.events[e]&&this.events[e].notify(...t);}}class Jc extends Zc{sortInstanceNodePosition(e,t){return 2&e.compareDocumentPosition(t)?1:-1}getBaseTargetFromProps(e,t){return e.style?e.style[t]:void 0}removeValueFromRenderState(e,{vars:t,style:r}){delete t[e],delete r[e];}makeTargetAnimatableFromInstance({transition:e,transitionEnd:t,...r},{transformValues:n},s){let o=function(e,t,r){const n={};for(const s in e){const e=Pl(s,t);if(void 0!==e)n[s]=e;else {const e=r.getValue(s);e&&(n[s]=e.get());}}return n}(r,e||{},this);if(n&&(t&&(t=n(t)),r&&(r=n(r)),o&&(o=n(o))),s){!function(e,t,r){var n,s;const o=Object.keys(t).filter((t=>!e.hasValue(t))),a=o.length;var i;if(a)for(let l=0;l<a;l++){const a=o[l],u=t[a];let c=null;Array.isArray(u)&&(c=u[0]),null===c&&(c=null!==(s=null!==(n=r[a])&&void 0!==n?n:e.readValue(a))&&void 0!==s?s:t[a]),null!=c&&("string"==typeof c&&(ul(c)||sl(c))?c=parseFloat(c):(i=c,!xl.find(vl(i))&&ci.test(u)&&(c=nl(a,u))),e.addValue(a,gl(c,{owner:e})),void 0===r[a]&&(r[a]=c),null!==c&&e.setBaseTarget(a,c));}}(this,r,o);const e=Uc(this,r,o,t);t=e.transitionEnd,r=e.target;}return {transition:e,transitionEnd:t,...r}}}class Qc extends Jc{readValueFromInstance(e,t){if(As.has(t)){const e=rl(t);return e&&e.default||0}{const n=(r=e,window.getComputedStyle(r)),s=(Rs(t)?n.getPropertyValue(t):n[t])||0;return "string"==typeof s?s.trim():s}var r;}measureInstanceViewportBox(e,{transformPagePoint:t}){return xu(e,t)}build(e,t,r,n){ro(e,t,r,n.transformTemplate);}scrapeMotionValuesFromProps(e,t){return Co(e,t)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;Is(e)&&(this.childSubscription=e.on("change",(e=>{this.current&&(this.current.textContent=`${e}`);})));}renderInstance(e,t,r,n){wo(e,t,r,n);}}class ed extends Jc{constructor(){super(...arguments),this.isSVGTag=!1;}getBaseTargetFromProps(e,t){return e[t]}readValueFromInstance(e,t){if(As.has(t)){const e=rl(t);return e&&e.default||0}return t=Po.has(t)?t:xo(t),e.getAttribute(t)}measureInstanceViewportBox(){return ru()}scrapeMotionValuesFromProps(e,t){return Eo(e,t)}build(e,t,r,n){mo(e,t,r,this.isSVGTag,n.transformTemplate);}renderInstance(e,t,r,n){To(e,t,0,n);}mount(e){this.isSVGTag=vo(e.tagName),super.mount(e);}}const td=(e,t)=>Ss(e)?new ed(t,{enableHardwareAcceleration:!1}):new Qc(t,{enableHardwareAcceleration:!0}),rd={...Kl,...da,...Ac,...{layout:{ProjectionNode:Mc,MeasureLayout:Du}}},nd=Cs(((e,t)=>function(e,{forwardMotionProps:t=!1},r,n){return {...Ss(e)?Wo:zo,preloadedFeatures:r,useRender:bo(t),createVisualElement:n,Component:e}}(e,t,rd,td)));function sd(){const e=t.useRef(!1);return as((()=>(e.current=!0,()=>{e.current=!1;})),[]),e}function od(){const e=sd(),[r,n]=t.useState(0),s=t.useCallback((()=>{e.current&&n(r+1);}),[r]);return [t.useCallback((()=>jo.postRender(s)),[s]),r]}class ad extends s.Component{getSnapshotBeforeUpdate(e){const t=this.props.childRef.current;if(t&&e.isPresent&&!this.props.isPresent){const e=this.props.sizeRef.current;e.height=t.offsetHeight||0,e.width=t.offsetWidth||0,e.top=t.offsetTop,e.left=t.offsetLeft;}return null}componentDidUpdate(){}render(){return this.props.children}}function id({children:e,isPresent:r}){const n=t.useId(),o=t.useRef(null),a=t.useRef({width:0,height:0,top:0,left:0});return t.useInsertionEffect((()=>{const{width:e,height:t,top:s,left:i}=a.current;if(r||!o.current||!e||!t)return;o.current.dataset.motionPopId=n;const l=document.createElement("style");return document.head.appendChild(l),l.sheet&&l.sheet.insertRule(`\n          [data-motion-pop-id="${n}"] {\n            position: absolute !important;\n            width: ${e}px !important;\n            height: ${t}px !important;\n            top: ${s}px !important;\n            left: ${i}px !important;\n          }\n        `),()=>{document.head.removeChild(l);}}),[r]),s.createElement(ad,{isPresent:r,childRef:o,sizeRef:a},s.cloneElement(e,{ref:o}))}const ld=({children:e,initial:r,isPresent:n,onExitComplete:o,custom:a,presenceAffectsLayout:i,mode:l})=>{const u=ko(ud),c=t.useId(),d=t.useMemo((()=>({id:c,initial:r,isPresent:n,custom:a,onExitComplete:e=>{u.set(e,!0);for(const e of u.values())if(!e)return;o&&o();},register:e=>(u.set(e,!1),()=>u.delete(e))})),i?void 0:[n]);return t.useMemo((()=>{u.forEach(((e,t)=>u.set(t,!1)));}),[n]),s.useEffect((()=>{!n&&!u.size&&o&&o();}),[n]),"popLayout"===l&&(e=s.createElement(id,{isPresent:n},e)),s.createElement(ss.Provider,{value:d},e)};function ud(){return new Map}const cd=e=>e.key||"";const dd=({children:e,custom:r,initial:n=!0,onExitComplete:o,exitBeforeEnter:a,presenceAffectsLayout:i=!0,mode:l="sync"})=>{ga(!a,"Replace exitBeforeEnter with mode='wait'");const u=t.useContext(bs).forceRender||od()[0],c=sd(),d=function(e){const r=[];return t.Children.forEach(e,(e=>{t.isValidElement(e)&&r.push(e);})),r}(e);let p=d;const h=t.useRef(new Map).current,f=t.useRef(p),m=t.useRef(new Map).current,g=t.useRef(!0);var v;if(as((()=>{g.current=!1,function(e,t){e.forEach((e=>{const r=cd(e);t.set(r,e);}));}(d,m),f.current=p;})),v=()=>{g.current=!0,m.clear(),h.clear();},t.useEffect((()=>()=>v()),[]),g.current)return s.createElement(s.Fragment,null,p.map((e=>s.createElement(ld,{key:cd(e),isPresent:!0,initial:!!n&&void 0,presenceAffectsLayout:i,mode:l},e))));p=[...p];const y=f.current.map(cd),b=d.map(cd),x=y.length;for(let e=0;e<x;e++){const t=y[e];-1!==b.indexOf(t)||h.has(t)||h.set(t,void 0);}return "wait"===l&&h.size&&(p=[]),h.forEach(((e,t)=>{if(-1!==b.indexOf(t))return;const n=m.get(t);if(!n)return;const a=y.indexOf(t);let g=e;if(!g){const e=()=>{h.delete(t);const e=Array.from(m.keys()).filter((e=>!b.includes(e)));if(e.forEach((e=>m.delete(e))),f.current=d.filter((r=>{const n=cd(r);return n===t||e.includes(n)})),!h.size){if(!1===c.current)return;u(),o&&o();}};g=s.createElement(ld,{key:cd(n),isPresent:!1,onExitComplete:e,custom:r,presenceAffectsLayout:i,mode:l},n),h.set(t,g);}p.splice(a,0,g);})),p=p.map((e=>{const t=e.key;return h.has(t)?e:s.createElement(ld,{key:cd(e),isPresent:!0,presenceAffectsLayout:i,mode:l},e)})),"production"!==process.env.NODE_ENV&&"wait"===l&&p.length>1&&console.warn('You\'re attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.'),s.createElement(s.Fragment,null,h.size?p:p.map((e=>t.cloneElement(e))))},pd=t.createContext(null),hd=e=>!e.isLayoutDirty&&e.willUpdate(!1);function fd(){const e=new Set,t=new WeakMap,r=()=>e.forEach(hd);return {add:n=>{e.add(n),t.set(n,n.addEventListener("willUpdate",r));},remove:n=>{e.delete(n);const s=t.get(n);s&&(s(),t.delete(n)),r();},dirty:r}}const md=e=>!0===e,gd=({children:e,id:r,inherit:n=!0})=>{const o=t.useContext(bs),a=t.useContext(pd),[i,l]=od(),u=t.useRef(null),c=o.id||a;null===u.current&&((e=>md(!0===e)||"id"===e)(n)&&c&&(r=r?c+"-"+r:c),u.current={id:r,group:md(n)&&o.group||fd()});const d=t.useMemo((()=>({...u.current,forceRender:i})),[l]);return s.createElement(bs.Provider,{value:d},e)};class xd{build(e,t){return this.context=t,wd((()=>this.iterateCollection(e)))}*iterateCollection(e){let{children:r,items:n}=e;if("function"==typeof r){if(!n)throw new Error("props.children was a function but props.items is missing");for(let t of e.items)yield*this.getFullNode({value:t},{renderer:r});}else {let e=[];t.Children.forEach(r,(t=>{e.push(t);}));let n=0;for(let t of e){let e=this.getFullNode({element:t,index:n},{});for(let t of e)n++,yield t;}}}getKey(e,t,r,n){if(null!=e.key)return e.key;if("cell"===t.type&&null!=t.key)return `${n}${t.key}`;let s=t.value;if(null!=s){var o;let e=null!==(o=s.key)&&void 0!==o?o:s.id;if(null==e)throw new Error("No key found for item");return e}return n?`${n}.${t.index}`:`$.${t.index}`}getChildState(e,t){return {renderer:t.renderer||e.renderer}}*getFullNode(e,r,n,s){let o=e.element;if(!o&&e.value&&r&&r.renderer){let t=this.cache.get(e.value);if(t&&(!t.shouldInvalidate||!t.shouldInvalidate(this.context)))return t.index=e.index,t.parentKey=s?s.key:null,void(yield t);o=r.renderer(e.value);}if(t.isValidElement(o)){let t=o.type;if("function"!=typeof t&&"function"!=typeof t.getCollectionNode){let e="function"==typeof o.type?o.type.name:o.type;throw new Error(`Unknown element <${e}> in collection.`)}let a=t.getCollectionNode(o.props,this.context),i=e.index,l=a.next();for(;!l.done&&l.value;){let t=l.value;e.index=i;let u=t.key;u||(u=t.element?null:this.getKey(o,e,r,n));let c=[...this.getFullNode({...t,key:u,index:i,wrapper:Pd(e.wrapper,t.wrapper)},this.getChildState(r,t),n?`${n}${o.key}`:o.key,s)];for(let r of c){if(r.value=t.value||e.value,r.value&&this.cache.set(r.value,r),e.type&&r.type!==e.type)throw new Error(`Unsupported type <${Td(r.type)}> in <${Td(s.type)}>. Only <${Td(e.type)}> is supported.`);i++,yield r;}l=a.next(c);}return}if(null==e.key)return;let a=this,i={type:e.type,props:e.props,key:e.key,parentKey:s?s.key:null,value:e.value,level:s?s.level+1:0,index:e.index,rendered:e.rendered,textValue:e.textValue,"aria-label":e["aria-label"],wrapper:e.wrapper,shouldInvalidate:e.shouldInvalidate,hasChildNodes:e.hasChildNodes,childNodes:wd((function*(){if(!e.hasChildNodes)return;let t=0;for(let n of e.childNodes()){null!=n.key&&(n.key=`${i.key}${n.key}`),n.index=t;let e=a.getFullNode(n,a.getChildState(r,n),i.key,i);for(let r of e)t++,yield r;}}))};yield i;}constructor(){this.cache=new WeakMap;}}function wd(e){let t=[],r=null;return {*[Symbol.iterator](){for(let e of t)yield e;r||(r=e());for(let e of r)t.push(e),yield e;}}}function Pd(e,t){return e&&t?r=>e(t(r)):e||(t||void 0)}function Td(e){return e[0].toUpperCase()+e.slice(1)}function Cd(e){return function(e,t){if(t<0)return;let r=0;for(let n of e){if(r===t)return n;r++;}}(e,0)}function Ed(e,t,r){if(t.parentKey===r.parentKey)return t.index-r.index;let n=[...Sd(e,t),t],s=[...Sd(e,r),r],o=n.slice(0,s.length).findIndex(((e,t)=>e!==s[t]));return -1!==o?(t=n[o],r=s[o],t.index-r.index):n.findIndex((e=>e===r))>=0?1:(s.findIndex((e=>e===t)),-1)}function Sd(e,t){let r=[];for(;null!=(null==t?void 0:t.parentKey);)t=e.getItem(t.parentKey),r.unshift(t);return r}class kd extends Set{constructor(e,t,r){super(e),e instanceof kd?(this.anchorKey=t||e.anchorKey,this.currentKey=r||e.currentKey):(this.anchorKey=t,this.currentKey=r);}}function Md(e,t){return e?"all"===e?"all":new kd(e):t}class Ad{get selectionMode(){return this.state.selectionMode}get disallowEmptySelection(){return this.state.disallowEmptySelection}get selectionBehavior(){return this.state.selectionBehavior}setSelectionBehavior(e){this.state.setSelectionBehavior(e);}get isFocused(){return this.state.isFocused}setFocused(e){this.state.setFocused(e);}get focusedKey(){return this.state.focusedKey}get childFocusStrategy(){return this.state.childFocusStrategy}setFocusedKey(e,t){(null==e||this.collection.getItem(e))&&this.state.setFocusedKey(e,t);}get selectedKeys(){return "all"===this.state.selectedKeys?new Set(this.getSelectAllKeys()):this.state.selectedKeys}get rawSelection(){return this.state.selectedKeys}isSelected(e){return "none"!==this.state.selectionMode&&(e=this.getKey(e),"all"===this.state.selectedKeys?this.canSelectItem(e):this.state.selectedKeys.has(e))}get isEmpty(){return "all"!==this.state.selectedKeys&&0===this.state.selectedKeys.size}get isSelectAll(){if(this.isEmpty)return !1;if("all"===this.state.selectedKeys)return !0;if(null!=this._isSelectAll)return this._isSelectAll;let e=this.getSelectAllKeys(),t=this.state.selectedKeys;return this._isSelectAll=e.every((e=>t.has(e))),this._isSelectAll}get firstSelectedKey(){let e=null;for(let t of this.state.selectedKeys){let r=this.collection.getItem(t);(!e||r&&Ed(this.collection,r,e)<0)&&(e=r);}return null==e?void 0:e.key}get lastSelectedKey(){let e=null;for(let t of this.state.selectedKeys){let r=this.collection.getItem(t);(!e||r&&Ed(this.collection,r,e)>0)&&(e=r);}return null==e?void 0:e.key}get disabledKeys(){return this.state.disabledKeys}get disabledBehavior(){return this.state.disabledBehavior}extendSelection(e){if("none"===this.selectionMode)return;if("single"===this.selectionMode)return void this.replaceSelection(e);let t;if(e=this.getKey(e),"all"===this.state.selectedKeys)t=new kd([e],e,e);else {let r=this.state.selectedKeys,n=r.anchorKey||e;t=new kd(r,n,e);for(let s of this.getKeyRange(n,r.currentKey||e))t.delete(s);for(let r of this.getKeyRange(e,n))this.canSelectItem(r)&&t.add(r);}this.state.setSelectedKeys(t);}getKeyRange(e,t){let r=this.collection.getItem(e),n=this.collection.getItem(t);return r&&n?Ed(this.collection,r,n)<=0?this.getKeyRangeInternal(e,t):this.getKeyRangeInternal(t,e):[]}getKeyRangeInternal(e,t){let r=[],n=e;for(;n;){let e=this.collection.getItem(n);if((e&&"item"===e.type||"cell"===e.type&&this.allowsCellSelection)&&r.push(n),n===t)return r;n=this.collection.getKeyAfter(n);}return []}getKey(e){let t=this.collection.getItem(e);if(!t)return e;if("cell"===t.type&&this.allowsCellSelection)return e;for(;"item"!==t.type&&null!=t.parentKey;)t=this.collection.getItem(t.parentKey);return t&&"item"===t.type?t.key:null}toggleSelection(e){if("none"===this.selectionMode)return;if("single"===this.selectionMode&&!this.isSelected(e))return void this.replaceSelection(e);if(null==(e=this.getKey(e)))return;let t=new kd("all"===this.state.selectedKeys?this.getSelectAllKeys():this.state.selectedKeys);t.has(e)?t.delete(e):this.canSelectItem(e)&&(t.add(e),t.anchorKey=e,t.currentKey=e),this.disallowEmptySelection&&0===t.size||this.state.setSelectedKeys(t);}replaceSelection(e){if("none"===this.selectionMode)return;if(null==(e=this.getKey(e)))return;let t=this.canSelectItem(e)?new kd([e],e,e):new kd;this.state.setSelectedKeys(t);}setSelectedKeys(e){if("none"===this.selectionMode)return;let t=new kd;for(let r of e)if(r=this.getKey(r),null!=r&&(t.add(r),"single"===this.selectionMode))break;this.state.setSelectedKeys(t);}getSelectAllKeys(){let e=[],t=r=>{for(;r;){if(this.canSelectItem(r)){let o=this.collection.getItem(r);"item"===o.type&&e.push(r),o.hasChildNodes&&(this.allowsCellSelection||"item"!==o.type)&&t(Cd((n=o,s=this.collection,"function"==typeof s.getChildren?s.getChildren(n.key):n.childNodes)).key);}r=this.collection.getKeyAfter(r);}var n,s;};return t(this.collection.getFirstKey()),e}selectAll(){this.isSelectAll||"multiple"!==this.selectionMode||this.state.setSelectedKeys("all");}clearSelection(){!this.disallowEmptySelection&&("all"===this.state.selectedKeys||this.state.selectedKeys.size>0)&&this.state.setSelectedKeys(new kd);}toggleSelectAll(){this.isSelectAll?this.clearSelection():this.selectAll();}select(e,t){"none"!==this.selectionMode&&("single"===this.selectionMode?this.isSelected(e)&&!this.disallowEmptySelection?this.toggleSelection(e):this.replaceSelection(e):"toggle"===this.selectionBehavior||t&&("touch"===t.pointerType||"virtual"===t.pointerType)?this.toggleSelection(e):this.replaceSelection(e));}isSelectionEqual(e){if(e===this.state.selectedKeys)return !0;let t=this.selectedKeys;if(e.size!==t.size)return !1;for(let r of e)if(!t.has(r))return !1;for(let r of t)if(!e.has(r))return !1;return !0}canSelectItem(e){if("none"===this.state.selectionMode||this.state.disabledKeys.has(e))return !1;let t=this.collection.getItem(e);return !(!t||"cell"===t.type&&!this.allowsCellSelection)}isDisabled(e){return this.state.disabledKeys.has(e)&&"all"===this.state.disabledBehavior}isLink(e){var t,r;return !!(null===(r=this.collection.getItem(e))||void 0===r||null===(t=r.props)||void 0===t?void 0:t.href)}constructor(e,t,r){var n;this.collection=e,this.state=t,this.allowsCellSelection=null!==(n=null==r?void 0:r.allowsCellSelection)&&void 0!==n&&n,this._isSelectAll=null;}}var Dd=()=>e.jsxs("svg",{"aria-hidden":"true",fill:"none",height:"80%",role:"presentation",viewBox:"0 0 24 24",width:"80%",children:[e.jsx("path",{d:"M12 2C9.38 2 7.25 4.13 7.25 6.75C7.25 9.32 9.26 11.4 11.88 11.49C11.96 11.48 12.04 11.48 12.1 11.49C12.12 11.49 12.13 11.49 12.15 11.49C12.16 11.49 12.16 11.49 12.17 11.49C14.73 11.4 16.74 9.32 16.75 6.75C16.75 4.13 14.62 2 12 2Z",fill:"currentColor"}),e.jsx("path",{d:"M17.0809 14.1489C14.2909 12.2889 9.74094 12.2889 6.93094 14.1489C5.66094 14.9989 4.96094 16.1489 4.96094 17.3789C4.96094 18.6089 5.66094 19.7489 6.92094 20.5889C8.32094 21.5289 10.1609 21.9989 12.0009 21.9989C13.8409 21.9989 15.6809 21.5289 17.0809 20.5889C18.3409 19.7389 19.0409 18.5989 19.0409 17.3589C19.0309 16.1289 18.3409 14.9889 17.0809 14.1489Z",fill:"currentColor"})]}),[Id,Vd]=vn({name:"AvatarGroupContext",strict:!1}),Ld=Boolean(null==globalThis?void 0:globalThis.document)?t.useLayoutEffect:t.useEffect;function Kd(e={}){var r,n,s,o,a;const i=Vd(),l=!!i,{as:u,ref:c,src:d,name:p,icon:h,classNames:f,fallback:m,alt:g=p||"avatar",imgRef:v,color:y=(null!=(r=null==i?void 0:i.color)?r:"default"),radius:b=(null!=(n=null==i?void 0:i.radius)?n:"full"),size:x=(null!=(s=null==i?void 0:i.size)?s:"md"),isBordered:w=null!=(o=null==i?void 0:i.isBordered)&&o,isDisabled:P=null!=(a=null==i?void 0:i.isDisabled)&&a,isFocusable:T=!1,getInitials:C=un,ignoreFallback:E=!1,showFallback:S=!1,ImgComponent:k="img",imgProps:M,className:D,onError:I,...V}=e,L=u||"span",K=yn(c),R=yn(v),{isFocusVisible:N,isFocused:j,focusProps:F}=St(),{isHovered:O,hoverProps:B}=ht({isDisabled:P}),W=function(e={}){const{loading:r,src:n,srcSet:s,onLoad:o,onError:a,crossOrigin:i,sizes:l,ignoreFallback:u}=e,[c,d]=t.useState("pending");t.useEffect((()=>{d(n?"loading":"pending");}),[n]);const p=t.useRef(),h=t.useCallback((()=>{if(!n)return;f();const e=new Image;e.src=n,i&&(e.crossOrigin=i),s&&(e.srcset=s),l&&(e.sizes=l),r&&(e.loading=r),e.onload=e=>{f(),d("loaded"),null==o||o(e);},e.onerror=e=>{f(),d("failed"),null==a||a(e);},p.current=e;}),[n,i,s,l,o,a,r]),f=()=>{p.current&&(p.current.onload=null,p.current.onerror=null,p.current=null);};return Ld((()=>{if(!u)return "loading"===c&&h(),()=>{f();}}),[c,h,u]),u?"loaded":c}({src:d,onError:I,ignoreFallback:E}),z="loaded"===W,U=(!d||!z)&&S,H=t.useMemo((()=>{var e;return an({color:y,radius:b,size:x,isBordered:w,isDisabled:P,isInGroup:l,isInGridGroup:null!=(e=null==i?void 0:i.isGrid)&&e})}),[y,b,x,w,P,l,null==i?void 0:i.isGrid]),$=pn(null==f?void 0:f.base,D),_=t.useMemo((()=>T||"button"===u),[T,u]),G=t.useCallback(((e={})=>({ref:K,tabIndex:_?0:-1,"data-hover":gn(O),"data-focus":gn(j),"data-focus-visible":gn(N),className:H.base({class:pn($,null==e?void 0:e.className)}),...A(V,B,_?F:{})})),[_,H,$,F,V]),q=t.useCallback(((e={})=>({ref:R,src:d,"data-loaded":gn(z),className:H.img({class:null==f?void 0:f.img}),...A(M,e)})),[H,z,M,d,R]);return {Component:L,ImgComponent:k,src:d,alt:g,icon:h,name:p,imgRef:R,slots:H,classNames:f,fallback:m,isImgLoaded:z,showFallback:U,ignoreFallback:E,getInitials:C,getAvatarProps:G,getImageProps:q}}var Rd=It(((r,n)=>{const{Component:s,ImgComponent:o,src:a,icon:i=e.jsx(Dd,{}),alt:l,classNames:u,slots:c,name:d,showFallback:p,fallback:h,getInitials:f,getAvatarProps:m,getImageProps:g}=Kd({...r,ref:n}),v=t.useMemo((()=>!p&&a?null:h?e.jsx("div",{"aria-label":l,className:c.fallback({class:null==u?void 0:u.fallback}),role:"img",children:h}):d?e.jsx("span",{"aria-label":l,className:c.name({class:null==u?void 0:u.name}),role:"img",children:f(d)}):e.jsx("span",{"aria-label":l,className:c.icon({class:null==u?void 0:u.icon}),role:"img",children:i})),[p,a,h,d,u]);return e.jsxs(s,{...m(),children:[a&&e.jsx(o,{...g(),alt:l}),v]})}));Rd.displayName="NextUI.Avatar";var [jd,Fd]=vn({name:"ButtonGroupContext",strict:!1});var Od=t=>{const{ripples:r=[],motionProps:n,color:s="currentColor",style:o,onClear:a}=t;return e.jsx(e.Fragment,{children:r.map((t=>{const r=(i=.01*t.size,l=.2,u=t.size>100?.75:.5,Math.min(Math.max(i,l),u));var i,l,u;return e.jsx(dd,{mode:"popLayout",children:e.jsx(nd.span,{animate:{transform:"scale(2)",opacity:0},className:"nextui-ripple",exit:{opacity:0},initial:{transform:"scale(0)",opacity:.35},style:{position:"absolute",backgroundColor:s,borderRadius:"100%",transformOrigin:"center",pointerEvents:"none",zIndex:10,top:t.y,left:t.x,width:`${t.size}px`,height:`${t.size}px`,...o},transition:{duration:r},onAnimationComplete:()=>{a(t.key);},...n})},t.key)}))})};Od.displayName="NextUI.Ripple";var Bd=Od;function Wd(e){var r,n,s,o,a,i,l,u;const c=Fd(),d=!!c,{ref:p,as:h,children:f,startContent:m,endContent:g,autoFocus:v,className:y,spinner:b,fullWidth:x=null!=(r=null==c?void 0:c.fullWidth)&&r,size:w=(null!=(n=null==c?void 0:c.size)?n:"md"),color:P=(null!=(s=null==c?void 0:c.color)?s:"default"),variant:T=(null!=(o=null==c?void 0:c.variant)?o:"solid"),disableAnimation:C=null!=(a=null==c?void 0:c.disableAnimation)&&a,radius:E=(null==c?void 0:c.radius),disableRipple:k=null!=(i=null==c?void 0:c.disableRipple)&&i,isDisabled:M=null!=(l=null==c?void 0:c.isDisabled)&&l,isIconOnly:D=null!=(u=null==c?void 0:c.isIconOnly)&&u,isLoading:I=!1,spinnerPlacement:V="start",onPress:L,onClick:R,...N}=e,j=h||"button",F="string"==typeof j,O=yn(p),{isFocusVisible:B,isFocused:W,focusProps:z}=St({autoFocus:v}),U=M||I,H=t.useMemo((()=>ln({size:w,color:P,variant:T,radius:E,fullWidth:x,isDisabled:U,isInGroup:d,disableAnimation:C,isIconOnly:D,className:y})),[w,P,T,E,x,U,d,D,C,y]),{onClick:$,onClear:_,ripples:G}=function(e={}){const[r,n]=t.useState([]);return {ripples:r,onClick:t.useCallback((e=>{const t=e.currentTarget,r=Math.max(t.clientWidth,t.clientHeight),s=t.getBoundingClientRect();n((t=>{return [...t,{key:(n=t.length.toString(),`${n}-${Math.floor(1e6*Math.random())}`),size:r,x:e.clientX-s.x-r/2,y:e.clientY-s.y-r/2}];var n;}));}),[]),onClear:t.useCallback((e=>{n((t=>t.filter((t=>t.key!==e))));}),[]),...e}}(),q=t.useCallback((e=>{k||U||C||O.current&&$(e);}),[k,U,C,O,$]),{buttonProps:Y,isPressed:X}=function(e,t){let r,{elementType:n="button",isDisabled:s,onPress:o,onPressStart:a,onPressEnd:i,onPressChange:l,preventFocusOnPress:u,allowFocusWhenDisabled:c,onClick:d,href:p,target:h,rel:f,type:m="button",allowTextSelectionOnPress:g}=e;r="button"===n?{type:m,disabled:s}:{role:"button",tabIndex:s?void 0:0,href:"a"===n&&s?void 0:p,target:"a"===n?h:void 0,type:"input"===n?m:void 0,disabled:"input"===n?s:void 0,"aria-disabled":s&&"input"!==n?s:void 0,rel:"a"===n?f:void 0};let{pressProps:v,isPressed:y}=$n({onPressStart:a,onPressEnd:i,onPressChange:l,onPress:o,isDisabled:s,preventFocusOnPress:u,allowTextSelectionOnPress:g,ref:t}),{focusableProps:b}=Mt(e,t);c&&(b.tabIndex=s?-1:b.tabIndex);let x=A(b,v,K(e,{labelable:!0}));return {isPressed:y,buttonProps:A(r,x,{"aria-haspopup":e["aria-haspopup"],"aria-expanded":e["aria-expanded"],"aria-controls":e["aria-controls"],"aria-pressed":e["aria-pressed"],onClick:e=>{null==d||d(e);}})}}({elementType:h,isDisabled:U,onPress:L,onClick:S(R,q),...N},O),{isHovered:Z,hoverProps:J}=ht({isDisabled:U}),Q=t.useCallback(((e={})=>({"data-disabled":gn(U),"data-focus":gn(W),"data-pressed":gn(X),"data-focus-visible":gn(B),"data-hover":gn(Z),"data-loading":gn(I),...A(Y,z,J,Cn(N,{enabled:F}),Cn(e))})),[I,U,W,X,F,B,Z,Y,z,J,N]),ee=e=>t.isValidElement(e)?t.cloneElement(e,{"aria-hidden":!0,focusable:!1,tabIndex:-1}):null,te=ee(m),re=ee(g),ne=t.useMemo((()=>({sm:"sm",md:"sm",lg:"md"}[w])),[w]),se=t.useCallback((()=>({ripples:G,onClear:_})),[G,_]);return {Component:j,children:f,domRef:O,spinner:b,styles:H,startContent:te,endContent:re,isLoading:I,spinnerPlacement:V,spinnerSize:ne,disableRipple:k,getButtonProps:Q,getRippleProps:se,isIconOnly:D}}var zd=It(((r,n)=>{const{slots:s,classNames:o,label:a,getSpinnerProps:i}=function(e){const[r,n]=Vt(e,Qr.variantKeys),{children:s,className:o,classNames:a,label:i,...l}=r,u=t.useMemo((()=>Qr({...n})),[...Object.values(n)]),c=pn(null==a?void 0:a.base,o),d=i||s,p=t.useMemo((()=>d&&"string"==typeof d?d:l["aria-label"]?"":"Loading"),[s,d,l["aria-label"]]),h=t.useCallback((()=>({"aria-label":p,className:u.base({class:c}),...l})),[p,u,c,l]);return {label:d,slots:u,classNames:a,getSpinnerProps:h}}({...r});return e.jsxs("div",{ref:n,...i(),children:[e.jsxs("div",{className:s.wrapper({class:null==o?void 0:o.wrapper}),children:[e.jsx("i",{className:s.circle1({class:null==o?void 0:o.circle1})}),e.jsx("i",{className:s.circle2({class:null==o?void 0:o.circle2})})]}),a&&e.jsx("span",{className:s.label(),children:a})]})}));zd.displayName="NextUI.Spinner";var Ud=zd,Hd=It(((t,r)=>{const{Component:n,domRef:s,children:o,styles:a,spinnerSize:i,spinner:l=e.jsx(Ud,{color:"current",size:i}),spinnerPlacement:u,startContent:c,endContent:d,isLoading:p,disableRipple:h,getButtonProps:f,getRippleProps:m,isIconOnly:g}=Wd({...t,ref:r});return e.jsxs(n,{ref:s,className:a,...f(),children:[c,p&&"start"===u&&l,p&&g?null:o,p&&"end"===u&&l,d,!h&&e.jsx(Bd,{...m()})]})}));Hd.displayName="NextUI.Button";var _d=It(((r,n)=>{const{Component:s,children:o,slots:a,classNames:i,isDot:l,isCloseable:u,startContent:c,endContent:d,getCloseButtonProps:p,getChipProps:h}=function(e){const[r,n]=Vt(e,on$1.variantKeys),{ref:s,as:o,children:a,avatar:i,startContent:l,endContent:u,onClose:c,classNames:d,className:p,...h}=r,f=o||"div",m=yn(s),g=pn(null==d?void 0:d.base,p),v=!!c,y="dot"===e.variant,{focusProps:b,isFocusVisible:x}=St(),w=t.useMemo((()=>"string"==typeof a&&1===(null==a?void 0:a.length)),[a]),P=t.useMemo((()=>!!i||!!l),[i,l]),T=t.useMemo((()=>!!u||v),[u,v]),C=t.useMemo((()=>on$1({...n,hasStartContent:P,hasEndContent:T,isOneChar:w,isCloseable:v,isCloseButtonFocusVisible:x})),[...Object.values(n),x,P,T,w,v]),{pressProps:E}=$n({isDisabled:!!(null==e?void 0:e.isDisabled),onPress:c}),S=e=>t.isValidElement(e)?t.cloneElement(e,{className:pn("max-h-[80%]",e.props.className)}):null;return {Component:f,children:a,slots:C,classNames:d,isDot:y,isCloseable:v,startContent:(k=i,(t.isValidElement(k)?t.cloneElement(k,{className:C.avatar({class:null==d?void 0:d.avatar})}):null)||S(l)),endContent:S(u),getCloseButtonProps:()=>({role:"button",tabIndex:0,className:C.closeButton({class:null==d?void 0:d.closeButton}),...A(E,b)}),getChipProps:()=>({ref:m,className:C.base({class:g}),...h})};var k;}({...r,ref:n}),f=t.useMemo((()=>l&&!c?e.jsx("span",{className:a.dot({class:null==i?void 0:i.dot})}):c),[a,c,l]),m=t.useMemo((()=>u?e.jsx("span",{...p(),children:d||e.jsx(ts,{})}):d),[d,u,p]);return e.jsxs(s,{...h(),children:[f,e.jsx("span",{className:a.content({class:null==i?void 0:i.content}),children:o}),m]})}));_d.displayName="NextUI.Chip";var Gd=_d;function qd(e,r,n){let{validationBehavior:s,focus:o}=e;b((()=>{if("native"===s&&(null==n?void 0:n.current)){let e=r.realtimeValidation.isInvalid?r.realtimeValidation.validationErrors.join(" ")||"Invalid value.":"";n.current.setCustomValidity(e),n.current.hasAttribute("title")||(n.current.title=""),r.realtimeValidation.isInvalid||r.updateValidation(function(e){return {isInvalid:!e.validity.valid,validationDetails:Yd(e),validationErrors:e.validationMessage?[e.validationMessage]:[]}}(n.current));}}));let a=x((()=>{r.resetValidation();})),i=x((e=>{var t;r.displayValidation.isInvalid||r.commitValidation();let s=null==n||null===(t=n.current)||void 0===t?void 0:t.form;var a,i;!e.defaultPrevented&&n&&s&&function(e){for(let t=0;t<e.elements.length;t++){let r=e.elements[t];if(!r.validity.valid)return r}return null}(s)===n.current&&(o?o():null===(a=n.current)||void 0===a||a.focus(),He=i="keyboard",Xe(i,null));e.preventDefault();})),l=x((()=>{r.commitValidation();}));t.useEffect((()=>{let e=null==n?void 0:n.current;if(!e)return;let t=e.form;return e.addEventListener("invalid",i),e.addEventListener("change",l),null==t||t.addEventListener("reset",a),()=>{e.removeEventListener("invalid",i),e.removeEventListener("change",l),null==t||t.removeEventListener("reset",a);}}),[n,i,l,a,s]);}function Yd(e){let t=e.validity;return {badInput:t.badInput,customError:t.customError,patternMismatch:t.patternMismatch,rangeOverflow:t.rangeOverflow,rangeUnderflow:t.rangeUnderflow,stepMismatch:t.stepMismatch,tooLong:t.tooLong,tooShort:t.tooShort,typeMismatch:t.typeMismatch,valueMissing:t.valueMissing,valid:t.valid}}const Xd={badInput:!1,customError:!1,patternMismatch:!1,rangeOverflow:!1,rangeUnderflow:!1,stepMismatch:!1,tooLong:!1,tooShort:!1,typeMismatch:!1,valueMissing:!1,valid:!0},Zd={...Xd,customError:!0,valid:!1},Jd={isInvalid:!1,validationDetails:Xd,validationErrors:[]},Qd=t.createContext({}),ep="__formValidationState"+Date.now();function tp(e){if(e[ep]){let{realtimeValidation:t,displayValidation:r,updateValidation:n,resetValidation:s,commitValidation:o}=e[ep];return {realtimeValidation:t,displayValidation:r,updateValidation:n,resetValidation:s,commitValidation:o}}return function(e){let{isInvalid:r,validationState:n,name:s,value:o,builtinValidation:a,validate:i,validationBehavior:l="aria"}=e;n&&(r||(r="invalid"===n));let u=r?{isInvalid:!0,validationErrors:[],validationDetails:Zd}:null,c=t.useMemo((()=>np(function(e,t){if("function"==typeof e){let r=e(t);if(r&&"boolean"!=typeof r)return rp(r)}return []}(i,o))),[i,o]);(null==a?void 0:a.validationDetails.valid)&&(a=null);let d=t.useContext(Qd),p=t.useMemo((()=>s?Array.isArray(s)?s.flatMap((e=>rp(d[e]))):rp(d[s]):[]),[d,s]),[h,f]=t.useState(d),[m,g]=t.useState(!1);d!==h&&(f(d),g(!1));let v=t.useMemo((()=>np(m?[]:p)),[m,p]),y=t.useRef(Jd),[b,x]=t.useState(Jd),w=t.useRef(Jd),P=()=>{if(!T)return;C(!1);let e=c||a||y.current;sp(e,w.current)||(w.current=e,x(e));},[T,C]=t.useState(!1);return t.useEffect(P),{realtimeValidation:u||v||c||a||Jd,displayValidation:"native"===l?u||v||b:u||v||c||a||b,updateValidation(e){"aria"!==l||sp(b,e)?y.current=e:x(e);},resetValidation(){let e=Jd;sp(e,w.current)||(w.current=e,x(e)),"native"===l&&C(!1),g(!0);},commitValidation(){"native"===l&&C(!0),g(!0);}}}(e)}function rp(e){return e?Array.isArray(e)?e:[e]:[]}function np(e){return e.length?{isInvalid:!0,validationErrors:e,validationDetails:Zd}:null}function sp(e,t){return e===t||e&&t&&e.isInvalid===t.isInvalid&&e.validationErrors.length===t.validationErrors.length&&e.validationErrors.every(((e,r)=>e===t.validationErrors[r]))&&Object.entries(e.validationDetails).every((([e,r])=>t.validationDetails[e]===r))}function op(e){let{description:t,errorMessage:r,isInvalid:n,validationState:s}=e,{labelProps:o,fieldProps:a}=function(e){let{id:t,label:r,"aria-labelledby":n,"aria-label":s,labelElementType:o="label"}=e;t=T(t);let a=T(),i={};return r?(n=n?`${a} ${n}`:a,i={id:a,htmlFor:"label"===o?t:void 0}):n||s||console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility"),{labelProps:i,fieldProps:J({id:t,"aria-label":s,"aria-labelledby":n})}}(e),i=E([Boolean(t),Boolean(r),n,s]),l=E([Boolean(t),Boolean(r),n,s]);return a=A(a,{"aria-describedby":[i,l,e["aria-describedby"]].filter(Boolean).join(" ")||void 0}),{labelProps:o,fieldProps:a,descriptionProps:{id:i},errorMessageProps:{id:l}}}const ap=e=>"object"==typeof e&&null!=e&&1===e.nodeType,ip=(e,t)=>(!t||"hidden"!==e)&&"visible"!==e&&"clip"!==e,lp=(e,t)=>{if(e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth){const r=getComputedStyle(e,null);return ip(r.overflowY,t)||ip(r.overflowX,t)||(e=>{const t=(e=>{if(!e.ownerDocument||!e.ownerDocument.defaultView)return null;try{return e.ownerDocument.defaultView.frameElement}catch(e){return null}})(e);return !!t&&(t.clientHeight<e.scrollHeight||t.clientWidth<e.scrollWidth)})(e)}return !1},up=(e,t,r,n,s,o,a,i)=>o<e&&a>t||o>e&&a<t?0:o<=e&&i<=r||a>=t&&i>=r?o-e-n:a>t&&i<r||o<e&&i>r?a-t+s:0,cp=e=>{const t=e.parentElement;return null==t?e.getRootNode().host||null:t},dp=(e,t)=>{var r,n,s,o;if("undefined"==typeof document)return [];const{scrollMode:a,block:i,inline:l,boundary:u,skipOverflowHiddenElements:c}=t,d="function"==typeof u?u:e=>e!==u;if(!ap(e))throw new TypeError("Invalid target");const p=document.scrollingElement||document.documentElement,h=[];let f=e;for(;ap(f)&&d(f);){if(f=cp(f),f===p){h.push(f);break}null!=f&&f===document.body&&lp(f)&&!lp(document.documentElement)||null!=f&&lp(f,c)&&h.push(f);}const m=null!=(n=null==(r=window.visualViewport)?void 0:r.width)?n:innerWidth,g=null!=(o=null==(s=window.visualViewport)?void 0:s.height)?o:innerHeight,{scrollX:v,scrollY:y}=window,{height:b,width:x,top:w,right:P,bottom:T,left:C}=e.getBoundingClientRect(),{top:E,right:S,bottom:k,left:M}=(e=>{const t=window.getComputedStyle(e);return {top:parseFloat(t.scrollMarginTop)||0,right:parseFloat(t.scrollMarginRight)||0,bottom:parseFloat(t.scrollMarginBottom)||0,left:parseFloat(t.scrollMarginLeft)||0}})(e);let A="start"===i||"nearest"===i?w-E:"end"===i?T+k:w+b/2-E+k,D="center"===l?C+x/2-M+S:"end"===l?P+S:C-M;const I=[];for(let e=0;e<h.length;e++){const t=h[e],{height:r,width:n,top:s,right:o,bottom:u,left:c}=t.getBoundingClientRect();if("if-needed"===a&&w>=0&&C>=0&&T<=g&&P<=m&&w>=s&&T<=u&&C>=c&&P<=o)return I;const d=getComputedStyle(t),f=parseInt(d.borderLeftWidth,10),E=parseInt(d.borderTopWidth,10),S=parseInt(d.borderRightWidth,10),k=parseInt(d.borderBottomWidth,10);let M=0,V=0;const L="offsetWidth"in t?t.offsetWidth-t.clientWidth-f-S:0,K="offsetHeight"in t?t.offsetHeight-t.clientHeight-E-k:0,R="offsetWidth"in t?0===t.offsetWidth?0:n/t.offsetWidth:0,N="offsetHeight"in t?0===t.offsetHeight?0:r/t.offsetHeight:0;if(p===t)M="start"===i?A:"end"===i?A-g:"nearest"===i?up(y,y+g,g,E,k,y+A,y+A+b,b):A-g/2,V="start"===l?D:"center"===l?D-m/2:"end"===l?D-m:up(v,v+m,m,f,S,v+D,v+D+x,x),M=Math.max(0,M+y),V=Math.max(0,V+v);else {M="start"===i?A-s-E:"end"===i?A-u+k+K:"nearest"===i?up(s,u,r,E,k+K,A,A+b,b):A-(s+r/2)+K/2,V="start"===l?D-c-f:"center"===l?D-(c+n/2)+L/2:"end"===l?D-o+S+L:up(c,o,n,f,S+L,D,D+x,x);const{scrollLeft:e,scrollTop:a}=t;M=0===N?0:Math.max(0,Math.min(a+M/N,t.scrollHeight-r/N+K)),V=0===R?0:Math.max(0,Math.min(e+V/R,t.scrollWidth-n/R+L)),A+=a-M,D+=e-V;}I.push({el:t,top:M,left:V});}return I};function pp(e,t){if(!e.isConnected||!(e=>{let t=e;for(;t&&t.parentNode;){if(t.parentNode===document)return !0;t=t.parentNode instanceof ShadowRoot?t.parentNode.host:t.parentNode;}return !1})(e))return;if((e=>"object"==typeof e&&"function"==typeof e.behavior)(t))return t.behavior(dp(e,t));const r="boolean"==typeof t||null==t?void 0:t.behavior;for(const{el:n,top:s,left:o}of dp(e,(e=>!1===e?{block:"end",inline:"nearest"}:(e=>e===Object(e)&&0!==Object.keys(e).length)(e)?e:{block:"start",inline:"nearest"})(t)))n.scroll({top:s,left:o,behavior:r});}let hp=Math.round(1e10*Math.random()),fp=0;const mp=new WeakMap;function gp(e){const{as:r,ref:n,classNames:s,children:o,label:a,value:i,name:l,size:u="md",color:c="primary",isDisabled:d=!1,disableAnimation:p=!1,orientation:h="vertical",isRequired:f=!1,validationState:m,isInvalid:v="invalid"===m,isReadOnly:y,errorMessage:b,description:x,className:w,onChange:P,onValueChange:C,...E}=e,S=r||"div",k=yn(n),M=t.useMemo((()=>({...E,value:i,name:l,"aria-label":cn(E["aria-label"],a),isRequired:f,isReadOnly:y,isInvalid:v,orientation:h,onChange:C})),[E,i,l,a,f,y,v,h,C]),D=function(e){let r=t.useMemo((()=>e.name||`radio-group-${hp}-${++fp}`),[e.name]);var n;let[s,o]=g(e.value,null!==(n=e.defaultValue)&&void 0!==n?n:null,e.onChange),[a,i]=t.useState(null),l=tp({...e,value:s}),u=l.displayValidation.isInvalid;return {...l,name:r,selectedValue:s,setSelectedValue:t=>{e.isReadOnly||e.isDisabled||(o(t),l.commitValidation());},lastFocusedValue:a,setLastFocusedValue:i,isDisabled:e.isDisabled||!1,isReadOnly:e.isReadOnly||!1,isRequired:e.isRequired||!1,validationState:e.validationState||(u?"invalid":null),isInvalid:u}}(M),{labelProps:I,radioGroupProps:V,errorMessageProps:L,descriptionProps:R}=function(e,t){let{name:r,isReadOnly:n,isRequired:s,isDisabled:o,orientation:a="vertical",validationBehavior:i="aria"}=e,{direction:l}=ye(),{isInvalid:u,validationErrors:c,validationDetails:d}=t.displayValidation,{labelProps:p,fieldProps:h,descriptionProps:f,errorMessageProps:m}=op({...e,labelElementType:"span",isInvalid:t.isInvalid,errorMessage:e.errorMessage||c}),g=K(e,{labelable:!0}),{focusWithinProps:v}=it({onBlurWithin(){t.selectedValue||t.setLastFocusedValue(null);}}),y=T(r);return mp.set(t,{name:y,descriptionId:f.id,errorMessageId:m.id,validationBehavior:i}),{radioGroupProps:A(g,{role:"radiogroup",onKeyDown:e=>{let r;switch(e.key){case"ArrowRight":r="rtl"===l&&"vertical"!==a?"prev":"next";break;case"ArrowLeft":r="rtl"===l&&"vertical"!==a?"next":"prev";break;case"ArrowDown":r="next";break;case"ArrowUp":r="prev";break;default:return}e.preventDefault();let n,s=Tt(e.currentTarget,{from:e.target});"next"===r?(n=s.nextNode(),n||(s.currentNode=e.currentTarget,n=s.firstChild())):(n=s.previousNode(),n||(s.currentNode=e.currentTarget,n=s.lastChild())),n&&(n.focus(),t.setSelectedValue(n.value));},"aria-invalid":t.isInvalid||void 0,"aria-errormessage":e["aria-errormessage"],"aria-readonly":n||void 0,"aria-required":s||void 0,"aria-disabled":o||void 0,"aria-orientation":a,...h,...v}),labelProps:p,descriptionProps:f,errorMessageProps:m,isInvalid:u,validationErrors:c,validationDetails:d}}(M,D),N=t.useMemo((()=>({size:u,color:c,groupState:D,isRequired:f,isInvalid:v,isDisabled:d,disableAnimation:p,onChange:P})),[u,c,f,d,v,P,p,D.name,null==D?void 0:D.isDisabled,null==D?void 0:D.isReadOnly,null==D?void 0:D.isRequired,null==D?void 0:D.selectedValue,null==D?void 0:D.lastFocusedValue]),j=t.useMemo((()=>nn({isRequired:f,isInvalid:v,disableAnimation:p})),[v,f,p]),F=pn(null==s?void 0:s.base,w),O=t.useCallback((()=>({ref:k,className:j.base({class:F}),...A(V,E)})),[k,j,F,V,E]),B=t.useCallback((()=>({className:j.label({class:null==s?void 0:s.label}),...I})),[j,null==s?void 0:s.label,I,null==s?void 0:s.label]),W=t.useCallback((()=>({className:j.wrapper({class:null==s?void 0:s.wrapper}),role:"presentation","data-orientation":h})),[j,null==s?void 0:s.wrapper,h,j.wrapper]),z=t.useCallback(((e={})=>({...e,...R,className:j.description({class:pn(null==s?void 0:s.description,null==e?void 0:e.className)})})),[j,null==s?void 0:s.description,R,j.description]),U=t.useCallback(((e={})=>({...e,...L,className:j.errorMessage({class:pn(null==s?void 0:s.errorMessage,null==e?void 0:e.className)})})),[j,null==s?void 0:s.errorMessage,L]);return {Component:S,children:o,label:a,context:N,errorMessage:b,description:x,getGroupProps:O,getLabelProps:B,getWrapperProps:W,getDescriptionProps:z,getErrorMessageProps:U}}var[vp,yp]=vn({name:"RadioGroupContext",strict:!1}),bp=It(((t,r)=>{const{Component:n,children:s,label:o,context:a,description:i,errorMessage:l,getGroupProps:u,getLabelProps:c,getWrapperProps:d,getDescriptionProps:p,getErrorMessageProps:h}=gp({...t,ref:r});return e.jsxs(n,{...u(),children:[o&&e.jsx("span",{...c(),children:o}),e.jsx("div",{...d(),children:e.jsx(vp,{value:a,children:s})}),l?e.jsx("div",{...h(),children:l}):i?e.jsx("div",{...p(),children:i}):null]})}));bp.displayName="NextUI.RadioGroup";var xp=bp;function wp(e){var r,n,s,o;const a=yp(),{as:i,ref:l,classNames:u,id:c,value:d,children:p,description:h,size:f=(null!=(r=null==a?void 0:a.size)?r:"md"),color:m=(null!=(n=null==a?void 0:a.color)?n:"primary"),isDisabled:g=null!=(s=null==a?void 0:a.isDisabled)&&s,disableAnimation:v=null!=(o=null==a?void 0:a.disableAnimation)&&o,onChange:y=(null==a?void 0:a.onChange),autoFocus:b=!1,className:x,...w}=e;a&&mn&&("checked"in w&&fn('Remove props "checked" if in the Radio.Group.',"Radio"),void 0===d&&fn('Props "value" must be defined if in the Radio.Group.',"Radio"));const P=i||"label",T=yn(l),C=t.useRef(null),E=t.useId(),k=t.useMemo((()=>{var e;return null!=(e=a.isRequired)&&e}),[a.isRequired]),M=a.isInvalid,D=t.useMemo((()=>{const e=w["aria-label"]||"string"==typeof p?p:void 0,t=w["aria-describedby"]||"string"==typeof h?h:void 0;return {id:c,isRequired:k,isDisabled:g,"aria-label":e,"aria-labelledby":w["aria-labelledby"]||E,"aria-describedby":t}}),[E,c,g,k]),{inputProps:I,isDisabled:V,isSelected:L,isPressed:R}=function(e,t,r){let{value:n,children:s,"aria-label":o,"aria-labelledby":a}=e;const i=e.isDisabled||t.isDisabled;null!=s||null!=o||null!=a||console.warn("If you do not provide children, you must specify an aria-label for accessibility");let l=t.selectedValue===n,{pressProps:u,isPressed:c}=Ie({isDisabled:i}),{focusableProps:d}=Mt(A(e,{onFocus:()=>t.setLastFocusedValue(n)}),r),p=A(u,d),h=K(e,{labelable:!0}),f=-1;null!=t.selectedValue?t.selectedValue===n&&(f=0):t.lastFocusedValue!==n&&null!=t.lastFocusedValue||(f=0),i&&(f=void 0);let{name:m,descriptionId:g,errorMessageId:v,validationBehavior:y}=mp.get(t);return ue(r,t.selectedValue,t.setSelectedValue),qd({validationBehavior:y},t,r),{inputProps:A(h,{...p,type:"radio",name:m,tabIndex:f,disabled:i,required:t.isRequired&&"native"===y,checked:l,value:n,onChange:e=>{e.stopPropagation(),t.setSelectedValue(n);},"aria-describedby":[e["aria-describedby"],t.isInvalid?v:null,g].filter(Boolean).join(" ")||void 0}),isDisabled:i,isSelected:l,isPressed:c}}({value:d,children:p,...a,...D},a.groupState,C),{focusProps:N,isFocused:j,isFocusVisible:F}=St({autoFocus:b}),O=V||I.readOnly,[B,W]=t.useState(!1),{pressProps:z}=$n({isDisabled:O,onPressStart(e){"keyboard"!==e.pointerType&&W(!0);},onPressEnd(e){"keyboard"!==e.pointerType&&W(!1);}}),{hoverProps:U,isHovered:H}=ht({isDisabled:O}),$=!O&&(B||R),_=t.useMemo((()=>rn({color:m,size:f,isInvalid:M,isDisabled:V,disableAnimation:v})),[m,f,V,M,v]),G=pn(null==u?void 0:u.base,x),q=t.useCallback(((e={})=>({...e,ref:T,className:_.base({class:G}),"data-disabled":gn(V),"data-focus":gn(j),"data-focus-visible":gn(F),"data-selected":gn(L),"data-invalid":gn(M),"data-hover":gn(H),"data-pressed":gn($),"data-hover-unselected":gn(H&&!L),"data-readonly":gn(I.readOnly),"aria-required":gn(k),...A(U,z,w)})),[_,G,T,V,j,F,L,M,H,$,I.readOnly,k,w]),Y=t.useCallback(((e={})=>({...e,"aria-hidden":!0,className:pn(_.wrapper({class:pn(null==u?void 0:u.wrapper,e.className)}))})),[_,null==u?void 0:u.wrapper]),X=t.useCallback(((e={})=>({...e,ref:C,required:k,...A(I,N),onChange:S(I.onChange,y)})),[I,N,k,y]),Z=t.useCallback(((e={})=>({...e,id:E,className:_.label({class:null==u?void 0:u.label})})),[_,null==u?void 0:u.label,V,L,M]),J=t.useCallback(((e={})=>({...e,className:_.labelWrapper({class:null==u?void 0:u.labelWrapper})})),[_,null==u?void 0:u.labelWrapper]),Q=t.useCallback(((e={})=>({...e,className:_.control({class:null==u?void 0:u.control})})),[_,null==u?void 0:u.control]);return {Component:P,children:p,slots:_,classNames:u,description:h,isSelected:L,isDisabled:V,isInvalid:M,isFocusVisible:F,getBaseProps:q,getWrapperProps:Y,getInputProps:X,getLabelProps:Z,getLabelWrapperProps:J,getControlProps:Q}}var Pp=It(((t,r)=>{const{Component:n,children:s,slots:o,classNames:a,description:i,getBaseProps:l,getWrapperProps:u,getInputProps:c,getLabelProps:d,getLabelWrapperProps:p,getControlProps:h}=wp({...t,ref:r});return e.jsxs(n,{...l(),children:[e.jsx(Dt,{children:e.jsx("input",{...c()})}),e.jsx("span",{...u(),children:e.jsx("span",{...h()})}),e.jsxs("div",{...p(),children:[s&&e.jsx("span",{...d(),children:s}),i&&e.jsx("span",{className:o.description({class:null==a?void 0:a.description}),children:i})]})]})}));Pp.displayName="NextUI.Radio";var Tp=Pp;function Cp(e,t,r){let{inputProps:n,isSelected:s,isPressed:o,isDisabled:a,isReadOnly:i}=function(e,t,r){let{isDisabled:n=!1,isReadOnly:s=!1,value:o,name:a,children:i,"aria-label":l,"aria-labelledby":u,validationState:c="valid",isInvalid:d}=e;null!=i||null!=l||null!=u||console.warn("If you do not provide children, you must specify an aria-label for accessibility");let{pressProps:p,isPressed:h}=Ie({isDisabled:n}),{focusableProps:f}=Mt(e,r),m=A(p,f),g=K(e,{labelable:!0});return ue(r,t.isSelected,t.setSelected),{inputProps:A(g,{"aria-invalid":d||"invalid"===c||void 0,"aria-errormessage":e["aria-errormessage"],"aria-controls":e["aria-controls"],"aria-readonly":s||void 0,onChange:e=>{e.stopPropagation(),t.setSelected(e.target.checked);},disabled:n,...null==o?{}:{value:o},name:a,type:"checkbox",...m}),isSelected:t.isSelected,isPressed:h,isDisabled:n,isReadOnly:s,isInvalid:d||"invalid"===c}}(e,t,r);return {inputProps:{...n,role:"switch",checked:s},isSelected:s,isPressed:o,isDisabled:a,isReadOnly:i}}function Ep(e={}){const[r,n]=Vt(e,tn.variantKeys),{ref:s,as:o,name:a,value:i="",isReadOnly:l=!1,autoFocus:u=!1,startContent:c,endContent:d,defaultSelected:p,isSelected:h,children:f,thumbIcon:m,className:v,classNames:y,onChange:b,onValueChange:x,...w}=r,P=o||"label",T=t.useRef(null),C=function(e,r){const n=t.useRef(null);return t.useImperativeHandle(e,(()=>function(e,t=e){return {...(r=e,{UNSAFE_getDOMNode:()=>r.current}),focus(){t.current&&t.current.focus();}};var r;}(n,r))),n}(s,T),E=t.useId(),k=t.useMemo((()=>{const t=w["aria-label"]||"string"==typeof f?f:void 0;return {name:a,value:i,children:f,autoFocus:u,defaultSelected:p,isSelected:h,isDisabled:!!e.isDisabled,isReadOnly:l,"aria-label":t,"aria-labelledby":w["aria-labelledby"]||E,onChange:x}}),[i,a,E,f,u,l,h,p,e.isDisabled,w["aria-label"],w["aria-labelledby"],x]),M=function(e={}){let{isReadOnly:t}=e,[r,n]=g(e.isSelected,e.defaultSelected||!1,e.onChange);return {isSelected:r,setSelected:function(e){t||n(e);},toggle:function(){t||n(!r);}}}(k),{inputProps:D,isPressed:I,isReadOnly:V}=Cp(k,M,T),{focusProps:L,isFocused:K,isFocusVisible:R}=St({autoFocus:D.autoFocus}),{hoverProps:N,isHovered:j}=ht({isDisabled:D.disabled}),F=k.isDisabled||V,[O,B]=t.useState(!1),{pressProps:W}=$n({isDisabled:F,onPressStart(e){"keyboard"!==e.pointerType&&B(!0);},onPressEnd(e){"keyboard"!==e.pointerType&&B(!1);}}),z=!F&&(O||I),U=D.checked,H=D.disabled,$=t.useMemo((()=>tn({...n})),[...Object.values(n)]),_=pn(null==y?void 0:y.base,v),G=t.useCallback(((e={})=>({...e,"aria-hidden":!0,className:pn($.wrapper({class:pn(null==y?void 0:y.wrapper,null==e?void 0:e.className)}))})),[$,null==y?void 0:y.wrapper]),q=t.useCallback(((e={})=>({...e,className:$.thumb({class:pn(null==y?void 0:y.thumb,null==e?void 0:e.className)})})),[$,null==y?void 0:y.thumb]),Y=t.useCallback(((e={})=>({...e,id:E,className:$.label({class:pn(null==y?void 0:y.label,null==e?void 0:e.className)})})),[$,null==y?void 0:y.label,H,U]),X=t.useCallback(((e={includeStateProps:!1})=>A({width:"1em",height:"1em",className:$.thumbIcon({class:pn(null==y?void 0:y.thumbIcon)})},e.includeStateProps?{isSelected:U}:{})),[$,null==y?void 0:y.thumbIcon,U]),Z=t.useCallback(((e={})=>({width:"1em",height:"1em",...e,className:$.startContent({class:pn(null==y?void 0:y.startContent,null==e?void 0:e.className)})})),[$,null==y?void 0:y.startContent,U]),J=t.useCallback(((e={})=>({width:"1em",height:"1em",...e,className:$.endContent({class:pn(null==y?void 0:y.endContent,null==e?void 0:e.className)})})),[$,null==y?void 0:y.endContent,U]);return {Component:P,slots:$,classNames:y,domRef:C,children:f,thumbIcon:m,startContent:c,endContent:d,isHovered:j,isSelected:U,isPressed:z,isFocused:K,isFocusVisible:R,isDisabled:H,getBaseProps:e=>({...A(N,W,w,e),ref:C,className:$.base({class:pn(_,null==e?void 0:e.className)}),"data-disabled":gn(H),"data-selected":gn(U),"data-readonly":gn(V),"data-focus":gn(K),"data-focus-visible":gn(R),"data-hover":gn(j),"data-pressed":gn(z)}),getWrapperProps:G,getInputProps:(e={})=>({...A(D,L,e),ref:T,id:D.id,onChange:S(b,D.onChange)}),getLabelProps:Y,getThumbProps:q,getThumbIconProps:X,getStartContentProps:Z,getEndContentProps:J}}var Sp=It(((r,n)=>{const{Component:s,children:o,startContent:a,endContent:i,thumbIcon:l,getBaseProps:u,getInputProps:c,getWrapperProps:d,getThumbProps:p,getThumbIconProps:h,getLabelProps:f,getStartContentProps:m,getEndContentProps:g}=Ep({...r,ref:n}),v="function"==typeof l?l(h({includeStateProps:!0})):l&&t.cloneElement(l,h()),y=a&&t.cloneElement(a,m()),b=i&&t.cloneElement(i,g());return e.jsxs(s,{...u(),children:[e.jsx(Dt,{children:e.jsx("input",{...c()})}),e.jsxs("span",{...d(),children:[a&&y,e.jsx("span",{...p(),children:l&&v}),i&&b]}),o&&e.jsx("span",{...f(),children:o})]})}));Sp.displayName="NextUI.Switch";function Mp(e){const[r,n]=Vt(e,sn.variantKeys),{ref:s,as:o,label:a,baseRef:i,wrapperRef:l,description:u,errorMessage:c,className:d,classNames:p,autoFocus:h,startContent:f,endContent:m,onClear:v,onChange:y,validationState:b,innerWrapperRef:x,onValueChange:w=(()=>{}),...P}=r,T=t.useCallback((e=>{w(null!=e?e:"");}),[w]),[C,E]=g(r.value,r.defaultValue,T),[k,D]=t.useState(!1),I=o||"div",V=!!C,L=V||k,R=pn(null==p?void 0:p.base,d,V?"is-filled":""),N=e.isMultiline,j=yn(s),F=yn(i),O=yn(l),B=yn(x),W=t.useCallback((()=>{E(""),j.current&&(j.current.value="",j.current.focus()),null==v||v();}),[j,E,v]),{labelProps:z,inputProps:U,descriptionProps:H,errorMessageProps:$}=function(e,r){let{inputElementType:n="input",isDisabled:s=!1,isRequired:o=!1,isReadOnly:a=!1,type:i="text",validationBehavior:l="aria"}=e,[u,c]=g(e.value,e.defaultValue||"",e.onChange),{focusableProps:d}=Mt(e,r),p=tp({...e,value:u}),{isInvalid:h,validationErrors:f,validationDetails:m}=p.displayValidation,{labelProps:v,fieldProps:y,descriptionProps:b,errorMessageProps:x}=op({...e,isInvalid:h,errorMessage:e.errorMessage||f}),w=K(e,{labelable:!0});const P={type:i,pattern:e.pattern};return ue(r,u,c),qd(e,p,r),t.useEffect((()=>{if(r.current instanceof M(r.current).HTMLTextAreaElement){let e=r.current;Object.defineProperty(e,"defaultValue",{get:()=>e.value,set:()=>{},configurable:!0});}}),[r]),{labelProps:v,inputProps:A(w,"input"===n&&P,{disabled:s,readOnly:a,required:o&&"native"===l,"aria-required":o&&"aria"===l||void 0,"aria-invalid":h||void 0,"aria-errormessage":e["aria-errormessage"],"aria-activedescendant":e["aria-activedescendant"],"aria-autocomplete":e["aria-autocomplete"],"aria-haspopup":e["aria-haspopup"],value:u,onChange:e=>c(e.target.value),autoComplete:e.autoComplete,maxLength:e.maxLength,minLength:e.minLength,name:e.name,placeholder:e.placeholder,inputMode:e.inputMode,onCopy:e.onCopy,onCut:e.onCut,onPaste:e.onPaste,onCompositionEnd:e.onCompositionEnd,onCompositionStart:e.onCompositionStart,onCompositionUpdate:e.onCompositionUpdate,onSelect:e.onSelect,onBeforeInput:e.onBeforeInput,onInput:e.onInput,...d,...y}),descriptionProps:b,errorMessageProps:x,isInvalid:h,validationErrors:f,validationDetails:m}}({...e,"aria-label":cn(null==e?void 0:e["aria-label"],null==e?void 0:e.label,null==e?void 0:e.placeholder),inputElementType:N?"textarea":"input",onChange:E},j),{isFocusVisible:_,isFocused:G,focusProps:q}=St({autoFocus:h,isTextInput:!0}),{isHovered:Y,hoverProps:X}=ht({isDisabled:!!(null==e?void 0:e.isDisabled)}),{focusProps:Z,isFocusVisible:J}=St(),{focusWithinProps:Q}=it({onFocusWithinChange:D}),{pressProps:ee}=Ie({isDisabled:!!(null==e?void 0:e.isDisabled),onPress:W}),te="invalid"===b||e.isInvalid,re=t.useMemo((()=>{var t;return e.labelPlacement&&"inside"!==e.labelPlacement||a?null!=(t=e.labelPlacement)?t:"inside":"outside"}),[e.labelPlacement,a]),ne=!!v||e.isClearable,se=!!a||!!u||!!c,oe=!!r.placeholder,ae=!!a,ie=!!u||!!c,le="outside"===re||"outside-left"===re,ce="inside"===re,de=!!j.current&&((!j.current.value||""===j.current.value||!C||""===C)&&oe),pe="outside-left"===re,he=!!f,fe=!!le&&("outside-left"===re||oe||"outside"===re&&he),me="outside"===re&&!oe&&!he,ge=t.useMemo((()=>sn({...n,isInvalid:te,isClearable:ne})),[...Object.values(n),te,ne,he]),ve=t.useCallback(((t={})=>({ref:F,className:ge.base({class:R}),"data-slot":"base","data-filled":gn(V||oe||he||de),"data-filled-within":gn(L||oe||he||de),"data-focus-within":gn(k),"data-focus-visible":gn(_),"data-readonly":gn(e.isReadOnly),"data-focus":gn(G),"data-hover":gn(Y),"data-required":gn(e.isRequired),"data-invalid":gn(te),"data-disabled":gn(e.isDisabled),"data-has-elements":gn(se),"data-has-helper":gn(ie),"data-has-label":gn(ae),"data-has-value":gn(!de),...Q,...t})),[ge,R,V,G,Y,te,ie,ae,se,de,he,k,_,L,oe,Q,e.isReadOnly,e.isRequired,e.isDisabled]),ye=t.useCallback(((e={})=>({"data-slot":"label",className:ge.label({class:null==p?void 0:p.label}),...z,...e})),[ge,z,null==p?void 0:p.label]),be=t.useCallback(((t={})=>({ref:j,"data-slot":"input","data-filled":gn(V),"data-filled-within":gn(L),"data-has-start-content":gn(he),"data-has-end-content":gn(!!m),className:ge.input({class:pn(null==p?void 0:p.input,C?"is-filled":"")}),...A(q,U,Cn(P,{enabled:!0,labelable:!0,omitEventNames:new Set(Object.keys(U))}),t),required:e.isRequired,"aria-readonly":gn(e.isReadOnly),"aria-required":gn(e.isRequired),onChange:S(U.onChange,y)})),[ge,C,q,U,P,V,L,he,m,null==p?void 0:p.input,e.isReadOnly,e.isRequired,y]),xe=t.useCallback(((e={})=>({ref:O,"data-slot":"input-wrapper","data-hover":gn(Y),"data-focus-visible":gn(_),"data-focus":gn(G),className:ge.inputWrapper({class:pn(null==p?void 0:p.inputWrapper,C?"is-filled":"")}),...A(e,X),onClick:e=>{j.current&&e.currentTarget===e.target&&j.current.focus();},style:{cursor:"text",...e.style}})),[ge,Y,_,G,C,null==p?void 0:p.inputWrapper]),we=t.useCallback(((e={})=>({...e,ref:B,"data-slot":"inner-wrapper",onClick:e=>{j.current&&e.currentTarget===e.target&&j.current.focus();},className:ge.innerWrapper({class:pn(null==p?void 0:p.innerWrapper,null==e?void 0:e.className)})})),[ge,null==p?void 0:p.innerWrapper]),Pe=t.useCallback(((e={})=>({...e,"data-slot":"main-wrapper",className:ge.mainWrapper({class:pn(null==p?void 0:p.mainWrapper,null==e?void 0:e.className)})})),[ge,null==p?void 0:p.mainWrapper]),Te=t.useCallback(((e={})=>({...e,"data-slot":"helper-wrapper",className:ge.helperWrapper({class:pn(null==p?void 0:p.helperWrapper,null==e?void 0:e.className)})})),[ge,null==p?void 0:p.helperWrapper]),Ce=t.useCallback(((e={})=>({...e,...H,"data-slot":"description",className:ge.description({class:pn(null==p?void 0:p.description,null==e?void 0:e.className)})})),[ge,null==p?void 0:p.description]),Ee=t.useCallback(((e={})=>({...e,...$,"data-slot":"error-message",className:ge.errorMessage({class:pn(null==p?void 0:p.errorMessage,null==e?void 0:e.className)})})),[ge,$,null==p?void 0:p.errorMessage]),Se=t.useCallback(((e={})=>({...e,role:"button",tabIndex:0,"data-slot":"clear-button","data-focus-visible":gn(J),className:ge.clearButton({class:pn(null==p?void 0:p.clearButton,null==e?void 0:e.className)}),...A(ee,Z)})),[ge,J,ee,Z,null==p?void 0:p.clearButton]);return {Component:I,classNames:p,domRef:j,label:a,description:u,startContent:f,endContent:m,labelPlacement:re,isClearable:ne,isInvalid:te,hasHelper:ie,hasStartContent:he,isLabelOutside:fe,isOutsideLeft:pe,isLabelOutsideAsPlaceholder:me,shouldLabelBeOutside:le,shouldLabelBeInside:ce,hasPlaceholder:oe,errorMessage:c,getBaseProps:ve,getLabelProps:ye,getInputProps:be,getMainWrapperProps:Pe,getInputWrapperProps:xe,getInnerWrapperProps:we,getHelperWrapperProps:Te,getDescriptionProps:Ce,getErrorMessageProps:Ee,getClearButtonProps:Se}}var Ap=It(((r,n)=>{const{Component:s,label:o,description:a,isClearable:i,startContent:l,endContent:u,labelPlacement:c,hasHelper:d,isOutsideLeft:p,shouldLabelBeOutside:h,errorMessage:f,getBaseProps:m,getLabelProps:g,getInputProps:v,getInnerWrapperProps:y,getInputWrapperProps:b,getMainWrapperProps:x,getHelperWrapperProps:w,getDescriptionProps:P,getErrorMessageProps:T,getClearButtonProps:C}=Mp({...r,ref:n}),E=o?e.jsx("label",{...g(),children:o}):null,S=t.useMemo((()=>i?e.jsx("span",{...C(),children:u||e.jsx(ts,{})}):u),[i,C]),k=t.useMemo((()=>d?e.jsx("div",{...w(),children:f?e.jsx("div",{...T(),children:f}):a?e.jsx("div",{...P(),children:a}):null}):null),[d,f,a,w,T,P]),M=t.useMemo((()=>l||S?e.jsxs("div",{...y(),children:[l,e.jsx("input",{...v()}),S]}):e.jsx("div",{...y(),children:e.jsx("input",{...v()})})),[l,S,v,y]),A=t.useMemo((()=>h?e.jsxs("div",{...x(),children:[e.jsxs("div",{...b(),children:[p?null:E,M]}),k]}):e.jsxs(e.Fragment,{children:[e.jsxs("div",{...b(),children:[E,M]}),k]})),[c,k,h,E,M,f,a,x,b,T,P]);return e.jsxs(s,{...m(),children:[p?E:null,A]})}));Ap.displayName="NextUI.Input";var Dp=Ap;function Ip(){return Ip=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n]);}return e},Ip.apply(this,arguments)}var Vp=function(e,t){"function"!=typeof e?e.current=t:e(t);},Lp=function(){},Kp=["cacheMeasurements","maxRows","minRows","onChange","onHeightChange"],Rp=function(e,r){e.cacheMeasurements,e.maxRows,e.minRows;var n=e.onChange,o=void 0===n?Lp:n;e.onHeightChange;var a=function(e,t){if(null==e)return {};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,Kp);a.value;var i=function(e,r){var n=t.useRef();return t.useCallback((function(t){e.current=t,n.current&&Vp(n.current,null),n.current=r,r&&Vp(r,t);}),[r])}(s.useRef(null),r);return s.useRef(0),s.useRef(),s.createElement("textarea",Ip({},a,{onChange:o,ref:i}))},Np=s.forwardRef(Rp),jp=It((({style:r,minRows:n=3,maxRows:s=8,cacheMeasurements:o=!1,disableAutosize:a=!1,onHeightChange:i,...l},u)=>{const{Component:c,label:d,description:p,startContent:h,endContent:f,hasHelper:m,shouldLabelBeOutside:g,shouldLabelBeInside:v,errorMessage:y,getBaseProps:b,getLabelProps:x,getInputProps:w,getInnerWrapperProps:P,getInputWrapperProps:T,getHelperWrapperProps:C,getDescriptionProps:E,getErrorMessageProps:S}=Mp({...l,ref:u,isMultiline:!0}),[k,M]=t.useState(n>1),[D,I]=t.useState(!1),V=d?e.jsx("label",{...x(),children:d}):null,L=w(),K=a?e.jsx("textarea",{...L,style:A(L.style,null!=r?r:{})}):e.jsx(Np,{...L,cacheMeasurements:o,"data-hide-scroll":gn(!D),maxRows:s,minRows:n,style:A(L.style,null!=r?r:{}),onHeightChange:(e,t)=>{if(1===n&&M(e>=2*t.rowHeight),s>n){const r=e>=s*t.rowHeight;I(r);}null==i||i(e,t);}}),R=t.useMemo((()=>h||f?e.jsxs("div",{...P(),children:[h,K,f]}):e.jsx("div",{...P(),children:K})),[h,L,f,P]);return e.jsxs(c,{...b(),children:[g?V:null,e.jsxs("div",{...T(),"data-has-multiple-rows":gn(k),children:[v?V:null,R]}),m?e.jsx("div",{...C(),children:y?e.jsx("div",{...S(),children:y}):p?e.jsx("div",{...E(),children:p}):null}):null]})}));jp.displayName="NextUI.Textarea";var Fp=jp;const Op=new WeakMap;function Bp(e,t,r){return "string"==typeof t&&(t=t.replace(/\s+/g,"")),`${Op.get(e)}-${r}-${t}`}function Wp(e,r,n){var s;let{key:o,isDisabled:a,shouldSelectOnPressUp:i}=e,{selectionManager:l,selectedKey:u}=r,c=o===u,d=a||r.isDisabled||r.disabledKeys.has(o),{itemProps:p,isPressed:h}=function(e){let{selectionManager:r,key:n,ref:s,shouldSelectOnPressUp:o,shouldUseVirtualFocus:a,focus:i,isDisabled:l,onAction:u,allowsDifferentPressOrigin:c,linkBehavior:d="action"}=e,p=$(),h=e=>{if("keyboard"===e.pointerType&&En(e))r.toggleSelection(n);else {if("none"===r.selectionMode)return;if(r.isLink(n)){if("selection"===d)return p.open(s.current,e),void r.setSelectedKeys(r.selectedKeys);if("override"===d||"none"===d)return}"single"===r.selectionMode?r.isSelected(n)&&!r.disallowEmptySelection?r.toggleSelection(n):r.replaceSelection(n):e&&e.shiftKey?r.extendSelection(n):"toggle"===r.selectionBehavior||e&&(Sn(e)||"touch"===e.pointerType||"virtual"===e.pointerType)?r.toggleSelection(n):r.replaceSelection(n);}};t.useEffect((()=>{n===r.focusedKey&&r.isFocused&&!a&&(i?i():document.activeElement!==s.current&&vt(s.current));}),[s,n,r.focusedKey,r.childFocusStrategy,r.isFocused,a]),l=l||r.isDisabled(n);let f={};a||l?l&&(f.onMouseDown=e=>{e.preventDefault();}):f={tabIndex:n===r.focusedKey?0:-1,onFocus(e){e.target===s.current&&r.setFocusedKey(n);}};let m=r.isLink(n)&&"override"===d,g=r.isLink(n)&&"selection"!==d&&"none"!==d,v=!l&&r.canSelectItem(n)&&!m,y=(u||g)&&!l,b=y&&("replace"===r.selectionBehavior?!v:!v||r.isEmpty),x=y&&v&&"replace"===r.selectionBehavior,w=b||x,P=t.useRef(null),T=w&&v,C=t.useRef(!1),E=t.useRef(!1),S=e=>{u&&u(),g&&p.open(s.current,e);},k={};o?(k.onPressStart=e=>{P.current=e.pointerType,C.current=T,"keyboard"!==e.pointerType||w&&!Dn()||h(e);},c?(k.onPressUp=b?null:e=>{"keyboard"!==e.pointerType&&v&&h(e);},k.onPress=b?S:null):k.onPress=e=>{if(b||x&&"mouse"!==e.pointerType){if("keyboard"===e.pointerType&&!An())return;S(e);}else "keyboard"!==e.pointerType&&v&&h(e);}):(k.onPressStart=e=>{P.current=e.pointerType,C.current=T,E.current=b,v&&("mouse"===e.pointerType&&!b||"keyboard"===e.pointerType&&(!y||Dn()))&&h(e);},k.onPress=e=>{("touch"===e.pointerType||"pen"===e.pointerType||"virtual"===e.pointerType||"keyboard"===e.pointerType&&w&&An()||"mouse"===e.pointerType&&E.current)&&(w?S(e):v&&h(e));}),f["data-key"]=n,k.preventFocusOnPress=a;let{pressProps:M,isPressed:D}=Ie(k),I=x?e=>{"mouse"===P.current&&(e.stopPropagation(),e.preventDefault(),S(e));}:void 0,{longPressProps:V}=gt({isDisabled:!T,onLongPress(e){"touch"===e.pointerType&&(h(e),r.setSelectionBehavior("toggle"));}}),L=r.isLink(n)?e=>{_.isOpening||e.preventDefault();}:void 0;return {itemProps:A(f,v||b?M:{},T?V:{},{onDoubleClick:I,onDragStartCapture:e=>{"touch"===P.current&&C.current&&e.preventDefault();},onClick:L}),isPressed:D,isSelected:r.isSelected(n),isFocused:r.isFocused&&r.focusedKey===n,isDisabled:l,allowsSelection:v,hasAction:w}}({selectionManager:l,key:o,ref:n,isDisabled:d,shouldSelectOnPressUp:i,linkBehavior:"selection"}),f=Bp(r,o,"tab"),m=Bp(r,o,"tabpanel"),{tabIndex:g}=p,v=r.collection.getItem(o),y=K(null==v?void 0:v.props,{isLink:!!(null==v||null===(s=v.props)||void 0===s?void 0:s.href)});return delete y.id,{tabProps:A(y,p,{id:f,"aria-selected":c,"aria-disabled":d||void 0,"aria-controls":c?m:void 0,tabIndex:d?void 0:g,role:"tab"}),isSelected:c,isDisabled:d,isPressed:h}}function zp(e,r,n){let s=function(e,r){let n=null==r?void 0:r.isDisabled,[s,o]=t.useState(!1);return b((()=>{if((null==e?void 0:e.current)&&!n){let t=()=>{if(e.current){let t=Tt(e.current,{tabbable:!0});o(!!t.nextNode());}};t();let r=new MutationObserver(t);return r.observe(e.current,{subtree:!0,childList:!0,attributes:!0,attributeFilter:["tabIndex","disabled"]}),()=>{r.disconnect();}}})),!n&&s}(n)?void 0:0;var o;const a=Bp(r,null!==(o=e.id)&&void 0!==o?o:null==r?void 0:r.selectedKey,"tabpanel");return {tabPanelProps:A(J({...e,id:a,"aria-labelledby":Bp(r,null==r?void 0:r.selectedKey,"tab")}),{tabIndex:s,role:"tabpanel","aria-describedby":e["aria-describedby"],"aria-details":e["aria-details"]})}}class Up{getKeyLeftOf(e){return this.flipDirection?this.getNextKey(e):this.getPreviousKey(e)}getKeyRightOf(e){return this.flipDirection?this.getPreviousKey(e):this.getNextKey(e)}getKeyAbove(e){return this.getPreviousKey(e)}getKeyBelow(e){return this.getNextKey(e)}getFirstKey(){let e=this.collection.getFirstKey();return this.disabledKeys.has(e)&&(e=this.getNextKey(e)),e}getLastKey(){let e=this.collection.getLastKey();return this.disabledKeys.has(e)&&(e=this.getPreviousKey(e)),e}getNextKey(e){do{null==(e=this.collection.getKeyAfter(e))&&(e=this.collection.getFirstKey());}while(this.disabledKeys.has(e));return e}getPreviousKey(e){do{null==(e=this.collection.getKeyBefore(e))&&(e=this.collection.getLastKey());}while(this.disabledKeys.has(e));return e}constructor(e,t,r,n=new Set){this.collection=e,this.flipDirection="rtl"===t&&"horizontal"===r,this.disabledKeys=n;}}var Hp=It(((t,r)=>{var n,s,o;const{as:a,state:i,className:l,slots:u,classNames:c,...d}=t,p=a||"div",h=yn(r),{tabPanelProps:f}=zp(t,i,h),{focusProps:m,isFocused:g,isFocusVisible:v}=St(),y=i.selectedItem,b=null==(n=null==y?void 0:y.props)?void 0:n.children,x=pn(null==c?void 0:c.panel,l,null==(s=null==y?void 0:y.props)?void 0:s.className);return b?e.jsx(p,{ref:h,"data-focus":g,"data-focus-visible":v,...A(f,m,d),className:null==(o=u.panel)?void 0:o.call(u,{class:x}),"data-slot":"panel",children:b}):null}));Hp.displayName="NextUI.TabPanel";var $p=Hp,_p=It(((r,n)=>{var s;const{className:o,as:a,item:i,state:l,classNames:u,isDisabled:c,listRef:d,slots:p,motionProps:h,disableAnimation:f,disableCursorAnimation:m,shouldSelectOnPressUp:g,onClick:v,...y}=r,{key:b}=i,x=yn(n),w=a||(r.href?"a":"button"),P="string"==typeof w,{tabProps:T,isSelected:C,isDisabled:E,isPressed:k}=Wp({key:b,isDisabled:c,shouldSelectOnPressUp:g},l,x),M=c||E,{focusProps:D,isFocused:I,isFocusVisible:V}=St(),{hoverProps:L,isHovered:K}=ht({isDisabled:M}),R=pn(null==u?void 0:u.tab,o),[,N]=function(e={}){const{rerender:r=!1,delay:n=0}=e,s=t.useRef(!1),[o,a]=t.useState(!1);return t.useEffect((()=>{s.current=!0;let e=null;return r&&(n>0?e=setTimeout((()=>{a(!0);}),n):a(!0)),()=>{s.current=!1,r&&a(!1),e&&clearTimeout(e);}}),[r]),[t.useCallback((()=>s.current),[]),o]}({rerender:!0});return e.jsxs(w,{ref:x,"data-disabled":gn(E),"data-focus":gn(I),"data-focus-visible":gn(V),"data-hover":gn(K),"data-hover-unselected":gn((K||k)&&!C),"data-pressed":gn(k),"data-selected":gn(C),"data-slot":"tab",...A(T,M?{}:{...D,...L},Cn(y,{enabled:P,omitPropNames:new Set(["title"])})),className:null==(s=p.tab)?void 0:s.call(p,{class:R}),title:null==y?void 0:y.titleValue,type:"button"===w?"button":void 0,onClick:()=>{S(v,T.onClick),(null==x?void 0:x.current)&&(null==d?void 0:d.current)&&pp(x.current,{scrollMode:"if-needed",behavior:"smooth",block:"end",inline:"end",boundary:null==d?void 0:d.current});},children:[C&&!f&&!m&&N?e.jsx(nd.span,{className:p.cursor({class:null==u?void 0:u.cursor}),"data-slot":"cursor",layoutDependency:!1,layoutId:"cursor",transition:{type:"spring",bounce:.15,duration:.5},...h}):null,e.jsx("div",{className:p.tabContent({class:null==u?void 0:u.tabContent}),"data-slot":"tabContent",children:i.rendered})]})}));_p.displayName="NextUI.Tab";var Gp=_p;class qp{*[Symbol.iterator](){yield*this.iterable;}get size(){return this.keyMap.size}getKeys(){return this.keyMap.keys()}getKeyBefore(e){let t=this.keyMap.get(e);return t?t.prevKey:null}getKeyAfter(e){let t=this.keyMap.get(e);return t?t.nextKey:null}getFirstKey(){return this.firstKey}getLastKey(){return this.lastKey}getItem(e){return this.keyMap.get(e)}at(e){const t=[...this.getKeys()];return this.getItem(t[e])}getChildren(e){let t=this.keyMap.get(e);return (null==t?void 0:t.childNodes)||[]}constructor(e){this.keyMap=new Map,this.iterable=e;let t,r=e=>{if(this.keyMap.set(e.key,e),e.childNodes&&"section"===e.type)for(let t of e.childNodes)r(t);};for(let t of e)r(t);let n=0;for(let[e,r]of this.keyMap)t?(t.nextKey=e,r.prevKey=t.key):(this.firstKey=e,r.prevKey=void 0),"item"===r.type&&(r.index=n++),t=r,t.nextKey=void 0;this.lastKey=null==t?void 0:t.key;}}function Yp(e){let{filter:r}=e,n=function(e){let{selectionMode:r="none",disallowEmptySelection:n,allowDuplicateSelectionEvents:s,selectionBehavior:o="toggle",disabledBehavior:a="all"}=e,i=t.useRef(!1),[,l]=t.useState(!1),u=t.useRef(null),c=t.useRef(null),[,d]=t.useState(null),p=t.useMemo((()=>Md(e.selectedKeys)),[e.selectedKeys]),h=t.useMemo((()=>Md(e.defaultSelectedKeys,new kd)),[e.defaultSelectedKeys]),[f,m]=g(p,h,e.onSelectionChange),v=t.useMemo((()=>e.disabledKeys?new Set(e.disabledKeys):new Set),[e.disabledKeys]),[y,b]=t.useState(o);"replace"===o&&"toggle"===y&&"object"==typeof f&&0===f.size&&b("replace");let x=t.useRef(o);return t.useEffect((()=>{o!==x.current&&(b(o),x.current=o);}),[o]),{selectionMode:r,disallowEmptySelection:n,selectionBehavior:y,setSelectionBehavior:b,get isFocused(){return i.current},setFocused(e){i.current=e,l(e);},get focusedKey(){return u.current},get childFocusStrategy(){return c.current},setFocusedKey(e,t="first"){u.current=e,c.current=t,d(e);},selectedKeys:f,setSelectedKeys(e){!s&&function(e,t){if(e.size!==t.size)return !1;for(let r of e)if(!t.has(r))return !1;return !0}(e,f)||m(e);},disabledKeys:v,disabledBehavior:a}}(e),s=t.useMemo((()=>e.disabledKeys?new Set(e.disabledKeys):new Set),[e.disabledKeys]),o=t.useCallback((e=>new qp(r?r(e):e)),[r]),a=t.useMemo((()=>({suppressTextValueWarning:e.suppressTextValueWarning})),[e.suppressTextValueWarning]),i=function(e,r,n){let s=t.useMemo((()=>new xd),[]),{children:o,items:a,collection:i}=e;return t.useMemo((()=>{if(i)return i;let e=s.build({children:o,items:a},n);return r(e)}),[s,o,a,i,n,r])}(e,o,a),l=t.useMemo((()=>new Ad(i,n)),[i,n]);const u=t.useRef(null);return t.useEffect((()=>{if(null!=n.focusedKey&&!i.getItem(n.focusedKey)){const e=u.current.getItem(n.focusedKey),t=[...u.current.getKeys()].map((e=>{const t=u.current.getItem(e);return "item"===t.type?t:null})).filter((e=>null!==e)),r=[...i.getKeys()].map((e=>{const t=i.getItem(e);return "item"===t.type?t:null})).filter((e=>null!==e)),s=t.length-r.length;let o,a=Math.min(s>1?Math.max(e.index-s+1,0):e.index,r.length-1);for(;a>=0;){if(!l.isDisabled(r[a].key)){o=r[a];break}a<r.length-1?a++:(a>e.index&&(a=e.index),a--);}n.setFocusedKey(o?o.key:null);}u.current=i;}),[i,l,n,n.focusedKey]),{collection:i,disabledKeys:s,selectionManager:l}}function Xp(e){var r;let n=function(e){var r;let[n,s]=g(e.selectedKey,null!==(r=e.defaultSelectedKey)&&void 0!==r?r:null,e.onSelectionChange),o=t.useMemo((()=>null!=n?[n]:[]),[n]),{collection:a,disabledKeys:i,selectionManager:l}=Yp({...e,selectionMode:"single",disallowEmptySelection:!0,allowDuplicateSelectionEvents:!0,selectedKeys:o,onSelectionChange:t=>{var r;let o=null!==(r=t.values().next().value)&&void 0!==r?r:null;o===n&&e.onSelectionChange&&e.onSelectionChange(o),s(o);}}),u=null!=n?a.getItem(n):null;return {collection:a,disabledKeys:i,selectionManager:l,selectedKey:n,setSelectedKey:s,selectedItem:u}}({...e,suppressTextValueWarning:!0,defaultSelectedKey:null!==(r=e.defaultSelectedKey)&&void 0!==r?r:Zp(e.collection,e.disabledKeys?new Set(e.disabledKeys):new Set)}),{selectionManager:s,collection:o,selectedKey:a}=n,i=t.useRef(a);return t.useEffect((()=>{let e=a;!s.isEmpty&&o.getItem(e)||(e=Zp(o,n.disabledKeys),null!=e&&s.setSelectedKeys([e])),(null!=e&&null==s.focusedKey||!s.isFocused&&e!==i.current)&&s.setFocusedKey(e),i.current=e;})),{...n,isDisabled:e.isDisabled||!1}}function Zp(e,t){let r=null;if(e){for(r=e.getFirstKey();t.has(r)&&r!==e.getLastKey();)r=e.getKeyAfter(r);t.has(r)&&r===e.getLastKey()&&(r=e.getFirstKey());}return r}function Jp(e){const[r,n]=Vt(e,en.variantKeys),{ref:s,as:o,className:a,classNames:i,children:l,disableCursorAnimation:u,shouldSelectOnPressUp:c=!0,motionProps:d,...p}=r,h=o||"div",f="string"==typeof h,m=yn(s),g=Xp({children:l,...p}),{tabListProps:v}=function(e,r,n){let{orientation:s="horizontal",keyboardActivation:o="automatic"}=e,{collection:a,selectionManager:i,disabledKeys:l}=r,{direction:u}=ye(),c=t.useMemo((()=>new Up(a,u,s,l)),[a,l,s,u]),{collectionProps:d}=Mn({ref:n,selectionManager:i,keyboardDelegate:c,selectOnFocus:"automatic"===o,disallowEmptySelection:!0,scrollRef:n,linkBehavior:"selection"}),p=T();return Op.set(r,p),{tabListProps:{...A(d,J({...e,id:p})),role:"tablist","aria-orientation":s,tabIndex:void 0}}}(p,g,m),y=t.useMemo((()=>en({...n,className:a})),[...Object.values(n),a]),b=pn(null==i?void 0:i.base,a),x=t.useMemo((()=>({state:g,slots:y,classNames:i,motionProps:d,listRef:m,shouldSelectOnPressUp:c,disableCursorAnimation:u,isDisabled:null==e?void 0:e.isDisabled,disableAnimation:null==e?void 0:e.disableAnimation})),[g,y,m,d,u,c,null==e?void 0:e.disableAnimation,null==e?void 0:e.isDisabled,i]),w=t.useCallback((e=>({"data-slot":"base",className:y.base({class:pn(b,null==e?void 0:e.className)}),...A(Cn(p,{enabled:f}),e)})),[b,p,y]),P=t.useCallback((e=>({ref:m,"data-slot":"tabList",className:y.tabList({class:pn(null==i?void 0:i.tabList,null==e?void 0:e.className)}),...A(v,e)})),[m,v,i,y]);return {Component:h,domRef:m,state:g,values:x,getBaseProps:w,getTabListProps:P}}function Qp(r,n){var s;const{Component:o,values:a,state:i,getBaseProps:l,getTabListProps:u}=Jp({...r,ref:n}),c=t.useId(),d=!r.disableAnimation&&!r.disableCursorAnimation,p={state:i,listRef:a.listRef,slots:a.slots,classNames:a.classNames,isDisabled:a.isDisabled,motionProps:a.motionProps,disableAnimation:a.disableAnimation,shouldSelectOnPressUp:a.shouldSelectOnPressUp,disableCursorAnimation:a.disableCursorAnimation},h=[...i.collection].map((t=>e.jsx(Gp,{item:t,...p,...t.props},t.key)));return e.jsxs(e.Fragment,{children:[e.jsx("div",{...l(),children:e.jsx(o,{...u(),children:d?e.jsx(gd,{id:c,children:h}):h})}),e.jsx($p,{classNames:a.classNames,slots:a.slots,state:a.state},null==(s=i.selectedItem)?void 0:s.key)]})}It(Qp);Qp.displayName="NextUI.Tabs";var rh="undefined"!=typeof window?window:null;Chip = function(t){var r=t.children,n=t.className,s=t.variant,o=t.size,a=t.onClick,i=void 0===a?function(){}:a;return e.jsx(Gd,be({className:n,variant:s,radius:"lg",size:o,classNames:{base:"font-header selection:none"},onClick:function(e){return i(e)}},{children:r}))},Input = function(t){var r=t.label,n=t.placeholder,s=t.description,o=t.value,a=t.setValue,i=void 0===a?function(){}:a,l=t.defaultValue,u=t.isInvalid,c=t.errorMessage,d=t.isDisabled,p=t.className,h=t.additionalClasses,f=t.style,m=t.startContent,g=t.endContent,v=t.variant;return e.jsx(Dp,{label:r,placeholder:n,description:s,value:o,radius:"lg",labelPlacement:"inside",onChange:function(e){return i(e.target.value)},defaultValue:l,isInvalid:u,errorMessage:c,isDisabled:d,className:h?p+" "+h:p,classNames:{base:"placeholder-gray-100",label:"font-header text-sm py-1",input:"font-content text-base",innerWrapper:"flex items-center",errorMessage:"font-header text-base"},style:f,startContent:m,endContent:g,variant:v})},Page = function(r){var n=r.name,s=r.version,o=r.children,a=r.className,i=r.additionalClasses,l=r.style;return t.useEffect((function(){rh.TONE_DEBUG&&(rh.TONE_PAGE={name:n,version:s});}),[]),e.jsx("div",be({className:a||"h-full p-4 w-full "+i,style:l},{children:o}))},Radio = function(t){var r=t.children,n=t.value;return t.classNames,e.jsx(Tp,be({value:n,className:"font-content"},{children:r}))},RadioGroup = function(t){var r=t.children,n=t.label,s=t.orientation,o=t.additionalClasses,a=t.value,i=t.setValue,l=void 0===i?function(){}:i;return e.jsx(xp,be({label:n,orientation:s,className:o&&" "+o,classNames:{label:"font-header text-sm"},value:a,onValueChange:function(e){return l(e)}},{children:r}))},Textarea = function(t){var r=t.label,n=t.value,s=t.setValue,o=void 0===s?function(){}:s,a=t.isDisabled,i=t.className,l=t.additionalClasses,u=t.style;return e.jsx(Fp,{label:r,labelPlacement:"inside",value:n,onChange:function(e){return o(e.target.value)},isDisabled:a,className:l?"".concat(i," ").concat(l):i,classNames:{label:"font-header text-sm py-1",input:"font-content text-base"},style:u})};

var name = "@sone-dao/tone-react-page-upload";
var version$1 = "0.10.0";

var n="undefined"!=typeof window?window:null;

var getSrc = item => typeof item === 'string' ? item : item.src;

var getArgs = ({
  amount = 3,
  format = 'array',
  group = 20,
  sample = 10
} = {}) => ({
  amount,
  format,
  group,
  sample
});

var format$3 = (input, args) => {
  var list = input.map(val => {
    var rgb = Array.isArray(val) ? val : val.split(',').map(Number);
    return args.format === 'hex' ? rgbToHex(rgb) : rgb;
  });
  return args.amount === 1 || list.length === 1 ? list[0] : list;
};

var group = (number, grouping) => {
  var grouped = Math.round(number / grouping) * grouping;
  return Math.min(grouped, 255);
};

var rgbToHex = rgb => '#' + rgb.map(val => {
  var hex = val.toString(16);
  return hex.length === 1 ? '0' + hex : hex;
}).join('');

var getImageData = src => new Promise((resolve, reject) => {
  var canvas = document.createElement('canvas');
  var context = canvas.getContext('2d');
  var img = new Image();

  img.onload = () => {
    canvas.height = img.height;
    canvas.width = img.width;
    context.drawImage(img, 0, 0);
    var data = context.getImageData(0, 0, img.width, img.height).data;
    resolve(data);
  };

  img.onerror = () => reject(Error('Image loading failed.'));

  img.crossOrigin = '';
  img.src = src;
});

var getProminent = (data, args) => {
  var gap = 4 * args.sample;
  var colors = {};

  for (var i = 0; i < data.length; i += gap) {
    var rgb = [group(data[i], args.group), group(data[i + 1], args.group), group(data[i + 2], args.group)].join();
    colors[rgb] = colors[rgb] ? colors[rgb] + 1 : 1;
  }

  return format$3(Object.entries(colors).sort(([_keyA, valA], [_keyB, valB]) => valA > valB ? -1 : 1).slice(0, args.amount).map(([rgb]) => rgb), args);
};

var process$1 = (handler, item, args) => new Promise((resolve, reject) => getImageData(getSrc(item)).then(data => resolve(handler(data, getArgs(args)))).catch(error => reject(error)));

var prominent = (item, args) => process$1(getProminent, item, args);

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var jszip_min = {exports: {}};

(function (module, exports) {
	!function(e){module.exports=e();}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&t)return t(r,!0);if(l)return l(r,!0);var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h);}return o[r].exports}for(var l="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){var d=e("./utils"),c=e("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c="string"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join("")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u="data:";if(e.substr(0,u.length)===u)throw new Error("Invalid base64 input, it looks like a data url.");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l};},{"./support":30,"./utils":32}],2:[function(e,t,r){var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i;}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=o;},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate");},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){var n=e("./utils");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return -1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return -1^e}(0|t,e,e.length,0):0};},{"./utils":32}],5:[function(e,t,r){r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null;},{}],6:[function(e,t,r){var n=null;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n};},{lie:37}],7:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),a=e("./stream/GenericWorker"),o=n?"uint8array":"array";function h(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={};}r.magic="\b\0",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1);},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0);},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null;},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta});};},r.compressWorker=function(e){return new h("Deflate",e)},r.uncompressWorker=function(){return new h("Inflate",{})};},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){function A(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo("string",s(h.name)),c=I.transformTo("string",O.utf8encode(h.name)),d=h.comment,p=I.transformTo("string",s(d)),m=I.transformTo("string",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b="",v="",y="",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),"UNIX"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+="up"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+="uc"+A(y.length,2)+y);var E="";return E+="\n\0",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+"\0\0\0\0"+A(z,4)+A(n,4)+f+b+p}}var I=e("../utils"),i=e("../stream/GenericWorker"),O=e("../utf8"),B=e("../crc32"),R=e("../signature");function s(e,t,r,n){i.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[];}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}));},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}});}else this.accumulate=!0;},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null;},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo("string",i(n));return R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}});},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume();},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e);}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end();}),e.on("error",function(e){t.error(e);}),this},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return !1;for(var r=0;r<t.length;r++)try{t[r].error(e);}catch(e){}return !0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock();},t.exports=s;},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){var u=e("../compressions"),n=e("./ZipFileWorker");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+" is not a valid compression method !");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo("file",{name:e,dir:i,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o);}),o.entriesCount=h;}catch(e){o.error(e);}return o};},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e};}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(e,t){return (new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n;},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){var u=e("./utils"),i=e("./external"),n=e("./utf8"),s=e("./zipEntries"),a=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on("error",function(e){t(e);}).on("end",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):e();}).resume();})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):u.prepareContent("the loaded zip file",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s);}return t.zipComment.length&&(h.comment=t.zipComment),h})};},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t);}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}});}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e);}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end();});},s.prototype.pause=function(){return !!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s;},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){var i=e("readable-stream").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on("data",function(e,t){n.push(e)||n._helper.pause(),r&&r(t);}).on("error",function(e){n.emit("error",e);}).on("end",function(){n.push(null);});}e("../utils").inherits(n,i),n.prototype._read=function(){this._helper.resume();},t.exports=n;},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}};},{}],15:[function(e,t,r){function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h;}var i=e("./utf8"),u=e("./utils"),l=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),f=e("./defaults"),c=e("./compressedObject"),d=e("./zipObject"),o=e("./generate"),p=e("./nodejsUtils"),m=e("./nodejs/NodejsStreamInputAdapter"),_=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},g=function(e){return "/"!==e.slice(-1)&&(e+="/"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return "[object RegExp]"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n);},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t);}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return !t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||("/"!==r.slice(-1)&&(r+="/"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");u.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=o.generateWorker(this,r,n);}catch(e){(t=new l("error")).error(e);}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return (e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n;},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream");},{stream:void 0}],17:[function(e,t,r){var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t];}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return -1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return [];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0;}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e);},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e;},skip:function(e){this.setIndex(this.index+e);},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i;},{"../utils":32}],19:[function(e,t,r){var n=e("./Uint8ArrayReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){var n=e("./DataReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){var n=e("./ArrayReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),a=e("./StringReader"),o=e("./NodeBufferReader"),h=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new o(e):i.uint8array?new h(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new a(e)};},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b";},{}],24:[function(e,t,r){var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e;}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta});},t.exports=s;},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0);}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e);},t.exports=s;},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0);}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length;}i.prototype.processChunk.call(this,e);},t.exports=s;},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat();},function(e){t.error(e);});}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null;},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0));},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return !1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t);}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s;},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null;}n.prototype={push:function(e){this.emit("data",e);},end:function(){if(this.isFinished)return !1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0;}catch(e){this.emit("error",e);}return !0},error:function(e){return !this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[];},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t);},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e);}),e.on("end",function(){t.end();}),e.on("error",function(e){t.error(e);}),this},pause:function(){return !this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return !1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e);},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e]);},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock();},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n;},{}],29:[function(e,t,r){var h=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),u=e("../base64"),n=e("../support"),a=e("../external"),o=null;if(n.nodestream)try{o=e("../nodejs/NodejsStreamOutputAdapter");}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on("data",function(e,t){n.push(e),o&&o(t);}).on("error",function(e){n=[],r(e);}).on("end",function(){try{var e=function(e,t,r){switch(e){case"blob":return h.newBlob(h.transformTo("arraybuffer",t),r);case"base64":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(i,n),a);t(e);}catch(e){r(e);}n=[];}).resume();})}function f(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string";}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock();}catch(e){this._worker=new s("error"),this._worker.error(e);}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return "data"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta);}):this._worker.on(e,function(){h.delay(t,arguments,r);}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=f;},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else {var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size;}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size;}catch(e){r.blob=!1;}}}try{r.nodestream=!!e("readable-stream").Readable;}catch(e){r.nodestream=!1;}},{"readable-stream":16}],31:[function(e,t,s){for(var o=e("./utils"),h=e("./support"),r=e("./nodejsUtils"),n=e("./stream/GenericWorker"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,"utf-8 decode"),this.leftOver=null;}function l(){n.call(this,"utf-8 encode");}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else {for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n);}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?"uint8array":"array",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length);}else t=this.leftOver.concat(t);this.leftOver=null;}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta});},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null);},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta});},s.Utf8EncodeWorker=l;},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,a){var o=e("./support"),h=e("./base64"),r=e("./nodejsUtils"),u=e("./external");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e("setimmediate"),a.newBlob=function(t,r){a.checkSupport("blob");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return !1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return !1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if("uint8array"===r?n=i.applyCanBeUsed.uint8array:"nodebuffer"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2);}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||"",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var i=t[n];"."===i||""===i&&0!==n&&n!==t.length-1||(".."===i?r.pop():r.push(i));}return r.join("/")},a.getTypeOf=function(e){return "string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":o.nodebuffer&&r.isBuffer(e)?"nodebuffer":o.uint8array&&e instanceof Uint8Array?"uint8array":o.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[]);});},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r;},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(n)))&&"undefined"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result);},e.onerror=function(e){r(e.target.error);},e.readAsArrayBuffer(n);}):n}).then(function(e){var t=a.getTypeOf(e);return t?("arraybuffer"===t?e=a.transformTo("uint8array",e):"string"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error("Can't read the data of '"+r+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})};},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),a=e("./zipEntry"),o=e("./support");function h(e){this.files=[],this.loadOptions=e;}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r);},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r};},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes();},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw !this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can't find end of central directory");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral();}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e);},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles();}},t.exports=h;},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){var n=e("./reader/readerFor"),s=e("./utils"),i=e("./compressedObject"),a=e("./crc32"),o=e("./utf8"),h=e("./compressions"),u=e("./support");function l(e,t){this.options=e,this.loadOptions=t;}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize));},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength);},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0);},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4));}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i);},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else {var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else {var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r);}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else {var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i);}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l;},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions};}var s=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),a=e("./utf8"),o=e("./compressedObject"),h=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker));}catch(e){(t=new h("error")).error(e);}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n;},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,l,t){(function(t){var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2;};}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null;},t.document.documentElement.appendChild(e);}:function(){setTimeout(u,0);};else {var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0);};}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length;}n=!1;}l.exports=function(e){1!==h.push(e)||n||r();};}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],37:[function(e,t,r){var i=e("immediate");function u(){}var l={},s=["REJECTED"],a=["FULFILLED"],n=["PENDING"];function o(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e);}function h(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected);}function f(t,r,n){i(function(){var e;try{e=r(n);}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError("Cannot resolve promise with itself")):l.resolve(t,e);});}function c(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments);}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e));}function i(e){r||(r=!0,l.resolve(t,e));}var s=p(function(){e(i,n);});"error"===s.status&&n(s.value);}function p(e,t){var r={};try{r.value=e(t),r.status="success";}catch(e){r.status="error",r.value=e;}return r}(t.exports=o).prototype.finally=function(t){if("function"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e);},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e);},h.prototype.callRejected=function(e){l.reject(this.promise,e);},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e);},l.resolve=function(e,t){var r=p(c,t);if("error"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else {e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t);}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s));},function(e){i||(i=!0,l.reject(o,e));});}},o.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e));},function(e){n||(n=!0,l.reject(s,e));});var a;return s};},{immediate:36}],38:[function(e,t,r){var n={};(0, e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n;},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){var a=e("./zlib/deflate"),o=e("./utils/common"),h=e("./utils/strings"),i=e("./zlib/messages"),s=e("./zlib/zstream"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n="string"==typeof t.dictionary?h.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0;}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return !1;n=t===~~t?t:!0===t?4:0,"string"==typeof e?i.input=h.string2buf(e):"[object ArrayBuffer]"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||("string"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)));}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e);},p.prototype.onEnd=function(e){e===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return (t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return (t=t||{}).gzip=!0,n(e,t)};},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){var c=e("./zlib/inflate"),d=e("./utils/common"),p=e("./utils/strings"),m=e("./zlib/constants"),n=e("./zlib/messages"),i=e("./zlib/zstream"),s=e("./zlib/gzheader"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header);}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return !1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof e?h.input=p.binstring2buf(e):"[object ArrayBuffer]"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o="string"==typeof l?p.string2buf(l):"[object ArrayBuffer]"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0);}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e);},a.prototype.onEnd=function(e){e===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return (t=t||{}).raw=!0,o(e,t)},r.ungzip=o;},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n]);}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s];},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s];},flattenChunks:function(e){return [].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s));},r.setTyped(n);},{}],42:[function(e,t,r){var h=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0]);}catch(e){i=!1;}try{String.fromCharCode.apply(null,new Uint8Array(1));}catch(e){s=!1;}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else {for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i);}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t};},{"./common":41}],43:[function(e,t,r){t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521;}return i|s<<16|0};},{}],44:[function(e,t,r){t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};},{}],45:[function(e,t,r){var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return -1^e};},{}],46:[function(e,t,r){var h,c=e("../utils/common"),u=e("./trees"),d=e("./adler32"),p=e("./crc32"),n=e("./messages"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return (e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0;}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0));}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm);}function U(e,t){e.pending_buf[e.pending++]=t;}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t;}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a];}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f;}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++;}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--;}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i;}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0;}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0;}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return (e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else {var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1;}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73);}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s);}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91);}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s);}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103);}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead);}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r);}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo="pako deflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1;};},{}],48:[function(e,t,r){t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else {if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C;}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C;}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C;}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]));}else {for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]));}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p;};},{}],49:[function(e,t,r){var I=e("../utils/common"),O=e("./adler32"),B=e("./crc32"),R=e("./inffast"),T=e("./inftrees"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return (e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0;}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1;}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5;}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){e.msg="unknown compression method",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(r.flags=u,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0;}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}l=u=0;}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30;}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if((65535&u)!=(u>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3;}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else {if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u>>>=_,l-=_,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2;}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3;}else {for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7;}if(r.have+d>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;d--;)r.lens[r.have++]=k;}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}u>>>=v,l-=v,r.back+=v;}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra;}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}u>>>=v,l-=v,r.back+=v;}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg="invalid distance code",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra;}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window;}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8;}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg="incorrect data check",r.mode=30;break}l=u=0;}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}l=u=0;}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return -4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){var D=e("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return -1;if(0<z&&(0===e||1!==w))return -1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]];}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0;}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0};},{"../utils/common":41}],51:[function(e,t,r){t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};},{}],52:[function(e,t,r){var i=e("../utils/common"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0;}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length;}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t;}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255;}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r);}function L(e,t,r){P(e,r[2*t],r[2*t+1]);}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o));}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0;}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0;}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n;}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t);}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2;}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--);}}(e,t),Z(s,u,e.bl_count);}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4));}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4);}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),n&&(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r;}(e,t,r,!0);}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p);}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e);},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1);}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e);},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8);}(e);};},{"../utils/common":41}],53:[function(e,t,r){t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0;};},{}],54:[function(e,t,r){(function(e){!function(r,n){if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i="[object process]"==={}.toString.call(r.process)?function(e){process.nextTick(function(){c(e);});}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1;},r.postMessage("","*"),r.onmessage=t,e}}()?(a="setImmediate$"+Math.random()+"$",r.addEventListener?r.addEventListener("message",d,!1):r.attachEvent("onmessage",d),function(e){r.postMessage(a+e,"*");}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data);},function(e){t.port2.postMessage(e);}):l&&"onreadystatechange"in l.createElement("script")?(s=l.documentElement,function(e){var t=l.createElement("script");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null;},s.appendChild(t);}):function(e){setTimeout(c,0,e);},e.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f;}function f(e){delete h[e];}function c(e){if(u)setTimeout(c,0,e);else {var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r);}}(t);}finally{f(e),u=!1;}}}}function d(e){e.source===r&&"string"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length));}}("undefined"==typeof self?void 0===e?this:e:self);}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[10])(10)}); 
} (jszip_min));

var jszip_minExports = jszip_min.exports;
var JSZip = /*@__PURE__*/getDefaultExportFromCjs(jszip_minExports);

var localforage$1 = {exports: {}};

(function (module, exports) {
	(function(f){{module.exports=f();}})(function(){return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof commonjsRequire=="function"&&commonjsRequire;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r);}return n[o].exports}var i=typeof commonjsRequire=="function"&&commonjsRequire;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	(function (global){
	var Mutation = global.MutationObserver || global.WebKitMutationObserver;

	var scheduleDrain;

	{
	  if (Mutation) {
	    var called = 0;
	    var observer = new Mutation(nextTick);
	    var element = global.document.createTextNode('');
	    observer.observe(element, {
	      characterData: true
	    });
	    scheduleDrain = function () {
	      element.data = (called = ++called % 2);
	    };
	  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
	    var channel = new global.MessageChannel();
	    channel.port1.onmessage = nextTick;
	    scheduleDrain = function () {
	      channel.port2.postMessage(0);
	    };
	  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
	    scheduleDrain = function () {

	      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	      var scriptEl = global.document.createElement('script');
	      scriptEl.onreadystatechange = function () {
	        nextTick();

	        scriptEl.onreadystatechange = null;
	        scriptEl.parentNode.removeChild(scriptEl);
	        scriptEl = null;
	      };
	      global.document.documentElement.appendChild(scriptEl);
	    };
	  } else {
	    scheduleDrain = function () {
	      setTimeout(nextTick, 0);
	    };
	  }
	}

	var draining;
	var queue = [];
	//named nextTick for less confusing stack traces
	function nextTick() {
	  draining = true;
	  var i, oldQueue;
	  var len = queue.length;
	  while (len) {
	    oldQueue = queue;
	    queue = [];
	    i = -1;
	    while (++i < len) {
	      oldQueue[i]();
	    }
	    len = queue.length;
	  }
	  draining = false;
	}

	module.exports = immediate;
	function immediate(task) {
	  if (queue.push(task) === 1 && !draining) {
	    scheduleDrain();
	  }
	}

	}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	},{}],2:[function(_dereq_,module,exports){
	var immediate = _dereq_(1);

	/* istanbul ignore next */
	function INTERNAL() {}

	var handlers = {};

	var REJECTED = ['REJECTED'];
	var FULFILLED = ['FULFILLED'];
	var PENDING = ['PENDING'];

	module.exports = Promise;

	function Promise(resolver) {
	  if (typeof resolver !== 'function') {
	    throw new TypeError('resolver must be a function');
	  }
	  this.state = PENDING;
	  this.queue = [];
	  this.outcome = void 0;
	  if (resolver !== INTERNAL) {
	    safelyResolveThenable(this, resolver);
	  }
	}

	Promise.prototype["catch"] = function (onRejected) {
	  return this.then(null, onRejected);
	};
	Promise.prototype.then = function (onFulfilled, onRejected) {
	  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
	    typeof onRejected !== 'function' && this.state === REJECTED) {
	    return this;
	  }
	  var promise = new this.constructor(INTERNAL);
	  if (this.state !== PENDING) {
	    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
	    unwrap(promise, resolver, this.outcome);
	  } else {
	    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
	  }

	  return promise;
	};
	function QueueItem(promise, onFulfilled, onRejected) {
	  this.promise = promise;
	  if (typeof onFulfilled === 'function') {
	    this.onFulfilled = onFulfilled;
	    this.callFulfilled = this.otherCallFulfilled;
	  }
	  if (typeof onRejected === 'function') {
	    this.onRejected = onRejected;
	    this.callRejected = this.otherCallRejected;
	  }
	}
	QueueItem.prototype.callFulfilled = function (value) {
	  handlers.resolve(this.promise, value);
	};
	QueueItem.prototype.otherCallFulfilled = function (value) {
	  unwrap(this.promise, this.onFulfilled, value);
	};
	QueueItem.prototype.callRejected = function (value) {
	  handlers.reject(this.promise, value);
	};
	QueueItem.prototype.otherCallRejected = function (value) {
	  unwrap(this.promise, this.onRejected, value);
	};

	function unwrap(promise, func, value) {
	  immediate(function () {
	    var returnValue;
	    try {
	      returnValue = func(value);
	    } catch (e) {
	      return handlers.reject(promise, e);
	    }
	    if (returnValue === promise) {
	      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
	    } else {
	      handlers.resolve(promise, returnValue);
	    }
	  });
	}

	handlers.resolve = function (self, value) {
	  var result = tryCatch(getThen, value);
	  if (result.status === 'error') {
	    return handlers.reject(self, result.value);
	  }
	  var thenable = result.value;

	  if (thenable) {
	    safelyResolveThenable(self, thenable);
	  } else {
	    self.state = FULFILLED;
	    self.outcome = value;
	    var i = -1;
	    var len = self.queue.length;
	    while (++i < len) {
	      self.queue[i].callFulfilled(value);
	    }
	  }
	  return self;
	};
	handlers.reject = function (self, error) {
	  self.state = REJECTED;
	  self.outcome = error;
	  var i = -1;
	  var len = self.queue.length;
	  while (++i < len) {
	    self.queue[i].callRejected(error);
	  }
	  return self;
	};

	function getThen(obj) {
	  // Make sure we only access the accessor once as required by the spec
	  var then = obj && obj.then;
	  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
	    return function appyThen() {
	      then.apply(obj, arguments);
	    };
	  }
	}

	function safelyResolveThenable(self, thenable) {
	  // Either fulfill, reject or reject with error
	  var called = false;
	  function onError(value) {
	    if (called) {
	      return;
	    }
	    called = true;
	    handlers.reject(self, value);
	  }

	  function onSuccess(value) {
	    if (called) {
	      return;
	    }
	    called = true;
	    handlers.resolve(self, value);
	  }

	  function tryToUnwrap() {
	    thenable(onSuccess, onError);
	  }

	  var result = tryCatch(tryToUnwrap);
	  if (result.status === 'error') {
	    onError(result.value);
	  }
	}

	function tryCatch(func, value) {
	  var out = {};
	  try {
	    out.value = func(value);
	    out.status = 'success';
	  } catch (e) {
	    out.status = 'error';
	    out.value = e;
	  }
	  return out;
	}

	Promise.resolve = resolve;
	function resolve(value) {
	  if (value instanceof this) {
	    return value;
	  }
	  return handlers.resolve(new this(INTERNAL), value);
	}

	Promise.reject = reject;
	function reject(reason) {
	  var promise = new this(INTERNAL);
	  return handlers.reject(promise, reason);
	}

	Promise.all = all;
	function all(iterable) {
	  var self = this;
	  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
	    return this.reject(new TypeError('must be an array'));
	  }

	  var len = iterable.length;
	  var called = false;
	  if (!len) {
	    return this.resolve([]);
	  }

	  var values = new Array(len);
	  var resolved = 0;
	  var i = -1;
	  var promise = new this(INTERNAL);

	  while (++i < len) {
	    allResolver(iterable[i], i);
	  }
	  return promise;
	  function allResolver(value, i) {
	    self.resolve(value).then(resolveFromAll, function (error) {
	      if (!called) {
	        called = true;
	        handlers.reject(promise, error);
	      }
	    });
	    function resolveFromAll(outValue) {
	      values[i] = outValue;
	      if (++resolved === len && !called) {
	        called = true;
	        handlers.resolve(promise, values);
	      }
	    }
	  }
	}

	Promise.race = race;
	function race(iterable) {
	  var self = this;
	  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
	    return this.reject(new TypeError('must be an array'));
	  }

	  var len = iterable.length;
	  var called = false;
	  if (!len) {
	    return this.resolve([]);
	  }

	  var i = -1;
	  var promise = new this(INTERNAL);

	  while (++i < len) {
	    resolver(iterable[i]);
	  }
	  return promise;
	  function resolver(value) {
	    self.resolve(value).then(function (response) {
	      if (!called) {
	        called = true;
	        handlers.resolve(promise, response);
	      }
	    }, function (error) {
	      if (!called) {
	        called = true;
	        handlers.reject(promise, error);
	      }
	    });
	  }
	}

	},{"1":1}],3:[function(_dereq_,module,exports){
	(function (global){
	if (typeof global.Promise !== 'function') {
	  global.Promise = _dereq_(2);
	}

	}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	},{"2":2}],4:[function(_dereq_,module,exports){

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function getIDB() {
	    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
	    try {
	        if (typeof indexedDB !== 'undefined') {
	            return indexedDB;
	        }
	        if (typeof webkitIndexedDB !== 'undefined') {
	            return webkitIndexedDB;
	        }
	        if (typeof mozIndexedDB !== 'undefined') {
	            return mozIndexedDB;
	        }
	        if (typeof OIndexedDB !== 'undefined') {
	            return OIndexedDB;
	        }
	        if (typeof msIndexedDB !== 'undefined') {
	            return msIndexedDB;
	        }
	    } catch (e) {
	        return;
	    }
	}

	var idb = getIDB();

	function isIndexedDBValid() {
	    try {
	        // Initialize IndexedDB; fall back to vendor-prefixed versions
	        // if needed.
	        if (!idb || !idb.open) {
	            return false;
	        }
	        // We mimic PouchDB here;
	        //
	        // We test for openDatabase because IE Mobile identifies itself
	        // as Safari. Oh the lulz...
	        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

	        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

	        // Safari <10.1 does not meet our requirements for IDB support
	        // (see: https://github.com/pouchdb/pouchdb/issues/5572).
	        // Safari 10.1 shipped with fetch, we can use that to detect it.
	        // Note: this creates issues with `window.fetch` polyfills and
	        // overrides; see:
	        // https://github.com/localForage/localForage/issues/856
	        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
	        // some outdated implementations of IDB that appear on Samsung
	        // and HTC Android devices <4.4 are missing IDBKeyRange
	        // See: https://github.com/mozilla/localForage/issues/128
	        // See: https://github.com/mozilla/localForage/issues/272
	        typeof IDBKeyRange !== 'undefined';
	    } catch (e) {
	        return false;
	    }
	}

	// Abstracts constructing a Blob object, so it also works in older
	// browsers that don't support the native Blob constructor. (i.e.
	// old QtWebKit versions, at least).
	// Abstracts constructing a Blob object, so it also works in older
	// browsers that don't support the native Blob constructor. (i.e.
	// old QtWebKit versions, at least).
	function createBlob(parts, properties) {
	    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
	    parts = parts || [];
	    properties = properties || {};
	    try {
	        return new Blob(parts, properties);
	    } catch (e) {
	        if (e.name !== 'TypeError') {
	            throw e;
	        }
	        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
	        var builder = new Builder();
	        for (var i = 0; i < parts.length; i += 1) {
	            builder.append(parts[i]);
	        }
	        return builder.getBlob(properties.type);
	    }
	}

	// This is CommonJS because lie is an external dependency, so Rollup
	// can just ignore it.
	if (typeof Promise === 'undefined') {
	    // In the "nopromises" build this will just throw if you don't have
	    // a global promise object, but it would throw anyway later.
	    _dereq_(3);
	}
	var Promise$1 = Promise;

	function executeCallback(promise, callback) {
	    if (callback) {
	        promise.then(function (result) {
	            callback(null, result);
	        }, function (error) {
	            callback(error);
	        });
	    }
	}

	function executeTwoCallbacks(promise, callback, errorCallback) {
	    if (typeof callback === 'function') {
	        promise.then(callback);
	    }

	    if (typeof errorCallback === 'function') {
	        promise["catch"](errorCallback);
	    }
	}

	function normalizeKey(key) {
	    // Cast the key to a string, as that's all we can set as a key.
	    if (typeof key !== 'string') {
	        console.warn(key + ' used as a key, but it is not a string.');
	        key = String(key);
	    }

	    return key;
	}

	function getCallback() {
	    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
	        return arguments[arguments.length - 1];
	    }
	}

	// Some code originally from async_storage.js in
	// [Gaia](https://github.com/mozilla-b2g/gaia).

	var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
	var supportsBlobs = void 0;
	var dbContexts = {};
	var toString = Object.prototype.toString;

	// Transaction Modes
	var READ_ONLY = 'readonly';
	var READ_WRITE = 'readwrite';

	// Transform a binary string to an array buffer, because otherwise
	// weird stuff happens when you try to work with the binary string directly.
	// It is known.
	// From http://stackoverflow.com/questions/14967647/ (continues on next line)
	// encode-decode-image-with-base64-breaks-image (2013-04-21)
	function _binStringToArrayBuffer(bin) {
	    var length = bin.length;
	    var buf = new ArrayBuffer(length);
	    var arr = new Uint8Array(buf);
	    for (var i = 0; i < length; i++) {
	        arr[i] = bin.charCodeAt(i);
	    }
	    return buf;
	}

	//
	// Blobs are not supported in all versions of IndexedDB, notably
	// Chrome <37 and Android <5. In those versions, storing a blob will throw.
	//
	// Various other blob bugs exist in Chrome v37-42 (inclusive).
	// Detecting them is expensive and confusing to users, and Chrome 37-42
	// is at very low usage worldwide, so we do a hacky userAgent check instead.
	//
	// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
	// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
	// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
	//
	// Code borrowed from PouchDB. See:
	// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
	//
	function _checkBlobSupportWithoutCaching(idb) {
	    return new Promise$1(function (resolve) {
	        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
	        var blob = createBlob(['']);
	        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

	        txn.onabort = function (e) {
	            // If the transaction aborts now its due to not being able to
	            // write to the database, likely due to the disk being full
	            e.preventDefault();
	            e.stopPropagation();
	            resolve(false);
	        };

	        txn.oncomplete = function () {
	            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
	            var matchedEdge = navigator.userAgent.match(/Edge\//);
	            // MS Edge pretends to be Chrome 42:
	            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
	            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
	        };
	    })["catch"](function () {
	        return false; // error, so assume unsupported
	    });
	}

	function _checkBlobSupport(idb) {
	    if (typeof supportsBlobs === 'boolean') {
	        return Promise$1.resolve(supportsBlobs);
	    }
	    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
	        supportsBlobs = value;
	        return supportsBlobs;
	    });
	}

	function _deferReadiness(dbInfo) {
	    var dbContext = dbContexts[dbInfo.name];

	    // Create a deferred object representing the current database operation.
	    var deferredOperation = {};

	    deferredOperation.promise = new Promise$1(function (resolve, reject) {
	        deferredOperation.resolve = resolve;
	        deferredOperation.reject = reject;
	    });

	    // Enqueue the deferred operation.
	    dbContext.deferredOperations.push(deferredOperation);

	    // Chain its promise to the database readiness.
	    if (!dbContext.dbReady) {
	        dbContext.dbReady = deferredOperation.promise;
	    } else {
	        dbContext.dbReady = dbContext.dbReady.then(function () {
	            return deferredOperation.promise;
	        });
	    }
	}

	function _advanceReadiness(dbInfo) {
	    var dbContext = dbContexts[dbInfo.name];

	    // Dequeue a deferred operation.
	    var deferredOperation = dbContext.deferredOperations.pop();

	    // Resolve its promise (which is part of the database readiness
	    // chain of promises).
	    if (deferredOperation) {
	        deferredOperation.resolve();
	        return deferredOperation.promise;
	    }
	}

	function _rejectReadiness(dbInfo, err) {
	    var dbContext = dbContexts[dbInfo.name];

	    // Dequeue a deferred operation.
	    var deferredOperation = dbContext.deferredOperations.pop();

	    // Reject its promise (which is part of the database readiness
	    // chain of promises).
	    if (deferredOperation) {
	        deferredOperation.reject(err);
	        return deferredOperation.promise;
	    }
	}

	function _getConnection(dbInfo, upgradeNeeded) {
	    return new Promise$1(function (resolve, reject) {
	        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

	        if (dbInfo.db) {
	            if (upgradeNeeded) {
	                _deferReadiness(dbInfo);
	                dbInfo.db.close();
	            } else {
	                return resolve(dbInfo.db);
	            }
	        }

	        var dbArgs = [dbInfo.name];

	        if (upgradeNeeded) {
	            dbArgs.push(dbInfo.version);
	        }

	        var openreq = idb.open.apply(idb, dbArgs);

	        if (upgradeNeeded) {
	            openreq.onupgradeneeded = function (e) {
	                var db = openreq.result;
	                try {
	                    db.createObjectStore(dbInfo.storeName);
	                    if (e.oldVersion <= 1) {
	                        // Added when support for blob shims was added
	                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
	                    }
	                } catch (ex) {
	                    if (ex.name === 'ConstraintError') {
	                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
	                    } else {
	                        throw ex;
	                    }
	                }
	            };
	        }

	        openreq.onerror = function (e) {
	            e.preventDefault();
	            reject(openreq.error);
	        };

	        openreq.onsuccess = function () {
	            var db = openreq.result;
	            db.onversionchange = function (e) {
	                // Triggered when the database is modified (e.g. adding an objectStore) or
	                // deleted (even when initiated by other sessions in different tabs).
	                // Closing the connection here prevents those operations from being blocked.
	                // If the database is accessed again later by this instance, the connection
	                // will be reopened or the database recreated as needed.
	                e.target.close();
	            };
	            resolve(db);
	            _advanceReadiness(dbInfo);
	        };
	    });
	}

	function _getOriginalConnection(dbInfo) {
	    return _getConnection(dbInfo, false);
	}

	function _getUpgradedConnection(dbInfo) {
	    return _getConnection(dbInfo, true);
	}

	function _isUpgradeNeeded(dbInfo, defaultVersion) {
	    if (!dbInfo.db) {
	        return true;
	    }

	    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
	    var isDowngrade = dbInfo.version < dbInfo.db.version;
	    var isUpgrade = dbInfo.version > dbInfo.db.version;

	    if (isDowngrade) {
	        // If the version is not the default one
	        // then warn for impossible downgrade.
	        if (dbInfo.version !== defaultVersion) {
	            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
	        }
	        // Align the versions to prevent errors.
	        dbInfo.version = dbInfo.db.version;
	    }

	    if (isUpgrade || isNewStore) {
	        // If the store is new then increment the version (if needed).
	        // This will trigger an "upgradeneeded" event which is required
	        // for creating a store.
	        if (isNewStore) {
	            var incVersion = dbInfo.db.version + 1;
	            if (incVersion > dbInfo.version) {
	                dbInfo.version = incVersion;
	            }
	        }

	        return true;
	    }

	    return false;
	}

	// encode a blob for indexeddb engines that don't support blobs
	function _encodeBlob(blob) {
	    return new Promise$1(function (resolve, reject) {
	        var reader = new FileReader();
	        reader.onerror = reject;
	        reader.onloadend = function (e) {
	            var base64 = btoa(e.target.result || '');
	            resolve({
	                __local_forage_encoded_blob: true,
	                data: base64,
	                type: blob.type
	            });
	        };
	        reader.readAsBinaryString(blob);
	    });
	}

	// decode an encoded blob
	function _decodeBlob(encodedBlob) {
	    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
	    return createBlob([arrayBuff], { type: encodedBlob.type });
	}

	// is this one of our fancy encoded blobs?
	function _isEncodedBlob(value) {
	    return value && value.__local_forage_encoded_blob;
	}

	// Specialize the default `ready()` function by making it dependent
	// on the current database operations. Thus, the driver will be actually
	// ready when it's been initialized (default) *and* there are no pending
	// operations on the database (initiated by some other instances).
	function _fullyReady(callback) {
	    var self = this;

	    var promise = self._initReady().then(function () {
	        var dbContext = dbContexts[self._dbInfo.name];

	        if (dbContext && dbContext.dbReady) {
	            return dbContext.dbReady;
	        }
	    });

	    executeTwoCallbacks(promise, callback, callback);
	    return promise;
	}

	// Try to establish a new db connection to replace the
	// current one which is broken (i.e. experiencing
	// InvalidStateError while creating a transaction).
	function _tryReconnect(dbInfo) {
	    _deferReadiness(dbInfo);

	    var dbContext = dbContexts[dbInfo.name];
	    var forages = dbContext.forages;

	    for (var i = 0; i < forages.length; i++) {
	        var forage = forages[i];
	        if (forage._dbInfo.db) {
	            forage._dbInfo.db.close();
	            forage._dbInfo.db = null;
	        }
	    }
	    dbInfo.db = null;

	    return _getOriginalConnection(dbInfo).then(function (db) {
	        dbInfo.db = db;
	        if (_isUpgradeNeeded(dbInfo)) {
	            // Reopen the database for upgrading.
	            return _getUpgradedConnection(dbInfo);
	        }
	        return db;
	    }).then(function (db) {
	        // store the latest db reference
	        // in case the db was upgraded
	        dbInfo.db = dbContext.db = db;
	        for (var i = 0; i < forages.length; i++) {
	            forages[i]._dbInfo.db = db;
	        }
	    })["catch"](function (err) {
	        _rejectReadiness(dbInfo, err);
	        throw err;
	    });
	}

	// FF doesn't like Promises (micro-tasks) and IDDB store operations,
	// so we have to do it with callbacks
	function createTransaction(dbInfo, mode, callback, retries) {
	    if (retries === undefined) {
	        retries = 1;
	    }

	    try {
	        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
	        callback(null, tx);
	    } catch (err) {
	        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
	            return Promise$1.resolve().then(function () {
	                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
	                    // increase the db version, to create the new ObjectStore
	                    if (dbInfo.db) {
	                        dbInfo.version = dbInfo.db.version + 1;
	                    }
	                    // Reopen the database for upgrading.
	                    return _getUpgradedConnection(dbInfo);
	                }
	            }).then(function () {
	                return _tryReconnect(dbInfo).then(function () {
	                    createTransaction(dbInfo, mode, callback, retries - 1);
	                });
	            })["catch"](callback);
	        }

	        callback(err);
	    }
	}

	function createDbContext() {
	    return {
	        // Running localForages sharing a database.
	        forages: [],
	        // Shared database.
	        db: null,
	        // Database readiness (promise).
	        dbReady: null,
	        // Deferred operations on the database.
	        deferredOperations: []
	    };
	}

	// Open the IndexedDB database (automatically creates one if one didn't
	// previously exist), using any options set in the config.
	function _initStorage(options) {
	    var self = this;
	    var dbInfo = {
	        db: null
	    };

	    if (options) {
	        for (var i in options) {
	            dbInfo[i] = options[i];
	        }
	    }

	    // Get the current context of the database;
	    var dbContext = dbContexts[dbInfo.name];

	    // ...or create a new context.
	    if (!dbContext) {
	        dbContext = createDbContext();
	        // Register the new context in the global container.
	        dbContexts[dbInfo.name] = dbContext;
	    }

	    // Register itself as a running localForage in the current context.
	    dbContext.forages.push(self);

	    // Replace the default `ready()` function with the specialized one.
	    if (!self._initReady) {
	        self._initReady = self.ready;
	        self.ready = _fullyReady;
	    }

	    // Create an array of initialization states of the related localForages.
	    var initPromises = [];

	    function ignoreErrors() {
	        // Don't handle errors here,
	        // just makes sure related localForages aren't pending.
	        return Promise$1.resolve();
	    }

	    for (var j = 0; j < dbContext.forages.length; j++) {
	        var forage = dbContext.forages[j];
	        if (forage !== self) {
	            // Don't wait for itself...
	            initPromises.push(forage._initReady()["catch"](ignoreErrors));
	        }
	    }

	    // Take a snapshot of the related localForages.
	    var forages = dbContext.forages.slice(0);

	    // Initialize the connection process only when
	    // all the related localForages aren't pending.
	    return Promise$1.all(initPromises).then(function () {
	        dbInfo.db = dbContext.db;
	        // Get the connection or open a new one without upgrade.
	        return _getOriginalConnection(dbInfo);
	    }).then(function (db) {
	        dbInfo.db = db;
	        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
	            // Reopen the database for upgrading.
	            return _getUpgradedConnection(dbInfo);
	        }
	        return db;
	    }).then(function (db) {
	        dbInfo.db = dbContext.db = db;
	        self._dbInfo = dbInfo;
	        // Share the final connection amongst related localForages.
	        for (var k = 0; k < forages.length; k++) {
	            var forage = forages[k];
	            if (forage !== self) {
	                // Self is already up-to-date.
	                forage._dbInfo.db = dbInfo.db;
	                forage._dbInfo.version = dbInfo.version;
	            }
	        }
	    });
	}

	function getItem(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.get(key);

	                    req.onsuccess = function () {
	                        var value = req.result;
	                        if (value === undefined) {
	                            value = null;
	                        }
	                        if (_isEncodedBlob(value)) {
	                            value = _decodeBlob(value);
	                        }
	                        resolve(value);
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Iterate over all items stored in database.
	function iterate(iterator, callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.openCursor();
	                    var iterationNumber = 1;

	                    req.onsuccess = function () {
	                        var cursor = req.result;

	                        if (cursor) {
	                            var value = cursor.value;
	                            if (_isEncodedBlob(value)) {
	                                value = _decodeBlob(value);
	                            }
	                            var result = iterator(value, cursor.key, iterationNumber++);

	                            // when the iterator callback returns any
	                            // (non-`undefined`) value, then we stop
	                            // the iteration immediately
	                            if (result !== void 0) {
	                                resolve(result);
	                            } else {
	                                cursor["continue"]();
	                            }
	                        } else {
	                            resolve();
	                        }
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);

	    return promise;
	}

	function setItem(key, value, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        var dbInfo;
	        self.ready().then(function () {
	            dbInfo = self._dbInfo;
	            if (toString.call(value) === '[object Blob]') {
	                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
	                    if (blobSupport) {
	                        return value;
	                    }
	                    return _encodeBlob(value);
	                });
	            }
	            return value;
	        }).then(function (value) {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);

	                    // The reason we don't _save_ null is because IE 10 does
	                    // not support saving the `null` type in IndexedDB. How
	                    // ironic, given the bug below!
	                    // See: https://github.com/mozilla/localForage/issues/161
	                    if (value === null) {
	                        value = undefined;
	                    }

	                    var req = store.put(value, key);

	                    transaction.oncomplete = function () {
	                        // Cast to undefined so the value passed to
	                        // callback/promise is the same as what one would get out
	                        // of `getItem()` later. This leads to some weirdness
	                        // (setItem('foo', undefined) will return `null`), but
	                        // it's not my fault localStorage is our baseline and that
	                        // it's weird.
	                        if (value === undefined) {
	                            value = null;
	                        }

	                        resolve(value);
	                    };
	                    transaction.onabort = transaction.onerror = function () {
	                        var err = req.error ? req.error : req.transaction.error;
	                        reject(err);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function removeItem(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    // We use a Grunt task to make this safe for IE and some
	                    // versions of Android (including those used by Cordova).
	                    // Normally IE won't like `.delete()` and will insist on
	                    // using `['delete']()`, but we have a build step that
	                    // fixes this for us now.
	                    var req = store["delete"](key);
	                    transaction.oncomplete = function () {
	                        resolve();
	                    };

	                    transaction.onerror = function () {
	                        reject(req.error);
	                    };

	                    // The request will be also be aborted if we've exceeded our storage
	                    // space.
	                    transaction.onabort = function () {
	                        var err = req.error ? req.error : req.transaction.error;
	                        reject(err);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function clear(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.clear();

	                    transaction.oncomplete = function () {
	                        resolve();
	                    };

	                    transaction.onabort = transaction.onerror = function () {
	                        var err = req.error ? req.error : req.transaction.error;
	                        reject(err);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function length(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.count();

	                    req.onsuccess = function () {
	                        resolve(req.result);
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function key(n, callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        if (n < 0) {
	            resolve(null);

	            return;
	        }

	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var advanced = false;
	                    var req = store.openKeyCursor();

	                    req.onsuccess = function () {
	                        var cursor = req.result;
	                        if (!cursor) {
	                            // this means there weren't enough keys
	                            resolve(null);

	                            return;
	                        }

	                        if (n === 0) {
	                            // We have the first key, return it if that's what they
	                            // wanted.
	                            resolve(cursor.key);
	                        } else {
	                            if (!advanced) {
	                                // Otherwise, ask the cursor to skip ahead n
	                                // records.
	                                advanced = true;
	                                cursor.advance(n);
	                            } else {
	                                // When we get here, we've got the nth key.
	                                resolve(cursor.key);
	                            }
	                        }
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function keys(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.openKeyCursor();
	                    var keys = [];

	                    req.onsuccess = function () {
	                        var cursor = req.result;

	                        if (!cursor) {
	                            resolve(keys);
	                            return;
	                        }

	                        keys.push(cursor.key);
	                        cursor["continue"]();
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function dropInstance(options, callback) {
	    callback = getCallback.apply(this, arguments);

	    var currentConfig = this.config();
	    options = typeof options !== 'function' && options || {};
	    if (!options.name) {
	        options.name = options.name || currentConfig.name;
	        options.storeName = options.storeName || currentConfig.storeName;
	    }

	    var self = this;
	    var promise;
	    if (!options.name) {
	        promise = Promise$1.reject('Invalid arguments');
	    } else {
	        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;

	        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
	            var dbContext = dbContexts[options.name];
	            var forages = dbContext.forages;
	            dbContext.db = db;
	            for (var i = 0; i < forages.length; i++) {
	                forages[i]._dbInfo.db = db;
	            }
	            return db;
	        });

	        if (!options.storeName) {
	            promise = dbPromise.then(function (db) {
	                _deferReadiness(options);

	                var dbContext = dbContexts[options.name];
	                var forages = dbContext.forages;

	                db.close();
	                for (var i = 0; i < forages.length; i++) {
	                    var forage = forages[i];
	                    forage._dbInfo.db = null;
	                }

	                var dropDBPromise = new Promise$1(function (resolve, reject) {
	                    var req = idb.deleteDatabase(options.name);

	                    req.onerror = function () {
	                        var db = req.result;
	                        if (db) {
	                            db.close();
	                        }
	                        reject(req.error);
	                    };

	                    req.onblocked = function () {
	                        // Closing all open connections in onversionchange handler should prevent this situation, but if
	                        // we do get here, it just means the request remains pending - eventually it will succeed or error
	                        console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
	                    };

	                    req.onsuccess = function () {
	                        var db = req.result;
	                        if (db) {
	                            db.close();
	                        }
	                        resolve(db);
	                    };
	                });

	                return dropDBPromise.then(function (db) {
	                    dbContext.db = db;
	                    for (var i = 0; i < forages.length; i++) {
	                        var _forage = forages[i];
	                        _advanceReadiness(_forage._dbInfo);
	                    }
	                })["catch"](function (err) {
	                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
	                    throw err;
	                });
	            });
	        } else {
	            promise = dbPromise.then(function (db) {
	                if (!db.objectStoreNames.contains(options.storeName)) {
	                    return;
	                }

	                var newVersion = db.version + 1;

	                _deferReadiness(options);

	                var dbContext = dbContexts[options.name];
	                var forages = dbContext.forages;

	                db.close();
	                for (var i = 0; i < forages.length; i++) {
	                    var forage = forages[i];
	                    forage._dbInfo.db = null;
	                    forage._dbInfo.version = newVersion;
	                }

	                var dropObjectPromise = new Promise$1(function (resolve, reject) {
	                    var req = idb.open(options.name, newVersion);

	                    req.onerror = function (err) {
	                        var db = req.result;
	                        db.close();
	                        reject(err);
	                    };

	                    req.onupgradeneeded = function () {
	                        var db = req.result;
	                        db.deleteObjectStore(options.storeName);
	                    };

	                    req.onsuccess = function () {
	                        var db = req.result;
	                        db.close();
	                        resolve(db);
	                    };
	                });

	                return dropObjectPromise.then(function (db) {
	                    dbContext.db = db;
	                    for (var j = 0; j < forages.length; j++) {
	                        var _forage2 = forages[j];
	                        _forage2._dbInfo.db = db;
	                        _advanceReadiness(_forage2._dbInfo);
	                    }
	                })["catch"](function (err) {
	                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
	                    throw err;
	                });
	            });
	        }
	    }

	    executeCallback(promise, callback);
	    return promise;
	}

	var asyncStorage = {
	    _driver: 'asyncStorage',
	    _initStorage: _initStorage,
	    _support: isIndexedDBValid(),
	    iterate: iterate,
	    getItem: getItem,
	    setItem: setItem,
	    removeItem: removeItem,
	    clear: clear,
	    length: length,
	    key: key,
	    keys: keys,
	    dropInstance: dropInstance
	};

	function isWebSQLValid() {
	    return typeof openDatabase === 'function';
	}

	// Sadly, the best way to save binary data in WebSQL/localStorage is serializing
	// it to Base64, so this is how we store it to prevent very strange errors with less
	// verbose ways of binary <-> string data storage.
	var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	var BLOB_TYPE_PREFIX = '~~local_forage_type~';
	var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

	var SERIALIZED_MARKER = '__lfsc__:';
	var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

	// OMG the serializations!
	var TYPE_ARRAYBUFFER = 'arbf';
	var TYPE_BLOB = 'blob';
	var TYPE_INT8ARRAY = 'si08';
	var TYPE_UINT8ARRAY = 'ui08';
	var TYPE_UINT8CLAMPEDARRAY = 'uic8';
	var TYPE_INT16ARRAY = 'si16';
	var TYPE_INT32ARRAY = 'si32';
	var TYPE_UINT16ARRAY = 'ur16';
	var TYPE_UINT32ARRAY = 'ui32';
	var TYPE_FLOAT32ARRAY = 'fl32';
	var TYPE_FLOAT64ARRAY = 'fl64';
	var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

	var toString$1 = Object.prototype.toString;

	function stringToBuffer(serializedString) {
	    // Fill the string into a ArrayBuffer.
	    var bufferLength = serializedString.length * 0.75;
	    var len = serializedString.length;
	    var i;
	    var p = 0;
	    var encoded1, encoded2, encoded3, encoded4;

	    if (serializedString[serializedString.length - 1] === '=') {
	        bufferLength--;
	        if (serializedString[serializedString.length - 2] === '=') {
	            bufferLength--;
	        }
	    }

	    var buffer = new ArrayBuffer(bufferLength);
	    var bytes = new Uint8Array(buffer);

	    for (i = 0; i < len; i += 4) {
	        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
	        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
	        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
	        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

	        /*jslint bitwise: true */
	        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
	        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
	        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
	    }
	    return buffer;
	}

	// Converts a buffer to a string to store, serialized, in the backend
	// storage library.
	function bufferToString(buffer) {
	    // base64-arraybuffer
	    var bytes = new Uint8Array(buffer);
	    var base64String = '';
	    var i;

	    for (i = 0; i < bytes.length; i += 3) {
	        /*jslint bitwise: true */
	        base64String += BASE_CHARS[bytes[i] >> 2];
	        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
	        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
	        base64String += BASE_CHARS[bytes[i + 2] & 63];
	    }

	    if (bytes.length % 3 === 2) {
	        base64String = base64String.substring(0, base64String.length - 1) + '=';
	    } else if (bytes.length % 3 === 1) {
	        base64String = base64String.substring(0, base64String.length - 2) + '==';
	    }

	    return base64String;
	}

	// Serialize a value, afterwards executing a callback (which usually
	// instructs the `setItem()` callback/promise to be executed). This is how
	// we store binary data with localStorage.
	function serialize(value, callback) {
	    var valueType = '';
	    if (value) {
	        valueType = toString$1.call(value);
	    }

	    // Cannot use `value instanceof ArrayBuffer` or such here, as these
	    // checks fail when running the tests using casper.js...
	    //
	    // TODO: See why those tests fail and use a better solution.
	    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
	        // Convert binary arrays to a string and prefix the string with
	        // a special marker.
	        var buffer;
	        var marker = SERIALIZED_MARKER;

	        if (value instanceof ArrayBuffer) {
	            buffer = value;
	            marker += TYPE_ARRAYBUFFER;
	        } else {
	            buffer = value.buffer;

	            if (valueType === '[object Int8Array]') {
	                marker += TYPE_INT8ARRAY;
	            } else if (valueType === '[object Uint8Array]') {
	                marker += TYPE_UINT8ARRAY;
	            } else if (valueType === '[object Uint8ClampedArray]') {
	                marker += TYPE_UINT8CLAMPEDARRAY;
	            } else if (valueType === '[object Int16Array]') {
	                marker += TYPE_INT16ARRAY;
	            } else if (valueType === '[object Uint16Array]') {
	                marker += TYPE_UINT16ARRAY;
	            } else if (valueType === '[object Int32Array]') {
	                marker += TYPE_INT32ARRAY;
	            } else if (valueType === '[object Uint32Array]') {
	                marker += TYPE_UINT32ARRAY;
	            } else if (valueType === '[object Float32Array]') {
	                marker += TYPE_FLOAT32ARRAY;
	            } else if (valueType === '[object Float64Array]') {
	                marker += TYPE_FLOAT64ARRAY;
	            } else {
	                callback(new Error('Failed to get type for BinaryArray'));
	            }
	        }

	        callback(marker + bufferToString(buffer));
	    } else if (valueType === '[object Blob]') {
	        // Conver the blob to a binaryArray and then to a string.
	        var fileReader = new FileReader();

	        fileReader.onload = function () {
	            // Backwards-compatible prefix for the blob type.
	            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

	            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
	        };

	        fileReader.readAsArrayBuffer(value);
	    } else {
	        try {
	            callback(JSON.stringify(value));
	        } catch (e) {
	            console.error("Couldn't convert value into a JSON string: ", value);

	            callback(null, e);
	        }
	    }
	}

	// Deserialize data we've inserted into a value column/field. We place
	// special markers into our strings to mark them as encoded; this isn't
	// as nice as a meta field, but it's the only sane thing we can do whilst
	// keeping localStorage support intact.
	//
	// Oftentimes this will just deserialize JSON content, but if we have a
	// special marker (SERIALIZED_MARKER, defined above), we will extract
	// some kind of arraybuffer/binary data/typed array out of the string.
	function deserialize(value) {
	    // If we haven't marked this string as being specially serialized (i.e.
	    // something other than serialized JSON), we can just return it and be
	    // done with it.
	    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
	        return JSON.parse(value);
	    }

	    // The following code deals with deserializing some kind of Blob or
	    // TypedArray. First we separate out the type of data we're dealing
	    // with from the data itself.
	    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
	    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

	    var blobType;
	    // Backwards-compatible blob type serialization strategy.
	    // DBs created with older versions of localForage will simply not have the blob type.
	    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
	        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
	        blobType = matcher[1];
	        serializedString = serializedString.substring(matcher[0].length);
	    }
	    var buffer = stringToBuffer(serializedString);

	    // Return the right type based on the code/type set during
	    // serialization.
	    switch (type) {
	        case TYPE_ARRAYBUFFER:
	            return buffer;
	        case TYPE_BLOB:
	            return createBlob([buffer], { type: blobType });
	        case TYPE_INT8ARRAY:
	            return new Int8Array(buffer);
	        case TYPE_UINT8ARRAY:
	            return new Uint8Array(buffer);
	        case TYPE_UINT8CLAMPEDARRAY:
	            return new Uint8ClampedArray(buffer);
	        case TYPE_INT16ARRAY:
	            return new Int16Array(buffer);
	        case TYPE_UINT16ARRAY:
	            return new Uint16Array(buffer);
	        case TYPE_INT32ARRAY:
	            return new Int32Array(buffer);
	        case TYPE_UINT32ARRAY:
	            return new Uint32Array(buffer);
	        case TYPE_FLOAT32ARRAY:
	            return new Float32Array(buffer);
	        case TYPE_FLOAT64ARRAY:
	            return new Float64Array(buffer);
	        default:
	            throw new Error('Unkown type: ' + type);
	    }
	}

	var localforageSerializer = {
	    serialize: serialize,
	    deserialize: deserialize,
	    stringToBuffer: stringToBuffer,
	    bufferToString: bufferToString
	};

	/*
	 * Includes code from:
	 *
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */

	function createDbTable(t, dbInfo, callback, errorCallback) {
	    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
	}

	// Open the WebSQL database (automatically creates one if one didn't
	// previously exist), using any options set in the config.
	function _initStorage$1(options) {
	    var self = this;
	    var dbInfo = {
	        db: null
	    };

	    if (options) {
	        for (var i in options) {
	            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
	        }
	    }

	    var dbInfoPromise = new Promise$1(function (resolve, reject) {
	        // Open the database; the openDatabase API will automatically
	        // create it for us if it doesn't exist.
	        try {
	            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
	        } catch (e) {
	            return reject(e);
	        }

	        // Create our key/value table if it doesn't exist.
	        dbInfo.db.transaction(function (t) {
	            createDbTable(t, dbInfo, function () {
	                self._dbInfo = dbInfo;
	                resolve();
	            }, function (t, error) {
	                reject(error);
	            });
	        }, reject);
	    });

	    dbInfo.serializer = localforageSerializer;
	    return dbInfoPromise;
	}

	function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
	    t.executeSql(sqlStatement, args, callback, function (t, error) {
	        if (error.code === error.SYNTAX_ERR) {
	            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
	                if (!results.rows.length) {
	                    // if the table is missing (was deleted)
	                    // re-create it table and retry
	                    createDbTable(t, dbInfo, function () {
	                        t.executeSql(sqlStatement, args, callback, errorCallback);
	                    }, errorCallback);
	                } else {
	                    errorCallback(t, error);
	                }
	            }, errorCallback);
	        } else {
	            errorCallback(t, error);
	        }
	    }, errorCallback);
	}

	function getItem$1(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
	                    var result = results.rows.length ? results.rows.item(0).value : null;

	                    // Check to see if this is serialized content we need to
	                    // unpack.
	                    if (result) {
	                        result = dbInfo.serializer.deserialize(result);
	                    }

	                    resolve(result);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function iterate$1(iterator, callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;

	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
	                    var rows = results.rows;
	                    var length = rows.length;

	                    for (var i = 0; i < length; i++) {
	                        var item = rows.item(i);
	                        var result = item.value;

	                        // Check to see if this is serialized content
	                        // we need to unpack.
	                        if (result) {
	                            result = dbInfo.serializer.deserialize(result);
	                        }

	                        result = iterator(result, item.key, i + 1);

	                        // void(0) prevents problems with redefinition
	                        // of `undefined`.
	                        if (result !== void 0) {
	                            resolve(result);
	                            return;
	                        }
	                    }

	                    resolve();
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function _setItem(key, value, callback, retriesLeft) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            // The localStorage API doesn't return undefined values in an
	            // "expected" way, so undefined is always cast to null in all
	            // drivers. See: https://github.com/mozilla/localForage/pull/42
	            if (value === undefined) {
	                value = null;
	            }

	            // Save the original value to pass to the callback.
	            var originalValue = value;

	            var dbInfo = self._dbInfo;
	            dbInfo.serializer.serialize(value, function (value, error) {
	                if (error) {
	                    reject(error);
	                } else {
	                    dbInfo.db.transaction(function (t) {
	                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
	                            resolve(originalValue);
	                        }, function (t, error) {
	                            reject(error);
	                        });
	                    }, function (sqlError) {
	                        // The transaction failed; check
	                        // to see if it's a quota error.
	                        if (sqlError.code === sqlError.QUOTA_ERR) {
	                            // We reject the callback outright for now, but
	                            // it's worth trying to re-run the transaction.
	                            // Even if the user accepts the prompt to use
	                            // more storage on Safari, this error will
	                            // be called.
	                            //
	                            // Try to re-run the transaction.
	                            if (retriesLeft > 0) {
	                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
	                                return;
	                            }
	                            reject(sqlError);
	                        }
	                    });
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function setItem$1(key, value, callback) {
	    return _setItem.apply(this, [key, value, callback, 1]);
	}

	function removeItem$1(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
	                    resolve();
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Deletes every item in the table.
	// TODO: Find out if this resets the AUTO_INCREMENT number.
	function clear$1(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
	                    resolve();
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Does a simple `COUNT(key)` to get the number of items stored in
	// localForage.
	function length$1(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                // Ahhh, SQL makes this one soooooo easy.
	                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
	                    var result = results.rows.item(0).c;
	                    resolve(result);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Return the key located at key index X; essentially gets the key from a
	// `WHERE id = ?`. This is the most efficient way I can think to implement
	// this rarely-used (in my experience) part of the API, but it can seem
	// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
	// the ID of each key will change every time it's updated. Perhaps a stored
	// procedure for the `setItem()` SQL would solve this problem?
	// TODO: Don't change ID on `setItem()`.
	function key$1(n, callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
	                    var result = results.rows.length ? results.rows.item(0).key : null;
	                    resolve(result);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function keys$1(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
	                    var keys = [];

	                    for (var i = 0; i < results.rows.length; i++) {
	                        keys.push(results.rows.item(i).key);
	                    }

	                    resolve(keys);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// https://www.w3.org/TR/webdatabase/#databases
	// > There is no way to enumerate or delete the databases available for an origin from this API.
	function getAllStoreNames(db) {
	    return new Promise$1(function (resolve, reject) {
	        db.transaction(function (t) {
	            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
	                var storeNames = [];

	                for (var i = 0; i < results.rows.length; i++) {
	                    storeNames.push(results.rows.item(i).name);
	                }

	                resolve({
	                    db: db,
	                    storeNames: storeNames
	                });
	            }, function (t, error) {
	                reject(error);
	            });
	        }, function (sqlError) {
	            reject(sqlError);
	        });
	    });
	}

	function dropInstance$1(options, callback) {
	    callback = getCallback.apply(this, arguments);

	    var currentConfig = this.config();
	    options = typeof options !== 'function' && options || {};
	    if (!options.name) {
	        options.name = options.name || currentConfig.name;
	        options.storeName = options.storeName || currentConfig.storeName;
	    }

	    var self = this;
	    var promise;
	    if (!options.name) {
	        promise = Promise$1.reject('Invalid arguments');
	    } else {
	        promise = new Promise$1(function (resolve) {
	            var db;
	            if (options.name === currentConfig.name) {
	                // use the db reference of the current instance
	                db = self._dbInfo.db;
	            } else {
	                db = openDatabase(options.name, '', '', 0);
	            }

	            if (!options.storeName) {
	                // drop all database tables
	                resolve(getAllStoreNames(db));
	            } else {
	                resolve({
	                    db: db,
	                    storeNames: [options.storeName]
	                });
	            }
	        }).then(function (operationInfo) {
	            return new Promise$1(function (resolve, reject) {
	                operationInfo.db.transaction(function (t) {
	                    function dropTable(storeName) {
	                        return new Promise$1(function (resolve, reject) {
	                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
	                                resolve();
	                            }, function (t, error) {
	                                reject(error);
	                            });
	                        });
	                    }

	                    var operations = [];
	                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
	                        operations.push(dropTable(operationInfo.storeNames[i]));
	                    }

	                    Promise$1.all(operations).then(function () {
	                        resolve();
	                    })["catch"](function (e) {
	                        reject(e);
	                    });
	                }, function (sqlError) {
	                    reject(sqlError);
	                });
	            });
	        });
	    }

	    executeCallback(promise, callback);
	    return promise;
	}

	var webSQLStorage = {
	    _driver: 'webSQLStorage',
	    _initStorage: _initStorage$1,
	    _support: isWebSQLValid(),
	    iterate: iterate$1,
	    getItem: getItem$1,
	    setItem: setItem$1,
	    removeItem: removeItem$1,
	    clear: clear$1,
	    length: length$1,
	    key: key$1,
	    keys: keys$1,
	    dropInstance: dropInstance$1
	};

	function isLocalStorageValid() {
	    try {
	        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&
	        // in IE8 typeof localStorage.setItem === 'object'
	        !!localStorage.setItem;
	    } catch (e) {
	        return false;
	    }
	}

	function _getKeyPrefix(options, defaultConfig) {
	    var keyPrefix = options.name + '/';

	    if (options.storeName !== defaultConfig.storeName) {
	        keyPrefix += options.storeName + '/';
	    }
	    return keyPrefix;
	}

	// Check if localStorage throws when saving an item
	function checkIfLocalStorageThrows() {
	    var localStorageTestKey = '_localforage_support_test';

	    try {
	        localStorage.setItem(localStorageTestKey, true);
	        localStorage.removeItem(localStorageTestKey);

	        return false;
	    } catch (e) {
	        return true;
	    }
	}

	// Check if localStorage is usable and allows to save an item
	// This method checks if localStorage is usable in Safari Private Browsing
	// mode, or in any other case where the available quota for localStorage
	// is 0 and there wasn't any saved items yet.
	function _isLocalStorageUsable() {
	    return !checkIfLocalStorageThrows() || localStorage.length > 0;
	}

	// Config the localStorage backend, using options set in the config.
	function _initStorage$2(options) {
	    var self = this;
	    var dbInfo = {};
	    if (options) {
	        for (var i in options) {
	            dbInfo[i] = options[i];
	        }
	    }

	    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

	    if (!_isLocalStorageUsable()) {
	        return Promise$1.reject();
	    }

	    self._dbInfo = dbInfo;
	    dbInfo.serializer = localforageSerializer;

	    return Promise$1.resolve();
	}

	// Remove all keys from the datastore, effectively destroying all data in
	// the app's key/value store!
	function clear$2(callback) {
	    var self = this;
	    var promise = self.ready().then(function () {
	        var keyPrefix = self._dbInfo.keyPrefix;

	        for (var i = localStorage.length - 1; i >= 0; i--) {
	            var key = localStorage.key(i);

	            if (key.indexOf(keyPrefix) === 0) {
	                localStorage.removeItem(key);
	            }
	        }
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Retrieve an item from the store. Unlike the original async_storage
	// library in Gaia, we don't modify return values at all. If a key's value
	// is `undefined`, we pass that value to the callback function.
	function getItem$2(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        var result = localStorage.getItem(dbInfo.keyPrefix + key);

	        // If a result was found, parse it from the serialized
	        // string into a JS object. If result isn't truthy, the key
	        // is likely undefined and we'll pass it straight to the
	        // callback.
	        if (result) {
	            result = dbInfo.serializer.deserialize(result);
	        }

	        return result;
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Iterate over all items in the store.
	function iterate$2(iterator, callback) {
	    var self = this;

	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        var keyPrefix = dbInfo.keyPrefix;
	        var keyPrefixLength = keyPrefix.length;
	        var length = localStorage.length;

	        // We use a dedicated iterator instead of the `i` variable below
	        // so other keys we fetch in localStorage aren't counted in
	        // the `iterationNumber` argument passed to the `iterate()`
	        // callback.
	        //
	        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
	        var iterationNumber = 1;

	        for (var i = 0; i < length; i++) {
	            var key = localStorage.key(i);
	            if (key.indexOf(keyPrefix) !== 0) {
	                continue;
	            }
	            var value = localStorage.getItem(key);

	            // If a result was found, parse it from the serialized
	            // string into a JS object. If result isn't truthy, the
	            // key is likely undefined and we'll pass it straight
	            // to the iterator.
	            if (value) {
	                value = dbInfo.serializer.deserialize(value);
	            }

	            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

	            if (value !== void 0) {
	                return value;
	            }
	        }
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Same as localStorage's key() method, except takes a callback.
	function key$2(n, callback) {
	    var self = this;
	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        var result;
	        try {
	            result = localStorage.key(n);
	        } catch (error) {
	            result = null;
	        }

	        // Remove the prefix from the key, if a key is found.
	        if (result) {
	            result = result.substring(dbInfo.keyPrefix.length);
	        }

	        return result;
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function keys$2(callback) {
	    var self = this;
	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        var length = localStorage.length;
	        var keys = [];

	        for (var i = 0; i < length; i++) {
	            var itemKey = localStorage.key(i);
	            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
	                keys.push(itemKey.substring(dbInfo.keyPrefix.length));
	            }
	        }

	        return keys;
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Supply the number of keys in the datastore to the callback function.
	function length$2(callback) {
	    var self = this;
	    var promise = self.keys().then(function (keys) {
	        return keys.length;
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Remove an item from the store, nice and simple.
	function removeItem$2(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        localStorage.removeItem(dbInfo.keyPrefix + key);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Set a key's value and run an optional callback once the value is set.
	// Unlike Gaia's implementation, the callback function is passed the value,
	// in case you want to operate on that value only after you're sure it
	// saved, or something like that.
	function setItem$2(key, value, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = self.ready().then(function () {
	        // Convert undefined values to null.
	        // https://github.com/mozilla/localForage/pull/42
	        if (value === undefined) {
	            value = null;
	        }

	        // Save the original value to pass to the callback.
	        var originalValue = value;

	        return new Promise$1(function (resolve, reject) {
	            var dbInfo = self._dbInfo;
	            dbInfo.serializer.serialize(value, function (value, error) {
	                if (error) {
	                    reject(error);
	                } else {
	                    try {
	                        localStorage.setItem(dbInfo.keyPrefix + key, value);
	                        resolve(originalValue);
	                    } catch (e) {
	                        // localStorage capacity exceeded.
	                        // TODO: Make this a specific error/event.
	                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
	                            reject(e);
	                        }
	                        reject(e);
	                    }
	                }
	            });
	        });
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function dropInstance$2(options, callback) {
	    callback = getCallback.apply(this, arguments);

	    options = typeof options !== 'function' && options || {};
	    if (!options.name) {
	        var currentConfig = this.config();
	        options.name = options.name || currentConfig.name;
	        options.storeName = options.storeName || currentConfig.storeName;
	    }

	    var self = this;
	    var promise;
	    if (!options.name) {
	        promise = Promise$1.reject('Invalid arguments');
	    } else {
	        promise = new Promise$1(function (resolve) {
	            if (!options.storeName) {
	                resolve(options.name + '/');
	            } else {
	                resolve(_getKeyPrefix(options, self._defaultConfig));
	            }
	        }).then(function (keyPrefix) {
	            for (var i = localStorage.length - 1; i >= 0; i--) {
	                var key = localStorage.key(i);

	                if (key.indexOf(keyPrefix) === 0) {
	                    localStorage.removeItem(key);
	                }
	            }
	        });
	    }

	    executeCallback(promise, callback);
	    return promise;
	}

	var localStorageWrapper = {
	    _driver: 'localStorageWrapper',
	    _initStorage: _initStorage$2,
	    _support: isLocalStorageValid(),
	    iterate: iterate$2,
	    getItem: getItem$2,
	    setItem: setItem$2,
	    removeItem: removeItem$2,
	    clear: clear$2,
	    length: length$2,
	    key: key$2,
	    keys: keys$2,
	    dropInstance: dropInstance$2
	};

	var sameValue = function sameValue(x, y) {
	    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
	};

	var includes = function includes(array, searchElement) {
	    var len = array.length;
	    var i = 0;
	    while (i < len) {
	        if (sameValue(array[i], searchElement)) {
	            return true;
	        }
	        i++;
	    }

	    return false;
	};

	var isArray = Array.isArray || function (arg) {
	    return Object.prototype.toString.call(arg) === '[object Array]';
	};

	// Drivers are stored here when `defineDriver()` is called.
	// They are shared across all instances of localForage.
	var DefinedDrivers = {};

	var DriverSupport = {};

	var DefaultDrivers = {
	    INDEXEDDB: asyncStorage,
	    WEBSQL: webSQLStorage,
	    LOCALSTORAGE: localStorageWrapper
	};

	var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

	var OptionalDriverMethods = ['dropInstance'];

	var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);

	var DefaultConfig = {
	    description: '',
	    driver: DefaultDriverOrder.slice(),
	    name: 'localforage',
	    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
	    // we can use without a prompt.
	    size: 4980736,
	    storeName: 'keyvaluepairs',
	    version: 1.0
	};

	function callWhenReady(localForageInstance, libraryMethod) {
	    localForageInstance[libraryMethod] = function () {
	        var _args = arguments;
	        return localForageInstance.ready().then(function () {
	            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
	        });
	    };
	}

	function extend() {
	    for (var i = 1; i < arguments.length; i++) {
	        var arg = arguments[i];

	        if (arg) {
	            for (var _key in arg) {
	                if (arg.hasOwnProperty(_key)) {
	                    if (isArray(arg[_key])) {
	                        arguments[0][_key] = arg[_key].slice();
	                    } else {
	                        arguments[0][_key] = arg[_key];
	                    }
	                }
	            }
	        }
	    }

	    return arguments[0];
	}

	var LocalForage = function () {
	    function LocalForage(options) {
	        _classCallCheck(this, LocalForage);

	        for (var driverTypeKey in DefaultDrivers) {
	            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
	                var driver = DefaultDrivers[driverTypeKey];
	                var driverName = driver._driver;
	                this[driverTypeKey] = driverName;

	                if (!DefinedDrivers[driverName]) {
	                    // we don't need to wait for the promise,
	                    // since the default drivers can be defined
	                    // in a blocking manner
	                    this.defineDriver(driver);
	                }
	            }
	        }

	        this._defaultConfig = extend({}, DefaultConfig);
	        this._config = extend({}, this._defaultConfig, options);
	        this._driverSet = null;
	        this._initDriver = null;
	        this._ready = false;
	        this._dbInfo = null;

	        this._wrapLibraryMethodsWithReady();
	        this.setDriver(this._config.driver)["catch"](function () {});
	    }

	    // Set any config values for localForage; can be called anytime before
	    // the first API call (e.g. `getItem`, `setItem`).
	    // We loop through options so we don't overwrite existing config
	    // values.


	    LocalForage.prototype.config = function config(options) {
	        // If the options argument is an object, we use it to set values.
	        // Otherwise, we return either a specified config value or all
	        // config values.
	        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	            // If localforage is ready and fully initialized, we can't set
	            // any new configuration values. Instead, we return an error.
	            if (this._ready) {
	                return new Error("Can't call config() after localforage " + 'has been used.');
	            }

	            for (var i in options) {
	                if (i === 'storeName') {
	                    options[i] = options[i].replace(/\W/g, '_');
	                }

	                if (i === 'version' && typeof options[i] !== 'number') {
	                    return new Error('Database version must be a number.');
	                }

	                this._config[i] = options[i];
	            }

	            // after all config options are set and
	            // the driver option is used, try setting it
	            if ('driver' in options && options.driver) {
	                return this.setDriver(this._config.driver);
	            }

	            return true;
	        } else if (typeof options === 'string') {
	            return this._config[options];
	        } else {
	            return this._config;
	        }
	    };

	    // Used to define a custom driver, shared across all instances of
	    // localForage.


	    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
	        var promise = new Promise$1(function (resolve, reject) {
	            try {
	                var driverName = driverObject._driver;
	                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

	                // A driver name should be defined and not overlap with the
	                // library-defined, default drivers.
	                if (!driverObject._driver) {
	                    reject(complianceError);
	                    return;
	                }

	                var driverMethods = LibraryMethods.concat('_initStorage');
	                for (var i = 0, len = driverMethods.length; i < len; i++) {
	                    var driverMethodName = driverMethods[i];

	                    // when the property is there,
	                    // it should be a method even when optional
	                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
	                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
	                        reject(complianceError);
	                        return;
	                    }
	                }

	                var configureMissingMethods = function configureMissingMethods() {
	                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
	                        return function () {
	                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
	                            var promise = Promise$1.reject(error);
	                            executeCallback(promise, arguments[arguments.length - 1]);
	                            return promise;
	                        };
	                    };

	                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
	                        var optionalDriverMethod = OptionalDriverMethods[_i];
	                        if (!driverObject[optionalDriverMethod]) {
	                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
	                        }
	                    }
	                };

	                configureMissingMethods();

	                var setDriverSupport = function setDriverSupport(support) {
	                    if (DefinedDrivers[driverName]) {
	                        console.info('Redefining LocalForage driver: ' + driverName);
	                    }
	                    DefinedDrivers[driverName] = driverObject;
	                    DriverSupport[driverName] = support;
	                    // don't use a then, so that we can define
	                    // drivers that have simple _support methods
	                    // in a blocking manner
	                    resolve();
	                };

	                if ('_support' in driverObject) {
	                    if (driverObject._support && typeof driverObject._support === 'function') {
	                        driverObject._support().then(setDriverSupport, reject);
	                    } else {
	                        setDriverSupport(!!driverObject._support);
	                    }
	                } else {
	                    setDriverSupport(true);
	                }
	            } catch (e) {
	                reject(e);
	            }
	        });

	        executeTwoCallbacks(promise, callback, errorCallback);
	        return promise;
	    };

	    LocalForage.prototype.driver = function driver() {
	        return this._driver || null;
	    };

	    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
	        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

	        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
	        return getDriverPromise;
	    };

	    LocalForage.prototype.getSerializer = function getSerializer(callback) {
	        var serializerPromise = Promise$1.resolve(localforageSerializer);
	        executeTwoCallbacks(serializerPromise, callback);
	        return serializerPromise;
	    };

	    LocalForage.prototype.ready = function ready(callback) {
	        var self = this;

	        var promise = self._driverSet.then(function () {
	            if (self._ready === null) {
	                self._ready = self._initDriver();
	            }

	            return self._ready;
	        });

	        executeTwoCallbacks(promise, callback, callback);
	        return promise;
	    };

	    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
	        var self = this;

	        if (!isArray(drivers)) {
	            drivers = [drivers];
	        }

	        var supportedDrivers = this._getSupportedDrivers(drivers);

	        function setDriverToConfig() {
	            self._config.driver = self.driver();
	        }

	        function extendSelfWithDriver(driver) {
	            self._extend(driver);
	            setDriverToConfig();

	            self._ready = self._initStorage(self._config);
	            return self._ready;
	        }

	        function initDriver(supportedDrivers) {
	            return function () {
	                var currentDriverIndex = 0;

	                function driverPromiseLoop() {
	                    while (currentDriverIndex < supportedDrivers.length) {
	                        var driverName = supportedDrivers[currentDriverIndex];
	                        currentDriverIndex++;

	                        self._dbInfo = null;
	                        self._ready = null;

	                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
	                    }

	                    setDriverToConfig();
	                    var error = new Error('No available storage method found.');
	                    self._driverSet = Promise$1.reject(error);
	                    return self._driverSet;
	                }

	                return driverPromiseLoop();
	            };
	        }

	        // There might be a driver initialization in progress
	        // so wait for it to finish in order to avoid a possible
	        // race condition to set _dbInfo
	        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
	            return Promise$1.resolve();
	        }) : Promise$1.resolve();

	        this._driverSet = oldDriverSetDone.then(function () {
	            var driverName = supportedDrivers[0];
	            self._dbInfo = null;
	            self._ready = null;

	            return self.getDriver(driverName).then(function (driver) {
	                self._driver = driver._driver;
	                setDriverToConfig();
	                self._wrapLibraryMethodsWithReady();
	                self._initDriver = initDriver(supportedDrivers);
	            });
	        })["catch"](function () {
	            setDriverToConfig();
	            var error = new Error('No available storage method found.');
	            self._driverSet = Promise$1.reject(error);
	            return self._driverSet;
	        });

	        executeTwoCallbacks(this._driverSet, callback, errorCallback);
	        return this._driverSet;
	    };

	    LocalForage.prototype.supports = function supports(driverName) {
	        return !!DriverSupport[driverName];
	    };

	    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
	        extend(this, libraryMethodsAndProperties);
	    };

	    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
	        var supportedDrivers = [];
	        for (var i = 0, len = drivers.length; i < len; i++) {
	            var driverName = drivers[i];
	            if (this.supports(driverName)) {
	                supportedDrivers.push(driverName);
	            }
	        }
	        return supportedDrivers;
	    };

	    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
	        // Add a stub for each driver API method that delays the call to the
	        // corresponding driver method until localForage is ready. These stubs
	        // will be replaced by the driver methods as soon as the driver is
	        // loaded, so there is no performance impact.
	        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
	            callWhenReady(this, LibraryMethods[i]);
	        }
	    };

	    LocalForage.prototype.createInstance = function createInstance(options) {
	        return new LocalForage(options);
	    };

	    return LocalForage;
	}();

	// The actual localForage object that we expose as a module or via a
	// global. It's extended by pulling in one of our other libraries.


	var localforage_js = new LocalForage();

	module.exports = localforage_js;

	},{"3":3}]},{},[4])(4)
	}); 
} (localforage$1));

var localforageExports = localforage$1.exports;
var localforage = /*@__PURE__*/getDefaultExportFromCjs(localforageExports);

var lib$3 = {};

var browser$2 = {exports: {}};

var ms;
var hasRequiredMs;

function requireMs () {
	if (hasRequiredMs) return ms;
	hasRequiredMs = 1;
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s) {
	    return plural(ms, msAbs, s, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}
	return ms;
}

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = requireMs();
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

var common$3 = setup;

(function (module, exports) {
	/**
	 * This is the web browser implementation of `debug()`.
	 */

	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = localstorage();
	exports.destroy = (() => {
		let warned = false;

		return () => {
			if (!warned) {
				warned = true;
				console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
			}
		};
	})();

	/**
	 * Colors.
	 */

	exports.colors = [
		'#0000CC',
		'#0000FF',
		'#0033CC',
		'#0033FF',
		'#0066CC',
		'#0066FF',
		'#0099CC',
		'#0099FF',
		'#00CC00',
		'#00CC33',
		'#00CC66',
		'#00CC99',
		'#00CCCC',
		'#00CCFF',
		'#3300CC',
		'#3300FF',
		'#3333CC',
		'#3333FF',
		'#3366CC',
		'#3366FF',
		'#3399CC',
		'#3399FF',
		'#33CC00',
		'#33CC33',
		'#33CC66',
		'#33CC99',
		'#33CCCC',
		'#33CCFF',
		'#6600CC',
		'#6600FF',
		'#6633CC',
		'#6633FF',
		'#66CC00',
		'#66CC33',
		'#9900CC',
		'#9900FF',
		'#9933CC',
		'#9933FF',
		'#99CC00',
		'#99CC33',
		'#CC0000',
		'#CC0033',
		'#CC0066',
		'#CC0099',
		'#CC00CC',
		'#CC00FF',
		'#CC3300',
		'#CC3333',
		'#CC3366',
		'#CC3399',
		'#CC33CC',
		'#CC33FF',
		'#CC6600',
		'#CC6633',
		'#CC9900',
		'#CC9933',
		'#CCCC00',
		'#CCCC33',
		'#FF0000',
		'#FF0033',
		'#FF0066',
		'#FF0099',
		'#FF00CC',
		'#FF00FF',
		'#FF3300',
		'#FF3333',
		'#FF3366',
		'#FF3399',
		'#FF33CC',
		'#FF33FF',
		'#FF6600',
		'#FF6633',
		'#FF9900',
		'#FF9933',
		'#FFCC00',
		'#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	// eslint-disable-next-line complexity
	function useColors() {
		// NB: In an Electron preload script, document will be defined but not fully
		// initialized. Since we know we're in Chrome, we'll just detect this case
		// explicitly
		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
			return true;
		}

		// Internet Explorer and Edge do not support colors.
		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
			return false;
		}

		// Is webkit? http://stackoverflow.com/a/16459606/376773
		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
			// Is firebug? http://stackoverflow.com/a/398120/376773
			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
			// Is firefox >= v31?
			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
			// Double check webkit in userAgent just in case we are in a worker
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
		args[0] = (this.useColors ? '%c' : '') +
			this.namespace +
			(this.useColors ? ' %c' : ' ') +
			args[0] +
			(this.useColors ? '%c ' : ' ') +
			'+' + module.exports.humanize(this.diff);

		if (!this.useColors) {
			return;
		}

		const c = 'color: ' + this.color;
		args.splice(1, 0, c, 'color: inherit');

		// The final "%c" is somewhat tricky, because there could be other
		// arguments passed either before or after the %c, so we need to
		// figure out the correct index to insert the CSS into
		let index = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, match => {
			if (match === '%%') {
				return;
			}
			index++;
			if (match === '%c') {
				// We only are interested in the *last* %c
				// (the user may have provided their own)
				lastC = index;
			}
		});

		args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.debug()` when available.
	 * No-op when `console.debug` is not a "function".
	 * If `console.debug` is not available, falls back
	 * to `console.log`.
	 *
	 * @api public
	 */
	exports.log = console.debug || console.log || (() => {});

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	function save(namespaces) {
		try {
			if (namespaces) {
				exports.storage.setItem('debug', namespaces);
			} else {
				exports.storage.removeItem('debug');
			}
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	function load() {
		let r;
		try {
			r = exports.storage.getItem('debug');
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}

		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		if (!r && typeof process !== 'undefined' && 'env' in process) {
			r = process.env.DEBUG;
		}

		return r;
	}

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
		try {
			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
			// The Browser also has localStorage in the global context.
			return localStorage;
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	module.exports = common$3(exports);

	const {formatters} = module.exports;

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	formatters.j = function (v) {
		try {
			return JSON.stringify(v);
		} catch (error) {
			return '[UnexpectedJSONParseError]: ' + error.message;
		}
	}; 
} (browser$2, browser$2.exports));

var browserExports = browser$2.exports;

var core$2 = {};

var core$1 = {};

var ReadStreamTokenizer$1 = {};

var AbstractTokenizer$1 = {};

var lib$2 = {};

var EndOfFileStream = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.EndOfStreamError = exports.defaultMessages = void 0;
	exports.defaultMessages = 'End-Of-Stream';
	/**
	 * Thrown on read operation of the end of file or stream has been reached
	 */
	class EndOfStreamError extends Error {
	    constructor() {
	        super(exports.defaultMessages);
	    }
	}
	exports.EndOfStreamError = EndOfStreamError; 
} (EndOfFileStream));

var StreamReader$1 = {};

var Deferred$1 = {};

Object.defineProperty(Deferred$1, "__esModule", { value: true });
Deferred$1.Deferred = void 0;
class Deferred {
    constructor() {
        this.resolve = () => null;
        this.reject = () => null;
        this.promise = new Promise((resolve, reject) => {
            this.reject = reject;
            this.resolve = resolve;
        });
    }
}
Deferred$1.Deferred = Deferred;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.StreamReader = exports.EndOfStreamError = void 0;
	const EndOfFileStream_1 = EndOfFileStream;
	const Deferred_1 = Deferred$1;
	var EndOfFileStream_2 = EndOfFileStream;
	Object.defineProperty(exports, "EndOfStreamError", { enumerable: true, get: function () { return EndOfFileStream_2.EndOfStreamError; } });
	const maxStreamReadSize = 1 * 1024 * 1024; // Maximum request length on read-stream operation
	class StreamReader {
	    constructor(s) {
	        this.s = s;
	        /**
	         * Deferred used for postponed read request (as not data is yet available to read)
	         */
	        this.deferred = null;
	        this.endOfStream = false;
	        /**
	         * Store peeked data
	         * @type {Array}
	         */
	        this.peekQueue = [];
	        if (!s.read || !s.once) {
	            throw new Error('Expected an instance of stream.Readable');
	        }
	        this.s.once('end', () => this.reject(new EndOfFileStream_1.EndOfStreamError()));
	        this.s.once('error', err => this.reject(err));
	        this.s.once('close', () => this.reject(new Error('Stream closed')));
	    }
	    /**
	     * Read ahead (peek) from stream. Subsequent read or peeks will return the same data
	     * @param uint8Array - Uint8Array (or Buffer) to store data read from stream in
	     * @param offset - Offset target
	     * @param length - Number of bytes to read
	     * @returns Number of bytes peeked
	     */
	    async peek(uint8Array, offset, length) {
	        const bytesRead = await this.read(uint8Array, offset, length);
	        this.peekQueue.push(uint8Array.subarray(offset, offset + bytesRead)); // Put read data back to peek buffer
	        return bytesRead;
	    }
	    /**
	     * Read chunk from stream
	     * @param buffer - Target Uint8Array (or Buffer) to store data read from stream in
	     * @param offset - Offset target
	     * @param length - Number of bytes to read
	     * @returns Number of bytes read
	     */
	    async read(buffer, offset, length) {
	        if (length === 0) {
	            return 0;
	        }
	        if (this.peekQueue.length === 0 && this.endOfStream) {
	            throw new EndOfFileStream_1.EndOfStreamError();
	        }
	        let remaining = length;
	        let bytesRead = 0;
	        // consume peeked data first
	        while (this.peekQueue.length > 0 && remaining > 0) {
	            const peekData = this.peekQueue.pop(); // Front of queue
	            if (!peekData)
	                throw new Error('peekData should be defined');
	            const lenCopy = Math.min(peekData.length, remaining);
	            buffer.set(peekData.subarray(0, lenCopy), offset + bytesRead);
	            bytesRead += lenCopy;
	            remaining -= lenCopy;
	            if (lenCopy < peekData.length) {
	                // remainder back to queue
	                this.peekQueue.push(peekData.subarray(lenCopy));
	            }
	        }
	        // continue reading from stream if required
	        while (remaining > 0 && !this.endOfStream) {
	            const reqLen = Math.min(remaining, maxStreamReadSize);
	            const chunkLen = await this.readFromStream(buffer, offset + bytesRead, reqLen);
	            bytesRead += chunkLen;
	            if (chunkLen < reqLen)
	                break;
	            remaining -= chunkLen;
	        }
	        return bytesRead;
	    }
	    /**
	     * Read chunk from stream
	     * @param buffer Target Uint8Array (or Buffer) to store data read from stream in
	     * @param offset Offset target
	     * @param length Number of bytes to read
	     * @returns Number of bytes read
	     */
	    async readFromStream(buffer, offset, length) {
	        const readBuffer = this.s.read(length);
	        if (readBuffer) {
	            buffer.set(readBuffer, offset);
	            return readBuffer.length;
	        }
	        else {
	            const request = {
	                buffer,
	                offset,
	                length,
	                deferred: new Deferred_1.Deferred()
	            };
	            this.deferred = request.deferred;
	            this.s.once('readable', () => {
	                this.readDeferred(request);
	            });
	            return request.deferred.promise;
	        }
	    }
	    /**
	     * Process deferred read request
	     * @param request Deferred read request
	     */
	    readDeferred(request) {
	        const readBuffer = this.s.read(request.length);
	        if (readBuffer) {
	            request.buffer.set(readBuffer, request.offset);
	            request.deferred.resolve(readBuffer.length);
	            this.deferred = null;
	        }
	        else {
	            this.s.once('readable', () => {
	                this.readDeferred(request);
	            });
	        }
	    }
	    reject(err) {
	        this.endOfStream = true;
	        if (this.deferred) {
	            this.deferred.reject(err);
	            this.deferred = null;
	        }
	    }
	}
	exports.StreamReader = StreamReader; 
} (StreamReader$1));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.StreamReader = exports.EndOfStreamError = void 0;
	var EndOfFileStream_1 = EndOfFileStream;
	Object.defineProperty(exports, "EndOfStreamError", { enumerable: true, get: function () { return EndOfFileStream_1.EndOfStreamError; } });
	var StreamReader_1 = StreamReader$1;
	Object.defineProperty(exports, "StreamReader", { enumerable: true, get: function () { return StreamReader_1.StreamReader; } }); 
} (lib$2));

Object.defineProperty(AbstractTokenizer$1, "__esModule", { value: true });
AbstractTokenizer$1.AbstractTokenizer = void 0;
const peek_readable_1$2 = lib$2;
/**
 * Core tokenizer
 */
class AbstractTokenizer {
    constructor(fileInfo) {
        /**
         * Tokenizer-stream position
         */
        this.position = 0;
        this.numBuffer = new Uint8Array(8);
        this.fileInfo = fileInfo ? fileInfo : {};
    }
    /**
     * Read a token from the tokenizer-stream
     * @param token - The token to read
     * @param position - If provided, the desired position in the tokenizer-stream
     * @returns Promise with token data
     */
    async readToken(token, position = this.position) {
        const uint8Array = Buffer.alloc(token.len);
        const len = await this.readBuffer(uint8Array, { position });
        if (len < token.len)
            throw new peek_readable_1$2.EndOfStreamError();
        return token.get(uint8Array, 0);
    }
    /**
     * Peek a token from the tokenizer-stream.
     * @param token - Token to peek from the tokenizer-stream.
     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.
     * @returns Promise with token data
     */
    async peekToken(token, position = this.position) {
        const uint8Array = Buffer.alloc(token.len);
        const len = await this.peekBuffer(uint8Array, { position });
        if (len < token.len)
            throw new peek_readable_1$2.EndOfStreamError();
        return token.get(uint8Array, 0);
    }
    /**
     * Read a numeric token from the stream
     * @param token - Numeric token
     * @returns Promise with number
     */
    async readNumber(token) {
        const len = await this.readBuffer(this.numBuffer, { length: token.len });
        if (len < token.len)
            throw new peek_readable_1$2.EndOfStreamError();
        return token.get(this.numBuffer, 0);
    }
    /**
     * Read a numeric token from the stream
     * @param token - Numeric token
     * @returns Promise with number
     */
    async peekNumber(token) {
        const len = await this.peekBuffer(this.numBuffer, { length: token.len });
        if (len < token.len)
            throw new peek_readable_1$2.EndOfStreamError();
        return token.get(this.numBuffer, 0);
    }
    /**
     * Ignore number of bytes, advances the pointer in under tokenizer-stream.
     * @param length - Number of bytes to ignore
     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available
     */
    async ignore(length) {
        if (this.fileInfo.size !== undefined) {
            const bytesLeft = this.fileInfo.size - this.position;
            if (length > bytesLeft) {
                this.position += bytesLeft;
                return bytesLeft;
            }
        }
        this.position += length;
        return length;
    }
    async close() {
        // empty
    }
    normalizeOptions(uint8Array, options) {
        if (options && options.position !== undefined && options.position < this.position) {
            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');
        }
        if (options) {
            return {
                mayBeLess: options.mayBeLess === true,
                offset: options.offset ? options.offset : 0,
                length: options.length ? options.length : (uint8Array.length - (options.offset ? options.offset : 0)),
                position: options.position ? options.position : this.position
            };
        }
        return {
            mayBeLess: false,
            offset: 0,
            length: uint8Array.length,
            position: this.position
        };
    }
}
AbstractTokenizer$1.AbstractTokenizer = AbstractTokenizer;

Object.defineProperty(ReadStreamTokenizer$1, "__esModule", { value: true });
ReadStreamTokenizer$1.ReadStreamTokenizer = void 0;
const AbstractTokenizer_1$1 = AbstractTokenizer$1;
const peek_readable_1$1 = lib$2;
const maxBufferSize = 256000;
class ReadStreamTokenizer extends AbstractTokenizer_1$1.AbstractTokenizer {
    constructor(stream, fileInfo) {
        super(fileInfo);
        this.streamReader = new peek_readable_1$1.StreamReader(stream);
    }
    /**
     * Get file information, an HTTP-client may implement this doing a HEAD request
     * @return Promise with file information
     */
    async getFileInfo() {
        return this.fileInfo;
    }
    /**
     * Read buffer from tokenizer
     * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream
     * @param options - Read behaviour options
     * @returns Promise with number of bytes read
     */
    async readBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        const skipBytes = normOptions.position - this.position;
        if (skipBytes > 0) {
            await this.ignore(skipBytes);
            return this.readBuffer(uint8Array, options);
        }
        else if (skipBytes < 0) {
            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');
        }
        if (normOptions.length === 0) {
            return 0;
        }
        const bytesRead = await this.streamReader.read(uint8Array, normOptions.offset, normOptions.length);
        this.position += bytesRead;
        if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {
            throw new peek_readable_1$1.EndOfStreamError();
        }
        return bytesRead;
    }
    /**
     * Peek (read ahead) buffer from tokenizer
     * @param uint8Array - Uint8Array (or Buffer) to write data to
     * @param options - Read behaviour options
     * @returns Promise with number of bytes peeked
     */
    async peekBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        let bytesRead = 0;
        if (normOptions.position) {
            const skipBytes = normOptions.position - this.position;
            if (skipBytes > 0) {
                const skipBuffer = new Uint8Array(normOptions.length + skipBytes);
                bytesRead = await this.peekBuffer(skipBuffer, { mayBeLess: normOptions.mayBeLess });
                uint8Array.set(skipBuffer.subarray(skipBytes), normOptions.offset);
                return bytesRead - skipBytes;
            }
            else if (skipBytes < 0) {
                throw new Error('Cannot peek from a negative offset in a stream');
            }
        }
        if (normOptions.length > 0) {
            try {
                bytesRead = await this.streamReader.peek(uint8Array, normOptions.offset, normOptions.length);
            }
            catch (err) {
                if (options && options.mayBeLess && err instanceof peek_readable_1$1.EndOfStreamError) {
                    return 0;
                }
                throw err;
            }
            if ((!normOptions.mayBeLess) && bytesRead < normOptions.length) {
                throw new peek_readable_1$1.EndOfStreamError();
            }
        }
        return bytesRead;
    }
    async ignore(length) {
        // debug(`ignore ${this.position}...${this.position + length - 1}`);
        const bufSize = Math.min(maxBufferSize, length);
        const buf = new Uint8Array(bufSize);
        let totBytesRead = 0;
        while (totBytesRead < length) {
            const remaining = length - totBytesRead;
            const bytesRead = await this.readBuffer(buf, { length: Math.min(bufSize, remaining) });
            if (bytesRead < 0) {
                return bytesRead;
            }
            totBytesRead += bytesRead;
        }
        return totBytesRead;
    }
}
ReadStreamTokenizer$1.ReadStreamTokenizer = ReadStreamTokenizer;

var BufferTokenizer$1 = {};

Object.defineProperty(BufferTokenizer$1, "__esModule", { value: true });
BufferTokenizer$1.BufferTokenizer = void 0;
const peek_readable_1 = lib$2;
const AbstractTokenizer_1 = AbstractTokenizer$1;
class BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {
    /**
     * Construct BufferTokenizer
     * @param uint8Array - Uint8Array to tokenize
     * @param fileInfo - Pass additional file information to the tokenizer
     */
    constructor(uint8Array, fileInfo) {
        super(fileInfo);
        this.uint8Array = uint8Array;
        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;
    }
    /**
     * Read buffer from tokenizer
     * @param uint8Array - Uint8Array to tokenize
     * @param options - Read behaviour options
     * @returns {Promise<number>}
     */
    async readBuffer(uint8Array, options) {
        if (options && options.position) {
            if (options.position < this.position) {
                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');
            }
            this.position = options.position;
        }
        const bytesRead = await this.peekBuffer(uint8Array, options);
        this.position += bytesRead;
        return bytesRead;
    }
    /**
     * Peek (read ahead) buffer from tokenizer
     * @param uint8Array
     * @param options - Read behaviour options
     * @returns {Promise<number>}
     */
    async peekBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);
        if ((!normOptions.mayBeLess) && bytes2read < normOptions.length) {
            throw new peek_readable_1.EndOfStreamError();
        }
        else {
            uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);
            return bytes2read;
        }
    }
    async close() {
        // empty
    }
}
BufferTokenizer$1.BufferTokenizer = BufferTokenizer;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.fromBuffer = exports.fromStream = exports.EndOfStreamError = void 0;
	const ReadStreamTokenizer_1 = ReadStreamTokenizer$1;
	const BufferTokenizer_1 = BufferTokenizer$1;
	var peek_readable_1 = lib$2;
	Object.defineProperty(exports, "EndOfStreamError", { enumerable: true, get: function () { return peek_readable_1.EndOfStreamError; } });
	/**
	 * Construct ReadStreamTokenizer from given Stream.
	 * Will set fileSize, if provided given Stream has set the .path property/
	 * @param stream - Read from Node.js Stream.Readable
	 * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.
	 * @returns ReadStreamTokenizer
	 */
	function fromStream(stream, fileInfo) {
	    fileInfo = fileInfo ? fileInfo : {};
	    return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream, fileInfo);
	}
	exports.fromStream = fromStream;
	/**
	 * Construct ReadStreamTokenizer from given Buffer.
	 * @param uint8Array - Uint8Array to tokenize
	 * @param fileInfo - Pass additional file information to the tokenizer
	 * @returns BufferTokenizer
	 */
	function fromBuffer(uint8Array, fileInfo) {
	    return new BufferTokenizer_1.BufferTokenizer(uint8Array, fileInfo);
	}
	exports.fromBuffer = fromBuffer; 
} (core$1));

var ParserFactory$1 = {};

var lib$1 = {};

var ieee754 = {};

ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = (nBytes * 8) - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
};

ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = (nBytes * 8) - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AnsiStringType = exports.StringType = exports.BufferType = exports.Uint8ArrayType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;
	const ieee754$1 = ieee754;
	// Primitive types
	function dv(array) {
	    return new DataView(array.buffer, array.byteOffset);
	}
	/**
	 * 8-bit unsigned integer
	 */
	exports.UINT8 = {
	    len: 1,
	    get(array, offset) {
	        return dv(array).getUint8(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setUint8(offset, value);
	        return offset + 1;
	    }
	};
	/**
	 * 16-bit unsigned integer, Little Endian byte order
	 */
	exports.UINT16_LE = {
	    len: 2,
	    get(array, offset) {
	        return dv(array).getUint16(offset, true);
	    },
	    put(array, offset, value) {
	        dv(array).setUint16(offset, value, true);
	        return offset + 2;
	    }
	};
	/**
	 * 16-bit unsigned integer, Big Endian byte order
	 */
	exports.UINT16_BE = {
	    len: 2,
	    get(array, offset) {
	        return dv(array).getUint16(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setUint16(offset, value);
	        return offset + 2;
	    }
	};
	/**
	 * 24-bit unsigned integer, Little Endian byte order
	 */
	exports.UINT24_LE = {
	    len: 3,
	    get(array, offset) {
	        const dataView = dv(array);
	        return dataView.getUint8(offset) + (dataView.getUint16(offset + 1, true) << 8);
	    },
	    put(array, offset, value) {
	        const dataView = dv(array);
	        dataView.setUint8(offset, value & 0xff);
	        dataView.setUint16(offset + 1, value >> 8, true);
	        return offset + 3;
	    }
	};
	/**
	 * 24-bit unsigned integer, Big Endian byte order
	 */
	exports.UINT24_BE = {
	    len: 3,
	    get(array, offset) {
	        const dataView = dv(array);
	        return (dataView.getUint16(offset) << 8) + dataView.getUint8(offset + 2);
	    },
	    put(array, offset, value) {
	        const dataView = dv(array);
	        dataView.setUint16(offset, value >> 8);
	        dataView.setUint8(offset + 2, value & 0xff);
	        return offset + 3;
	    }
	};
	/**
	 * 32-bit unsigned integer, Little Endian byte order
	 */
	exports.UINT32_LE = {
	    len: 4,
	    get(array, offset) {
	        return dv(array).getUint32(offset, true);
	    },
	    put(array, offset, value) {
	        dv(array).setUint32(offset, value, true);
	        return offset + 4;
	    }
	};
	/**
	 * 32-bit unsigned integer, Big Endian byte order
	 */
	exports.UINT32_BE = {
	    len: 4,
	    get(array, offset) {
	        return dv(array).getUint32(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setUint32(offset, value);
	        return offset + 4;
	    }
	};
	/**
	 * 8-bit signed integer
	 */
	exports.INT8 = {
	    len: 1,
	    get(array, offset) {
	        return dv(array).getInt8(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setInt8(offset, value);
	        return offset + 1;
	    }
	};
	/**
	 * 16-bit signed integer, Big Endian byte order
	 */
	exports.INT16_BE = {
	    len: 2,
	    get(array, offset) {
	        return dv(array).getInt16(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setInt16(offset, value);
	        return offset + 2;
	    }
	};
	/**
	 * 16-bit signed integer, Little Endian byte order
	 */
	exports.INT16_LE = {
	    len: 2,
	    get(array, offset) {
	        return dv(array).getInt16(offset, true);
	    },
	    put(array, offset, value) {
	        dv(array).setInt16(offset, value, true);
	        return offset + 2;
	    }
	};
	/**
	 * 24-bit signed integer, Little Endian byte order
	 */
	exports.INT24_LE = {
	    len: 3,
	    get(array, offset) {
	        const unsigned = exports.UINT24_LE.get(array, offset);
	        return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;
	    },
	    put(array, offset, value) {
	        const dataView = dv(array);
	        dataView.setUint8(offset, value & 0xff);
	        dataView.setUint16(offset + 1, value >> 8, true);
	        return offset + 3;
	    }
	};
	/**
	 * 24-bit signed integer, Big Endian byte order
	 */
	exports.INT24_BE = {
	    len: 3,
	    get(array, offset) {
	        const unsigned = exports.UINT24_BE.get(array, offset);
	        return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;
	    },
	    put(array, offset, value) {
	        const dataView = dv(array);
	        dataView.setUint16(offset, value >> 8);
	        dataView.setUint8(offset + 2, value & 0xff);
	        return offset + 3;
	    }
	};
	/**
	 * 32-bit signed integer, Big Endian byte order
	 */
	exports.INT32_BE = {
	    len: 4,
	    get(array, offset) {
	        return dv(array).getInt32(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setInt32(offset, value);
	        return offset + 4;
	    }
	};
	/**
	 * 32-bit signed integer, Big Endian byte order
	 */
	exports.INT32_LE = {
	    len: 4,
	    get(array, offset) {
	        return dv(array).getInt32(offset, true);
	    },
	    put(array, offset, value) {
	        dv(array).setInt32(offset, value, true);
	        return offset + 4;
	    }
	};
	/**
	 * 64-bit unsigned integer, Little Endian byte order
	 */
	exports.UINT64_LE = {
	    len: 8,
	    get(array, offset) {
	        return dv(array).getBigUint64(offset, true);
	    },
	    put(array, offset, value) {
	        dv(array).setBigUint64(offset, value, true);
	        return offset + 8;
	    }
	};
	/**
	 * 64-bit signed integer, Little Endian byte order
	 */
	exports.INT64_LE = {
	    len: 8,
	    get(array, offset) {
	        return dv(array).getBigInt64(offset, true);
	    },
	    put(array, offset, value) {
	        dv(array).setBigInt64(offset, value, true);
	        return offset + 8;
	    }
	};
	/**
	 * 64-bit unsigned integer, Big Endian byte order
	 */
	exports.UINT64_BE = {
	    len: 8,
	    get(array, offset) {
	        return dv(array).getBigUint64(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setBigUint64(offset, value);
	        return offset + 8;
	    }
	};
	/**
	 * 64-bit signed integer, Big Endian byte order
	 */
	exports.INT64_BE = {
	    len: 8,
	    get(array, offset) {
	        return dv(array).getBigInt64(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setBigInt64(offset, value);
	        return offset + 8;
	    }
	};
	/**
	 * IEEE 754 16-bit (half precision) float, big endian
	 */
	exports.Float16_BE = {
	    len: 2,
	    get(dataView, offset) {
	        return ieee754$1.read(dataView, offset, false, 10, this.len);
	    },
	    put(dataView, offset, value) {
	        ieee754$1.write(dataView, value, offset, false, 10, this.len);
	        return offset + this.len;
	    }
	};
	/**
	 * IEEE 754 16-bit (half precision) float, little endian
	 */
	exports.Float16_LE = {
	    len: 2,
	    get(array, offset) {
	        return ieee754$1.read(array, offset, true, 10, this.len);
	    },
	    put(array, offset, value) {
	        ieee754$1.write(array, value, offset, true, 10, this.len);
	        return offset + this.len;
	    }
	};
	/**
	 * IEEE 754 32-bit (single precision) float, big endian
	 */
	exports.Float32_BE = {
	    len: 4,
	    get(array, offset) {
	        return dv(array).getFloat32(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setFloat32(offset, value);
	        return offset + 4;
	    }
	};
	/**
	 * IEEE 754 32-bit (single precision) float, little endian
	 */
	exports.Float32_LE = {
	    len: 4,
	    get(array, offset) {
	        return dv(array).getFloat32(offset, true);
	    },
	    put(array, offset, value) {
	        dv(array).setFloat32(offset, value, true);
	        return offset + 4;
	    }
	};
	/**
	 * IEEE 754 64-bit (double precision) float, big endian
	 */
	exports.Float64_BE = {
	    len: 8,
	    get(array, offset) {
	        return dv(array).getFloat64(offset);
	    },
	    put(array, offset, value) {
	        dv(array).setFloat64(offset, value);
	        return offset + 8;
	    }
	};
	/**
	 * IEEE 754 64-bit (double precision) float, little endian
	 */
	exports.Float64_LE = {
	    len: 8,
	    get(array, offset) {
	        return dv(array).getFloat64(offset, true);
	    },
	    put(array, offset, value) {
	        dv(array).setFloat64(offset, value, true);
	        return offset + 8;
	    }
	};
	/**
	 * IEEE 754 80-bit (extended precision) float, big endian
	 */
	exports.Float80_BE = {
	    len: 10,
	    get(array, offset) {
	        return ieee754$1.read(array, offset, false, 63, this.len);
	    },
	    put(array, offset, value) {
	        ieee754$1.write(array, value, offset, false, 63, this.len);
	        return offset + this.len;
	    }
	};
	/**
	 * IEEE 754 80-bit (extended precision) float, little endian
	 */
	exports.Float80_LE = {
	    len: 10,
	    get(array, offset) {
	        return ieee754$1.read(array, offset, true, 63, this.len);
	    },
	    put(array, offset, value) {
	        ieee754$1.write(array, value, offset, true, 63, this.len);
	        return offset + this.len;
	    }
	};
	/**
	 * Ignore a given number of bytes
	 */
	class IgnoreType {
	    /**
	     * @param len number of bytes to ignore
	     */
	    constructor(len) {
	        this.len = len;
	    }
	    // ToDo: don't read, but skip data
	    get(array, off) {
	    }
	}
	exports.IgnoreType = IgnoreType;
	class Uint8ArrayType {
	    constructor(len) {
	        this.len = len;
	    }
	    get(array, offset) {
	        return array.subarray(offset, offset + this.len);
	    }
	}
	exports.Uint8ArrayType = Uint8ArrayType;
	class BufferType {
	    constructor(len) {
	        this.len = len;
	    }
	    get(uint8Array, off) {
	        return Buffer.from(uint8Array.subarray(off, off + this.len));
	    }
	}
	exports.BufferType = BufferType;
	/**
	 * Consume a fixed number of bytes from the stream and return a string with a specified encoding.
	 */
	class StringType {
	    constructor(len, encoding) {
	        this.len = len;
	        this.encoding = encoding;
	    }
	    get(uint8Array, offset) {
	        return Buffer.from(uint8Array).toString(this.encoding, offset, offset + this.len);
	    }
	}
	exports.StringType = StringType;
	/**
	 * ANSI Latin 1 String
	 * Using windows-1252 / ISO 8859-1 decoding
	 */
	class AnsiStringType {
	    constructor(len) {
	        this.len = len;
	    }
	    static decode(buffer, offset, until) {
	        let str = '';
	        for (let i = offset; i < until; ++i) {
	            str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));
	        }
	        return str;
	    }
	    static inRange(a, min, max) {
	        return min <= a && a <= max;
	    }
	    static codePointToString(cp) {
	        if (cp <= 0xFFFF) {
	            return String.fromCharCode(cp);
	        }
	        else {
	            cp -= 0x10000;
	            return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);
	        }
	    }
	    static singleByteDecoder(bite) {
	        if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {
	            return bite;
	        }
	        const codePoint = AnsiStringType.windows1252[bite - 0x80];
	        if (codePoint === null) {
	            throw Error('invaliding encoding');
	        }
	        return codePoint;
	    }
	    get(buffer, offset = 0) {
	        return AnsiStringType.decode(buffer, offset, offset + this.len);
	    }
	}
	exports.AnsiStringType = AnsiStringType;
	AnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,
	    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,
	    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	    248, 249, 250, 251, 252, 253, 254, 255]; 
} (lib$1));

var util$b = {};

util$b.stringToBytes = string => [...string].map(character => character.charCodeAt(0));

/**
Checks whether the TAR checksum is valid.

@param {Buffer} buffer - The TAR header `[offset ... offset + 512]`.
@param {number} offset - TAR header offset.
@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.
*/
util$b.tarHeaderChecksumMatches = (buffer, offset = 0) => {
	const readSum = parseInt(buffer.toString('utf8', 148, 154).replace(/\0.*$/, '').trim(), 8); // Read sum in header
	if (isNaN(readSum)) {
		return false;
	}

	let sum = 8 * 0x20; // Initialize signed bit sum

	for (let i = offset; i < offset + 148; i++) {
		sum += buffer[i];
	}

	for (let i = offset + 156; i < offset + 512; i++) {
		sum += buffer[i];
	}

	return readSum === sum;
};

/**
ID3 UINT32 sync-safe tokenizer token.
28 bits (representing up to 256MB) integer, the msb is 0 to avoid "false syncsignals".
*/
util$b.uint32SyncSafeToken = {
	get: (buffer, offset) => {
		return (buffer[offset + 3] & 0x7F) | ((buffer[offset + 2]) << 7) | ((buffer[offset + 1]) << 14) | ((buffer[offset]) << 21);
	},
	len: 4
};

var supported$1 = {
	extensions: [
		'jpg',
		'png',
		'apng',
		'gif',
		'webp',
		'flif',
		'xcf',
		'cr2',
		'cr3',
		'orf',
		'arw',
		'dng',
		'nef',
		'rw2',
		'raf',
		'tif',
		'bmp',
		'icns',
		'jxr',
		'psd',
		'indd',
		'zip',
		'tar',
		'rar',
		'gz',
		'bz2',
		'7z',
		'dmg',
		'mp4',
		'mid',
		'mkv',
		'webm',
		'mov',
		'avi',
		'mpg',
		'mp2',
		'mp3',
		'm4a',
		'oga',
		'ogg',
		'ogv',
		'opus',
		'flac',
		'wav',
		'spx',
		'amr',
		'pdf',
		'epub',
		'exe',
		'swf',
		'rtf',
		'wasm',
		'woff',
		'woff2',
		'eot',
		'ttf',
		'otf',
		'ico',
		'flv',
		'ps',
		'xz',
		'sqlite',
		'nes',
		'crx',
		'xpi',
		'cab',
		'deb',
		'ar',
		'rpm',
		'Z',
		'lz',
		'cfb',
		'mxf',
		'mts',
		'blend',
		'bpg',
		'docx',
		'pptx',
		'xlsx',
		'3gp',
		'3g2',
		'jp2',
		'jpm',
		'jpx',
		'mj2',
		'aif',
		'qcp',
		'odt',
		'ods',
		'odp',
		'xml',
		'mobi',
		'heic',
		'cur',
		'ktx',
		'ape',
		'wv',
		'dcm',
		'ics',
		'glb',
		'pcap',
		'dsf',
		'lnk',
		'alias',
		'voc',
		'ac3',
		'm4v',
		'm4p',
		'm4b',
		'f4v',
		'f4p',
		'f4b',
		'f4a',
		'mie',
		'asf',
		'ogm',
		'ogx',
		'mpc',
		'arrow',
		'shp',
		'aac',
		'mp1',
		'it',
		's3m',
		'xm',
		'ai',
		'skp',
		'avif',
		'eps',
		'lzh',
		'pgp',
		'asar',
		'stl',
		'chm',
		'3mf',
		'zst',
		'jxl',
		'vcf'
	],
	mimeTypes: [
		'image/jpeg',
		'image/png',
		'image/gif',
		'image/webp',
		'image/flif',
		'image/x-xcf',
		'image/x-canon-cr2',
		'image/x-canon-cr3',
		'image/tiff',
		'image/bmp',
		'image/vnd.ms-photo',
		'image/vnd.adobe.photoshop',
		'application/x-indesign',
		'application/epub+zip',
		'application/x-xpinstall',
		'application/vnd.oasis.opendocument.text',
		'application/vnd.oasis.opendocument.spreadsheet',
		'application/vnd.oasis.opendocument.presentation',
		'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
		'application/vnd.openxmlformats-officedocument.presentationml.presentation',
		'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
		'application/zip',
		'application/x-tar',
		'application/x-rar-compressed',
		'application/gzip',
		'application/x-bzip2',
		'application/x-7z-compressed',
		'application/x-apple-diskimage',
		'application/x-apache-arrow',
		'video/mp4',
		'audio/midi',
		'video/x-matroska',
		'video/webm',
		'video/quicktime',
		'video/vnd.avi',
		'audio/vnd.wave',
		'audio/qcelp',
		'audio/x-ms-asf',
		'video/x-ms-asf',
		'application/vnd.ms-asf',
		'video/mpeg',
		'video/3gpp',
		'audio/mpeg',
		'audio/mp4', // RFC 4337
		'audio/opus',
		'video/ogg',
		'audio/ogg',
		'application/ogg',
		'audio/x-flac',
		'audio/ape',
		'audio/wavpack',
		'audio/amr',
		'application/pdf',
		'application/x-msdownload',
		'application/x-shockwave-flash',
		'application/rtf',
		'application/wasm',
		'font/woff',
		'font/woff2',
		'application/vnd.ms-fontobject',
		'font/ttf',
		'font/otf',
		'image/x-icon',
		'video/x-flv',
		'application/postscript',
		'application/eps',
		'application/x-xz',
		'application/x-sqlite3',
		'application/x-nintendo-nes-rom',
		'application/x-google-chrome-extension',
		'application/vnd.ms-cab-compressed',
		'application/x-deb',
		'application/x-unix-archive',
		'application/x-rpm',
		'application/x-compress',
		'application/x-lzip',
		'application/x-cfb',
		'application/x-mie',
		'application/mxf',
		'video/mp2t',
		'application/x-blender',
		'image/bpg',
		'image/jp2',
		'image/jpx',
		'image/jpm',
		'image/mj2',
		'audio/aiff',
		'application/xml',
		'application/x-mobipocket-ebook',
		'image/heif',
		'image/heif-sequence',
		'image/heic',
		'image/heic-sequence',
		'image/icns',
		'image/ktx',
		'application/dicom',
		'audio/x-musepack',
		'text/calendar',
		'text/vcard',
		'model/gltf-binary',
		'application/vnd.tcpdump.pcap',
		'audio/x-dsf', // Non-standard
		'application/x.ms.shortcut', // Invented by us
		'application/x.apple.alias', // Invented by us
		'audio/x-voc',
		'audio/vnd.dolby.dd-raw',
		'audio/x-m4a',
		'image/apng',
		'image/x-olympus-orf',
		'image/x-sony-arw',
		'image/x-adobe-dng',
		'image/x-nikon-nef',
		'image/x-panasonic-rw2',
		'image/x-fujifilm-raf',
		'video/x-m4v',
		'video/3gpp2',
		'application/x-esri-shape',
		'audio/aac',
		'audio/x-it',
		'audio/x-s3m',
		'audio/x-xm',
		'video/MP1S',
		'video/MP2P',
		'application/vnd.sketchup.skp',
		'image/avif',
		'application/x-lzh-compressed',
		'application/pgp-encrypted',
		'application/x-asar',
		'model/stl',
		'application/vnd.ms-htmlhelp',
		'model/3mf',
		'image/jxl',
		'application/zstd'
	]
};

const Token$s = lib$1;
const strtok3$5 = core$1;
const {
	stringToBytes,
	tarHeaderChecksumMatches,
	uint32SyncSafeToken
} = util$b;
const supported = supported$1;

const minimumBytes = 4100; // A fair amount of file-types are detectable within this range

async function fromStream(stream) {
	const tokenizer = await strtok3$5.fromStream(stream);
	try {
		return await fromTokenizer(tokenizer);
	} finally {
		await tokenizer.close();
	}
}

async function fromBuffer(input) {
	if (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {
		throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof input}\``);
	}

	const buffer = input instanceof Buffer ? input : Buffer.from(input);

	if (!(buffer && buffer.length > 1)) {
		return;
	}

	const tokenizer = strtok3$5.fromBuffer(buffer);
	return fromTokenizer(tokenizer);
}

function _check(buffer, headers, options) {
	options = {
		offset: 0,
		...options
	};

	for (const [index, header] of headers.entries()) {
		// If a bitmask is set
		if (options.mask) {
			// If header doesn't equal `buf` with bits masked off
			if (header !== (options.mask[index] & buffer[index + options.offset])) {
				return false;
			}
		} else if (header !== buffer[index + options.offset]) {
			return false;
		}
	}

	return true;
}

async function fromTokenizer(tokenizer) {
	try {
		return _fromTokenizer(tokenizer);
	} catch (error) {
		if (!(error instanceof strtok3$5.EndOfStreamError)) {
			throw error;
		}
	}
}

async function _fromTokenizer(tokenizer) {
	let buffer = Buffer.alloc(minimumBytes);
	const bytesRead = 12;
	const check = (header, options) => _check(buffer, header, options);
	const checkString = (header, options) => check(stringToBytes(header), options);

	// Keep reading until EOF if the file size is unknown.
	if (!tokenizer.fileInfo.size) {
		tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;
	}

	await tokenizer.peekBuffer(buffer, {length: bytesRead, mayBeLess: true});

	// -- 2-byte signatures --

	if (check([0x42, 0x4D])) {
		return {
			ext: 'bmp',
			mime: 'image/bmp'
		};
	}

	if (check([0x0B, 0x77])) {
		return {
			ext: 'ac3',
			mime: 'audio/vnd.dolby.dd-raw'
		};
	}

	if (check([0x78, 0x01])) {
		return {
			ext: 'dmg',
			mime: 'application/x-apple-diskimage'
		};
	}

	if (check([0x4D, 0x5A])) {
		return {
			ext: 'exe',
			mime: 'application/x-msdownload'
		};
	}

	if (check([0x25, 0x21])) {
		await tokenizer.peekBuffer(buffer, {length: 24, mayBeLess: true});

		if (checkString('PS-Adobe-', {offset: 2}) &&
			checkString(' EPSF-', {offset: 14})) {
			return {
				ext: 'eps',
				mime: 'application/eps'
			};
		}

		return {
			ext: 'ps',
			mime: 'application/postscript'
		};
	}

	if (
		check([0x1F, 0xA0]) ||
		check([0x1F, 0x9D])
	) {
		return {
			ext: 'Z',
			mime: 'application/x-compress'
		};
	}

	// -- 3-byte signatures --

	if (check([0xFF, 0xD8, 0xFF])) {
		return {
			ext: 'jpg',
			mime: 'image/jpeg'
		};
	}

	if (check([0x49, 0x49, 0xBC])) {
		return {
			ext: 'jxr',
			mime: 'image/vnd.ms-photo'
		};
	}

	if (check([0x1F, 0x8B, 0x8])) {
		return {
			ext: 'gz',
			mime: 'application/gzip'
		};
	}

	if (check([0x42, 0x5A, 0x68])) {
		return {
			ext: 'bz2',
			mime: 'application/x-bzip2'
		};
	}

	if (checkString('ID3')) {
		await tokenizer.ignore(6); // Skip ID3 header until the header size
		const id3HeaderLen = await tokenizer.readToken(uint32SyncSafeToken);
		if (tokenizer.position + id3HeaderLen > tokenizer.fileInfo.size) {
			// Guess file type based on ID3 header for backward compatibility
			return {
				ext: 'mp3',
				mime: 'audio/mpeg'
			};
		}

		await tokenizer.ignore(id3HeaderLen);
		return fromTokenizer(tokenizer); // Skip ID3 header, recursion
	}

	// Musepack, SV7
	if (checkString('MP+')) {
		return {
			ext: 'mpc',
			mime: 'audio/x-musepack'
		};
	}

	if (
		(buffer[0] === 0x43 || buffer[0] === 0x46) &&
		check([0x57, 0x53], {offset: 1})
	) {
		return {
			ext: 'swf',
			mime: 'application/x-shockwave-flash'
		};
	}

	// -- 4-byte signatures --

	if (check([0x47, 0x49, 0x46])) {
		return {
			ext: 'gif',
			mime: 'image/gif'
		};
	}

	if (checkString('FLIF')) {
		return {
			ext: 'flif',
			mime: 'image/flif'
		};
	}

	if (checkString('8BPS')) {
		return {
			ext: 'psd',
			mime: 'image/vnd.adobe.photoshop'
		};
	}

	if (checkString('WEBP', {offset: 8})) {
		return {
			ext: 'webp',
			mime: 'image/webp'
		};
	}

	// Musepack, SV8
	if (checkString('MPCK')) {
		return {
			ext: 'mpc',
			mime: 'audio/x-musepack'
		};
	}

	if (checkString('FORM')) {
		return {
			ext: 'aif',
			mime: 'audio/aiff'
		};
	}

	if (checkString('icns', {offset: 0})) {
		return {
			ext: 'icns',
			mime: 'image/icns'
		};
	}

	// Zip-based file formats
	// Need to be before the `zip` check
	if (check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature
		try {
			while (tokenizer.position + 30 < tokenizer.fileInfo.size) {
				await tokenizer.readBuffer(buffer, {length: 30});

				// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers
				const zipHeader = {
					compressedSize: buffer.readUInt32LE(18),
					uncompressedSize: buffer.readUInt32LE(22),
					filenameLength: buffer.readUInt16LE(26),
					extraFieldLength: buffer.readUInt16LE(28)
				};

				zipHeader.filename = await tokenizer.readToken(new Token$s.StringType(zipHeader.filenameLength, 'utf-8'));
				await tokenizer.ignore(zipHeader.extraFieldLength);

				// Assumes signed `.xpi` from addons.mozilla.org
				if (zipHeader.filename === 'META-INF/mozilla.rsa') {
					return {
						ext: 'xpi',
						mime: 'application/x-xpinstall'
					};
				}

				if (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {
					const type = zipHeader.filename.split('/')[0];
					switch (type) {
						case '_rels':
							break;
						case 'word':
							return {
								ext: 'docx',
								mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
							};
						case 'ppt':
							return {
								ext: 'pptx',
								mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
							};
						case 'xl':
							return {
								ext: 'xlsx',
								mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
							};
						default:
							break;
					}
				}

				if (zipHeader.filename.startsWith('xl/')) {
					return {
						ext: 'xlsx',
						mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
					};
				}

				if (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {
					return {
						ext: '3mf',
						mime: 'model/3mf'
					};
				}

				// The docx, xlsx and pptx file types extend the Office Open XML file format:
				// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats
				// We look for:
				// - one entry named '[Content_Types].xml' or '_rels/.rels',
				// - one entry indicating specific type of file.
				// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.
				if (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {
					const mimeType = await tokenizer.readToken(new Token$s.StringType(zipHeader.compressedSize, 'utf-8'));

					switch (mimeType) {
						case 'application/epub+zip':
							return {
								ext: 'epub',
								mime: 'application/epub+zip'
							};
						case 'application/vnd.oasis.opendocument.text':
							return {
								ext: 'odt',
								mime: 'application/vnd.oasis.opendocument.text'
							};
						case 'application/vnd.oasis.opendocument.spreadsheet':
							return {
								ext: 'ods',
								mime: 'application/vnd.oasis.opendocument.spreadsheet'
							};
						case 'application/vnd.oasis.opendocument.presentation':
							return {
								ext: 'odp',
								mime: 'application/vnd.oasis.opendocument.presentation'
							};
						default:
					}
				}

				// Try to find next header manually when current one is corrupted
				if (zipHeader.compressedSize === 0) {
					let nextHeaderIndex = -1;

					while (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {
						await tokenizer.peekBuffer(buffer, {mayBeLess: true});

						nextHeaderIndex = buffer.indexOf('504B0304', 0, 'hex');
						// Move position to the next header if found, skip the whole buffer otherwise
						await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : buffer.length);
					}
				} else {
					await tokenizer.ignore(zipHeader.compressedSize);
				}
			}
		} catch (error) {
			if (!(error instanceof strtok3$5.EndOfStreamError)) {
				throw error;
			}
		}

		return {
			ext: 'zip',
			mime: 'application/zip'
		};
	}

	if (checkString('OggS')) {
		// This is an OGG container
		await tokenizer.ignore(28);
		const type = Buffer.alloc(8);
		await tokenizer.readBuffer(type);

		// Needs to be before `ogg` check
		if (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {
			return {
				ext: 'opus',
				mime: 'audio/opus'
			};
		}

		// If ' theora' in header.
		if (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {
			return {
				ext: 'ogv',
				mime: 'video/ogg'
			};
		}

		// If '\x01video' in header.
		if (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {
			return {
				ext: 'ogm',
				mime: 'video/ogg'
			};
		}

		// If ' FLAC' in header  https://xiph.org/flac/faq.html
		if (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {
			return {
				ext: 'oga',
				mime: 'audio/ogg'
			};
		}

		// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex
		if (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {
			return {
				ext: 'spx',
				mime: 'audio/ogg'
			};
		}

		// If '\x01vorbis' in header
		if (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {
			return {
				ext: 'ogg',
				mime: 'audio/ogg'
			};
		}

		// Default OGG container https://www.iana.org/assignments/media-types/application/ogg
		return {
			ext: 'ogx',
			mime: 'application/ogg'
		};
	}

	if (
		check([0x50, 0x4B]) &&
		(buffer[2] === 0x3 || buffer[2] === 0x5 || buffer[2] === 0x7) &&
		(buffer[3] === 0x4 || buffer[3] === 0x6 || buffer[3] === 0x8)
	) {
		return {
			ext: 'zip',
			mime: 'application/zip'
		};
	}

	//

	// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)
	// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.
	// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.
	// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).
	if (
		checkString('ftyp', {offset: 4}) &&
		(buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?
	) {
		// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.
		// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.
		const brandMajor = buffer.toString('binary', 8, 12).replace('\0', ' ').trim();
		switch (brandMajor) {
			case 'avif':
				return {ext: 'avif', mime: 'image/avif'};
			case 'mif1':
				return {ext: 'heic', mime: 'image/heif'};
			case 'msf1':
				return {ext: 'heic', mime: 'image/heif-sequence'};
			case 'heic':
			case 'heix':
				return {ext: 'heic', mime: 'image/heic'};
			case 'hevc':
			case 'hevx':
				return {ext: 'heic', mime: 'image/heic-sequence'};
			case 'qt':
				return {ext: 'mov', mime: 'video/quicktime'};
			case 'M4V':
			case 'M4VH':
			case 'M4VP':
				return {ext: 'm4v', mime: 'video/x-m4v'};
			case 'M4P':
				return {ext: 'm4p', mime: 'video/mp4'};
			case 'M4B':
				return {ext: 'm4b', mime: 'audio/mp4'};
			case 'M4A':
				return {ext: 'm4a', mime: 'audio/x-m4a'};
			case 'F4V':
				return {ext: 'f4v', mime: 'video/mp4'};
			case 'F4P':
				return {ext: 'f4p', mime: 'video/mp4'};
			case 'F4A':
				return {ext: 'f4a', mime: 'audio/mp4'};
			case 'F4B':
				return {ext: 'f4b', mime: 'audio/mp4'};
			case 'crx':
				return {ext: 'cr3', mime: 'image/x-canon-cr3'};
			default:
				if (brandMajor.startsWith('3g')) {
					if (brandMajor.startsWith('3g2')) {
						return {ext: '3g2', mime: 'video/3gpp2'};
					}

					return {ext: '3gp', mime: 'video/3gpp'};
				}

				return {ext: 'mp4', mime: 'video/mp4'};
		}
	}

	if (checkString('MThd')) {
		return {
			ext: 'mid',
			mime: 'audio/midi'
		};
	}

	if (
		checkString('wOFF') &&
		(
			check([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||
			checkString('OTTO', {offset: 4})
		)
	) {
		return {
			ext: 'woff',
			mime: 'font/woff'
		};
	}

	if (
		checkString('wOF2') &&
		(
			check([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||
			checkString('OTTO', {offset: 4})
		)
	) {
		return {
			ext: 'woff2',
			mime: 'font/woff2'
		};
	}

	if (check([0xD4, 0xC3, 0xB2, 0xA1]) || check([0xA1, 0xB2, 0xC3, 0xD4])) {
		return {
			ext: 'pcap',
			mime: 'application/vnd.tcpdump.pcap'
		};
	}

	// Sony DSD Stream File (DSF)
	if (checkString('DSD ')) {
		return {
			ext: 'dsf',
			mime: 'audio/x-dsf' // Non-standard
		};
	}

	if (checkString('LZIP')) {
		return {
			ext: 'lz',
			mime: 'application/x-lzip'
		};
	}

	if (checkString('fLaC')) {
		return {
			ext: 'flac',
			mime: 'audio/x-flac'
		};
	}

	if (check([0x42, 0x50, 0x47, 0xFB])) {
		return {
			ext: 'bpg',
			mime: 'image/bpg'
		};
	}

	if (checkString('wvpk')) {
		return {
			ext: 'wv',
			mime: 'audio/wavpack'
		};
	}

	if (checkString('%PDF')) {
		await tokenizer.ignore(1350);
		const maxBufferSize = 10 * 1024 * 1024;
		const buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));
		await tokenizer.readBuffer(buffer, {mayBeLess: true});

		// Check if this is an Adobe Illustrator file
		if (buffer.includes(Buffer.from('AIPrivateData'))) {
			return {
				ext: 'ai',
				mime: 'application/postscript'
			};
		}

		// Assume this is just a normal PDF
		return {
			ext: 'pdf',
			mime: 'application/pdf'
		};
	}

	if (check([0x00, 0x61, 0x73, 0x6D])) {
		return {
			ext: 'wasm',
			mime: 'application/wasm'
		};
	}

	// TIFF, little-endian type
	if (check([0x49, 0x49, 0x2A, 0x0])) {
		if (checkString('CR', {offset: 8})) {
			return {
				ext: 'cr2',
				mime: 'image/x-canon-cr2'
			};
		}

		if (check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || check([0x1F, 0x00, 0x0B, 0x00], {offset: 8})) {
			return {
				ext: 'nef',
				mime: 'image/x-nikon-nef'
			};
		}

		if (
			check([0x08, 0x00, 0x00, 0x00], {offset: 4}) &&
			(check([0x2D, 0x00, 0xFE, 0x00], {offset: 8}) ||
				check([0x27, 0x00, 0xFE, 0x00], {offset: 8}))
		) {
			return {
				ext: 'dng',
				mime: 'image/x-adobe-dng'
			};
		}

		buffer = Buffer.alloc(24);
		await tokenizer.peekBuffer(buffer);
		if (
			(check([0x10, 0xFB, 0x86, 0x01], {offset: 4}) || check([0x08, 0x00, 0x00, 0x00], {offset: 4})) &&
			// This pattern differentiates ARW from other TIFF-ish file types:
			check([0x00, 0xFE, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01], {offset: 9})
		) {
			return {
				ext: 'arw',
				mime: 'image/x-sony-arw'
			};
		}

		return {
			ext: 'tif',
			mime: 'image/tiff'
		};
	}

	// TIFF, big-endian type
	if (check([0x4D, 0x4D, 0x0, 0x2A])) {
		return {
			ext: 'tif',
			mime: 'image/tiff'
		};
	}

	if (checkString('MAC ')) {
		return {
			ext: 'ape',
			mime: 'audio/ape'
		};
	}

	// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska
	if (check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML
		async function readField() {
			const msb = await tokenizer.peekNumber(Token$s.UINT8);
			let mask = 0x80;
			let ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D

			while ((msb & mask) === 0 && mask !== 0) {
				++ic;
				mask >>= 1;
			}

			const id = Buffer.alloc(ic + 1);
			await tokenizer.readBuffer(id);
			return id;
		}

		async function readElement() {
			const id = await readField();
			const lenField = await readField();
			lenField[0] ^= 0x80 >> (lenField.length - 1);
			const nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer
			return {
				id: id.readUIntBE(0, id.length),
				len: lenField.readUIntBE(lenField.length - nrLen, nrLen)
			};
		}

		async function readChildren(level, children) {
			while (children > 0) {
				const e = await readElement();
				if (e.id === 0x4282) {
					return tokenizer.readToken(new Token$s.StringType(e.len, 'utf-8')); // Return DocType
				}

				await tokenizer.ignore(e.len); // ignore payload
				--children;
			}
		}

		const re = await readElement();
		const docType = await readChildren(1, re.len);

		switch (docType) {
			case 'webm':
				return {
					ext: 'webm',
					mime: 'video/webm'
				};

			case 'matroska':
				return {
					ext: 'mkv',
					mime: 'video/x-matroska'
				};

			default:
				return;
		}
	}

	// RIFF file format which might be AVI, WAV, QCP, etc
	if (check([0x52, 0x49, 0x46, 0x46])) {
		if (check([0x41, 0x56, 0x49], {offset: 8})) {
			return {
				ext: 'avi',
				mime: 'video/vnd.avi'
			};
		}

		if (check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {
			return {
				ext: 'wav',
				mime: 'audio/vnd.wave'
			};
		}

		// QLCM, QCP file
		if (check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {
			return {
				ext: 'qcp',
				mime: 'audio/qcelp'
			};
		}
	}

	if (checkString('SQLi')) {
		return {
			ext: 'sqlite',
			mime: 'application/x-sqlite3'
		};
	}

	if (check([0x4E, 0x45, 0x53, 0x1A])) {
		return {
			ext: 'nes',
			mime: 'application/x-nintendo-nes-rom'
		};
	}

	if (checkString('Cr24')) {
		return {
			ext: 'crx',
			mime: 'application/x-google-chrome-extension'
		};
	}

	if (
		checkString('MSCF') ||
		checkString('ISc(')
	) {
		return {
			ext: 'cab',
			mime: 'application/vnd.ms-cab-compressed'
		};
	}

	if (check([0xED, 0xAB, 0xEE, 0xDB])) {
		return {
			ext: 'rpm',
			mime: 'application/x-rpm'
		};
	}

	if (check([0xC5, 0xD0, 0xD3, 0xC6])) {
		return {
			ext: 'eps',
			mime: 'application/eps'
		};
	}

	if (check([0x28, 0xB5, 0x2F, 0xFD])) {
		return {
			ext: 'zst',
			mime: 'application/zstd'
		};
	}

	// -- 5-byte signatures --

	if (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {
		return {
			ext: 'otf',
			mime: 'font/otf'
		};
	}

	if (checkString('#!AMR')) {
		return {
			ext: 'amr',
			mime: 'audio/amr'
		};
	}

	if (checkString('{\\rtf')) {
		return {
			ext: 'rtf',
			mime: 'application/rtf'
		};
	}

	if (check([0x46, 0x4C, 0x56, 0x01])) {
		return {
			ext: 'flv',
			mime: 'video/x-flv'
		};
	}

	if (checkString('IMPM')) {
		return {
			ext: 'it',
			mime: 'audio/x-it'
		};
	}

	if (
		checkString('-lh0-', {offset: 2}) ||
		checkString('-lh1-', {offset: 2}) ||
		checkString('-lh2-', {offset: 2}) ||
		checkString('-lh3-', {offset: 2}) ||
		checkString('-lh4-', {offset: 2}) ||
		checkString('-lh5-', {offset: 2}) ||
		checkString('-lh6-', {offset: 2}) ||
		checkString('-lh7-', {offset: 2}) ||
		checkString('-lzs-', {offset: 2}) ||
		checkString('-lz4-', {offset: 2}) ||
		checkString('-lz5-', {offset: 2}) ||
		checkString('-lhd-', {offset: 2})
	) {
		return {
			ext: 'lzh',
			mime: 'application/x-lzh-compressed'
		};
	}

	// MPEG program stream (PS or MPEG-PS)
	if (check([0x00, 0x00, 0x01, 0xBA])) {
		//  MPEG-PS, MPEG-1 Part 1
		if (check([0x21], {offset: 4, mask: [0xF1]})) {
			return {
				ext: 'mpg', // May also be .ps, .mpeg
				mime: 'video/MP1S'
			};
		}

		// MPEG-PS, MPEG-2 Part 1
		if (check([0x44], {offset: 4, mask: [0xC4]})) {
			return {
				ext: 'mpg', // May also be .mpg, .m2p, .vob or .sub
				mime: 'video/MP2P'
			};
		}
	}

	if (checkString('ITSF')) {
		return {
			ext: 'chm',
			mime: 'application/vnd.ms-htmlhelp'
		};
	}

	// -- 6-byte signatures --

	if (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {
		return {
			ext: 'xz',
			mime: 'application/x-xz'
		};
	}

	if (checkString('<?xml ')) {
		return {
			ext: 'xml',
			mime: 'application/xml'
		};
	}

	if (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {
		return {
			ext: '7z',
			mime: 'application/x-7z-compressed'
		};
	}

	if (
		check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) &&
		(buffer[6] === 0x0 || buffer[6] === 0x1)
	) {
		return {
			ext: 'rar',
			mime: 'application/x-rar-compressed'
		};
	}

	if (checkString('solid ')) {
		return {
			ext: 'stl',
			mime: 'model/stl'
		};
	}

	// -- 7-byte signatures --

	if (checkString('BLENDER')) {
		return {
			ext: 'blend',
			mime: 'application/x-blender'
		};
	}

	if (checkString('!<arch>')) {
		await tokenizer.ignore(8);
		const str = await tokenizer.readToken(new Token$s.StringType(13, 'ascii'));
		if (str === 'debian-binary') {
			return {
				ext: 'deb',
				mime: 'application/x-deb'
			};
		}

		return {
			ext: 'ar',
			mime: 'application/x-unix-archive'
		};
	}

	// -- 8-byte signatures --

	if (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {
		// APNG format (https://wiki.mozilla.org/APNG_Specification)
		// 1. Find the first IDAT (image data) chunk (49 44 41 54)
		// 2. Check if there is an "acTL" chunk before the IDAT one (61 63 54 4C)

		// Offset calculated as follows:
		// - 8 bytes: PNG signature
		// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk

		await tokenizer.ignore(8); // ignore PNG signature

		async function readChunkHeader() {
			return {
				length: await tokenizer.readToken(Token$s.INT32_BE),
				type: await tokenizer.readToken(new Token$s.StringType(4, 'binary'))
			};
		}

		do {
			const chunk = await readChunkHeader();
			if (chunk.length < 0) {
				return; // Invalid chunk length
			}

			switch (chunk.type) {
				case 'IDAT':
					return {
						ext: 'png',
						mime: 'image/png'
					};
				case 'acTL':
					return {
						ext: 'apng',
						mime: 'image/apng'
					};
				default:
					await tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC
			}
		} while (tokenizer.position + 8 < tokenizer.fileInfo.size);

		return {
			ext: 'png',
			mime: 'image/png'
		};
	}

	if (check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {
		return {
			ext: 'arrow',
			mime: 'application/x-apache-arrow'
		};
	}

	if (check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {
		return {
			ext: 'glb',
			mime: 'model/gltf-binary'
		};
	}

	// `mov` format variants
	if (
		check([0x66, 0x72, 0x65, 0x65], {offset: 4}) || // `free`
		check([0x6D, 0x64, 0x61, 0x74], {offset: 4}) || // `mdat` MJPEG
		check([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) || // `moov`
		check([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`
	) {
		return {
			ext: 'mov',
			mime: 'video/quicktime'
		};
	}

	// -- 9-byte signatures --

	if (check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {
		return {
			ext: 'orf',
			mime: 'image/x-olympus-orf'
		};
	}

	if (checkString('gimp xcf ')) {
		return {
			ext: 'xcf',
			mime: 'image/x-xcf'
		};
	}

	// -- 12-byte signatures --

	if (check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {
		return {
			ext: 'rw2',
			mime: 'image/x-panasonic-rw2'
		};
	}

	// ASF_Header_Object first 80 bytes
	if (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {
		async function readHeader() {
			const guid = Buffer.alloc(16);
			await tokenizer.readBuffer(guid);
			return {
				id: guid,
				size: Number(await tokenizer.readToken(Token$s.UINT64_LE))
			};
		}

		await tokenizer.ignore(30);
		// Search for header should be in first 1KB of file.
		while (tokenizer.position + 24 < tokenizer.fileInfo.size) {
			const header = await readHeader();
			let payload = header.size - 24;
			if (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {
				// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)
				const typeId = Buffer.alloc(16);
				payload -= await tokenizer.readBuffer(typeId);

				if (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {
					// Found audio:
					return {
						ext: 'asf',
						mime: 'audio/x-ms-asf'
					};
				}

				if (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {
					// Found video:
					return {
						ext: 'asf',
						mime: 'video/x-ms-asf'
					};
				}

				break;
			}

			await tokenizer.ignore(payload);
		}

		// Default to ASF generic extension
		return {
			ext: 'asf',
			mime: 'application/vnd.ms-asf'
		};
	}

	if (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {
		return {
			ext: 'ktx',
			mime: 'image/ktx'
		};
	}

	if ((check([0x7E, 0x10, 0x04]) || check([0x7E, 0x18, 0x04])) && check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {
		return {
			ext: 'mie',
			mime: 'application/x-mie'
		};
	}

	if (check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {
		return {
			ext: 'shp',
			mime: 'application/x-esri-shape'
		};
	}

	if (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {
		// JPEG-2000 family

		await tokenizer.ignore(20);
		const type = await tokenizer.readToken(new Token$s.StringType(4, 'ascii'));
		switch (type) {
			case 'jp2 ':
				return {
					ext: 'jp2',
					mime: 'image/jp2'
				};
			case 'jpx ':
				return {
					ext: 'jpx',
					mime: 'image/jpx'
				};
			case 'jpm ':
				return {
					ext: 'jpm',
					mime: 'image/jpm'
				};
			case 'mjp2':
				return {
					ext: 'mj2',
					mime: 'image/mj2'
				};
			default:
				return;
		}
	}

	if (
		check([0xFF, 0x0A]) ||
		check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])
	) {
		return {
			ext: 'jxl',
			mime: 'image/jxl'
		};
	}

	// -- Unsafe signatures --

	if (
		check([0x0, 0x0, 0x1, 0xBA]) ||
		check([0x0, 0x0, 0x1, 0xB3])
	) {
		return {
			ext: 'mpg',
			mime: 'video/mpeg'
		};
	}

	if (check([0x00, 0x01, 0x00, 0x00, 0x00])) {
		return {
			ext: 'ttf',
			mime: 'font/ttf'
		};
	}

	if (check([0x00, 0x00, 0x01, 0x00])) {
		return {
			ext: 'ico',
			mime: 'image/x-icon'
		};
	}

	if (check([0x00, 0x00, 0x02, 0x00])) {
		return {
			ext: 'cur',
			mime: 'image/x-icon'
		};
	}

	if (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {
		// Detected Microsoft Compound File Binary File (MS-CFB) Format.
		return {
			ext: 'cfb',
			mime: 'application/x-cfb'
		};
	}

	// Increase sample size from 12 to 256.
	await tokenizer.peekBuffer(buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});

	// -- 15-byte signatures --

	if (checkString('BEGIN:')) {
		if (checkString('VCARD', {offset: 6})) {
			return {
				ext: 'vcf',
				mime: 'text/vcard'
			};
		}

		if (checkString('VCALENDAR', {offset: 6})) {
			return {
				ext: 'ics',
				mime: 'text/calendar'
			};
		}
	}

	// `raf` is here just to keep all the raw image detectors together.
	if (checkString('FUJIFILMCCD-RAW')) {
		return {
			ext: 'raf',
			mime: 'image/x-fujifilm-raf'
		};
	}

	if (checkString('Extended Module:')) {
		return {
			ext: 'xm',
			mime: 'audio/x-xm'
		};
	}

	if (checkString('Creative Voice File')) {
		return {
			ext: 'voc',
			mime: 'audio/x-voc'
		};
	}

	if (check([0x04, 0x00, 0x00, 0x00]) && buffer.length >= 16) { // Rough & quick check Pickle/ASAR
		const jsonSize = buffer.readUInt32LE(12);
		if (jsonSize > 12 && buffer.length >= jsonSize + 16) {
			try {
				const header = buffer.slice(16, jsonSize + 16).toString();
				const json = JSON.parse(header);
				// Check if Pickle is ASAR
				if (json.files) { // Final check, assuring Pickle/ASAR format
					return {
						ext: 'asar',
						mime: 'application/x-asar'
					};
				}
			} catch (_) {
			}
		}
	}

	if (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {
		return {
			ext: 'mxf',
			mime: 'application/mxf'
		};
	}

	if (checkString('SCRM', {offset: 44})) {
		return {
			ext: 's3m',
			mime: 'audio/x-s3m'
		};
	}

	if (check([0x47], {offset: 4}) && (check([0x47], {offset: 192}) || check([0x47], {offset: 196}))) {
		return {
			ext: 'mts',
			mime: 'video/mp2t'
		};
	}

	if (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {
		return {
			ext: 'mobi',
			mime: 'application/x-mobipocket-ebook'
		};
	}

	if (check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {
		return {
			ext: 'dcm',
			mime: 'application/dicom'
		};
	}

	if (check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {
		return {
			ext: 'lnk',
			mime: 'application/x.ms.shortcut' // Invented by us
		};
	}

	if (check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {
		return {
			ext: 'alias',
			mime: 'application/x.apple.alias' // Invented by us
		};
	}

	if (
		check([0x4C, 0x50], {offset: 34}) &&
		(
			check([0x00, 0x00, 0x01], {offset: 8}) ||
			check([0x01, 0x00, 0x02], {offset: 8}) ||
			check([0x02, 0x00, 0x02], {offset: 8})
		)
	) {
		return {
			ext: 'eot',
			mime: 'application/vnd.ms-fontobject'
		};
	}

	if (check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {
		return {
			ext: 'indd',
			mime: 'application/x-indesign'
		};
	}

	// Increase sample size from 256 to 512
	await tokenizer.peekBuffer(buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});

	// Requires a buffer size of 512 bytes
	if (tarHeaderChecksumMatches(buffer)) {
		return {
			ext: 'tar',
			mime: 'application/x-tar'
		};
	}

	if (check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {
		return {
			ext: 'skp',
			mime: 'application/vnd.sketchup.skp'
		};
	}

	if (checkString('-----BEGIN PGP MESSAGE-----')) {
		return {
			ext: 'pgp',
			mime: 'application/pgp-encrypted'
		};
	}

	// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)
	if (buffer.length >= 2 && check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {
		if (check([0x10], {offset: 1, mask: [0x16]})) {
			// Check for (ADTS) MPEG-2
			if (check([0x08], {offset: 1, mask: [0x08]})) {
				return {
					ext: 'aac',
					mime: 'audio/aac'
				};
			}

			// Must be (ADTS) MPEG-4
			return {
				ext: 'aac',
				mime: 'audio/aac'
			};
		}

		// MPEG 1 or 2 Layer 3 header
		// Check for MPEG layer 3
		if (check([0x02], {offset: 1, mask: [0x06]})) {
			return {
				ext: 'mp3',
				mime: 'audio/mpeg'
			};
		}

		// Check for MPEG layer 2
		if (check([0x04], {offset: 1, mask: [0x06]})) {
			return {
				ext: 'mp2',
				mime: 'audio/mpeg'
			};
		}

		// Check for MPEG layer 1
		if (check([0x06], {offset: 1, mask: [0x06]})) {
			return {
				ext: 'mp1',
				mime: 'audio/mpeg'
			};
		}
	}
}

const stream = readableStream => new Promise((resolve, reject) => {
	// Using `eval` to work around issues when bundling with Webpack
	const stream = eval('require')('stream'); // eslint-disable-line no-eval

	readableStream.on('error', reject);
	readableStream.once('readable', async () => {
		// Set up output stream
		const pass = new stream.PassThrough();
		let outputStream;
		if (stream.pipeline) {
			outputStream = stream.pipeline(readableStream, pass, () => {
			});
		} else {
			outputStream = readableStream.pipe(pass);
		}

		// Read the input stream and detect the filetype
		const chunk = readableStream.read(minimumBytes) || readableStream.read() || Buffer.alloc(0);
		try {
			const fileType = await fromBuffer(chunk);
			pass.fileType = fileType;
		} catch (error) {
			reject(error);
		}

		resolve(outputStream);
	});
});

const fileType = {
	fromStream,
	fromTokenizer,
	fromBuffer,
	stream
};

Object.defineProperty(fileType, 'extensions', {
	get() {
		return new Set(supported.extensions);
	}
});

Object.defineProperty(fileType, 'mimeTypes', {
	get() {
		return new Set(supported.mimeTypes);
	}
});

var core = fileType;

var contentType = {};

/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */
var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g; // eslint-disable-line no-control-regex
var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/; // eslint-disable-line no-control-regex
var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */
var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g; // eslint-disable-line no-control-regex

/**
 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
 */
var QUOTE_REGEXP = /([\\"])/g;

/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */
var TYPE_REGEXP$1 = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

/**
 * Module exports.
 * @public
 */

contentType.format = format$2;
contentType.parse = parse$2;

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @public
 */

function format$2 (obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required')
  }

  var parameters = obj.parameters;
  var type = obj.type;

  if (!type || !TYPE_REGEXP$1.test(type)) {
    throw new TypeError('invalid type')
  }

  var string = type;

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      if (!TOKEN_REGEXP.test(param)) {
        throw new TypeError('invalid parameter name')
      }

      string += '; ' + param + '=' + qstring(parameters[param]);
    }
  }

  return string
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @public
 */

function parse$2 (string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  // support req/res-like objects as argument
  var header = typeof string === 'object'
    ? getcontenttype(string)
    : string;

  if (typeof header !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  var index = header.indexOf(';');
  var type = index !== -1
    ? header.slice(0, index).trim()
    : header.trim();

  if (!TYPE_REGEXP$1.test(type)) {
    throw new TypeError('invalid media type')
  }

  var obj = new ContentType$1(type.toLowerCase());

  // parse parameters
  if (index !== -1) {
    var key;
    var match;
    var value;

    PARAM_REGEXP.lastIndex = index;

    while ((match = PARAM_REGEXP.exec(header))) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format')
      }

      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];

      if (value.charCodeAt(0) === 0x22 /* " */) {
        // remove quotes
        value = value.slice(1, -1);

        // remove escapes
        if (value.indexOf('\\') !== -1) {
          value = value.replace(QESC_REGEXP, '$1');
        }
      }

      obj.parameters[key] = value;
    }

    if (index !== header.length) {
      throw new TypeError('invalid parameter format')
    }
  }

  return obj
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @private
 */

function getcontenttype (obj) {
  var header;

  if (typeof obj.getHeader === 'function') {
    // res-like
    header = obj.getHeader('content-type');
  } else if (typeof obj.headers === 'object') {
    // req-like
    header = obj.headers && obj.headers['content-type'];
  }

  if (typeof header !== 'string') {
    throw new TypeError('content-type header is missing from object')
  }

  return header
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function qstring (val) {
  var str = String(val);

  // no need to quote tokens
  if (TOKEN_REGEXP.test(str)) {
    return str
  }

  if (str.length > 0 && !TEXT_REGEXP.test(str)) {
    throw new TypeError('invalid parameter value')
  }

  return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"'
}

/**
 * Class to represent a content type.
 * @private
 */
function ContentType$1 (type) {
  this.parameters = Object.create(null);
  this.type = type;
}

var mediaTyper = {};

/**
 * RegExp to match type in RFC 6838
 *
 * type-name = restricted-name
 * subtype-name = restricted-name
 * restricted-name = restricted-name-first *126restricted-name-chars
 * restricted-name-first  = ALPHA / DIGIT
 * restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
 *                          "$" / "&" / "-" / "^" / "_"
 * restricted-name-chars =/ "." ; Characters before first dot always
 *                              ; specify a facet name
 * restricted-name-chars =/ "+" ; Characters after last plus always
 *                              ; specify a structured syntax suffix
 * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z
 * DIGIT =  %x30-39             ; 0-9
 */
var SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
var TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
var TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;

/**
 * Module exports.
 */

mediaTyper.format = format$1;
mediaTyper.parse = parse$1;
mediaTyper.test = test;

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @public
 */

function format$1 (obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required')
  }

  var subtype = obj.subtype;
  var suffix = obj.suffix;
  var type = obj.type;

  if (!type || !TYPE_NAME_REGEXP.test(type)) {
    throw new TypeError('invalid type')
  }

  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {
    throw new TypeError('invalid subtype')
  }

  // format as type/subtype
  var string = type + '/' + subtype;

  // append +suffix
  if (suffix) {
    if (!TYPE_NAME_REGEXP.test(suffix)) {
      throw new TypeError('invalid suffix')
    }

    string += '+' + suffix;
  }

  return string
}

/**
 * Test media type.
 *
 * @param {string} string
 * @return {object}
 * @public
 */

function test (string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  if (typeof string !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  return TYPE_REGEXP.test(string.toLowerCase())
}

/**
 * Parse media type to object.
 *
 * @param {string} string
 * @return {object}
 * @public
 */

function parse$1 (string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  if (typeof string !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  var match = TYPE_REGEXP.exec(string.toLowerCase());

  if (!match) {
    throw new TypeError('invalid media type')
  }

  var type = match[1];
  var subtype = match[2];
  var suffix;

  // suffix after last +
  var index = subtype.lastIndexOf('+');
  if (index !== -1) {
    suffix = subtype.substr(index + 1);
    subtype = subtype.substr(0, index);
  }

  return new MediaType(type, subtype, suffix)
}

/**
 * Class for MediaType object.
 * @public
 */

function MediaType (type, subtype, suffix) {
  this.type = type;
  this.subtype = subtype;
  this.suffix = suffix;
}

var MetadataCollector$1 = {};

var type = {};

var types = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TrackType = exports.TargetType = exports.DataType = void 0;
	(function (DataType) {
	    DataType[DataType["string"] = 0] = "string";
	    DataType[DataType["uint"] = 1] = "uint";
	    DataType[DataType["uid"] = 2] = "uid";
	    DataType[DataType["bool"] = 3] = "bool";
	    DataType[DataType["binary"] = 4] = "binary";
	    DataType[DataType["float"] = 5] = "float";
	})(exports.DataType || (exports.DataType = {}));
	(function (TargetType) {
	    TargetType[TargetType["shot"] = 10] = "shot";
	    TargetType[TargetType["scene"] = 20] = "scene";
	    TargetType[TargetType["track"] = 30] = "track";
	    TargetType[TargetType["part"] = 40] = "part";
	    TargetType[TargetType["album"] = 50] = "album";
	    TargetType[TargetType["edition"] = 60] = "edition";
	    TargetType[TargetType["collection"] = 70] = "collection";
	})(exports.TargetType || (exports.TargetType = {}));
	(function (TrackType) {
	    TrackType[TrackType["video"] = 1] = "video";
	    TrackType[TrackType["audio"] = 2] = "audio";
	    TrackType[TrackType["complex"] = 3] = "complex";
	    TrackType[TrackType["logo"] = 4] = "logo";
	    TrackType[TrackType["subtitle"] = 17] = "subtitle";
	    TrackType[TrackType["button"] = 18] = "button";
	    TrackType[TrackType["control"] = 32] = "control";
	})(exports.TrackType || (exports.TrackType = {}));
	
} (types));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TrackType = void 0;
	var types_1 = types;
	Object.defineProperty(exports, "TrackType", { enumerable: true, get: function () { return types_1.TrackType; } });
	
} (type));

var GenericTagTypes = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isUnique = exports.isSingleton = exports.commonTags = void 0;
	exports.commonTags = {
	    year: { multiple: false },
	    track: { multiple: false },
	    disk: { multiple: false },
	    title: { multiple: false },
	    artist: { multiple: false },
	    artists: { multiple: true, unique: true },
	    albumartist: { multiple: false },
	    album: { multiple: false },
	    date: { multiple: false },
	    originaldate: { multiple: false },
	    originalyear: { multiple: false },
	    comment: { multiple: true, unique: false },
	    genre: { multiple: true, unique: true },
	    picture: { multiple: true, unique: true },
	    composer: { multiple: true, unique: true },
	    lyrics: { multiple: true, unique: false },
	    albumsort: { multiple: false, unique: true },
	    titlesort: { multiple: false, unique: true },
	    work: { multiple: false, unique: true },
	    artistsort: { multiple: false, unique: true },
	    albumartistsort: { multiple: false, unique: true },
	    composersort: { multiple: false, unique: true },
	    lyricist: { multiple: true, unique: true },
	    writer: { multiple: true, unique: true },
	    conductor: { multiple: true, unique: true },
	    remixer: { multiple: true, unique: true },
	    arranger: { multiple: true, unique: true },
	    engineer: { multiple: true, unique: true },
	    producer: { multiple: true, unique: true },
	    technician: { multiple: true, unique: true },
	    djmixer: { multiple: true, unique: true },
	    mixer: { multiple: true, unique: true },
	    label: { multiple: true, unique: true },
	    grouping: { multiple: false },
	    subtitle: { multiple: true },
	    discsubtitle: { multiple: false },
	    totaltracks: { multiple: false },
	    totaldiscs: { multiple: false },
	    compilation: { multiple: false },
	    rating: { multiple: true },
	    bpm: { multiple: false },
	    mood: { multiple: false },
	    media: { multiple: false },
	    catalognumber: { multiple: true, unique: true },
	    tvShow: { multiple: false },
	    tvShowSort: { multiple: false },
	    tvSeason: { multiple: false },
	    tvEpisode: { multiple: false },
	    tvEpisodeId: { multiple: false },
	    tvNetwork: { multiple: false },
	    podcast: { multiple: false },
	    podcasturl: { multiple: false },
	    releasestatus: { multiple: false },
	    releasetype: { multiple: true },
	    releasecountry: { multiple: false },
	    script: { multiple: false },
	    language: { multiple: false },
	    copyright: { multiple: false },
	    license: { multiple: false },
	    encodedby: { multiple: false },
	    encodersettings: { multiple: false },
	    gapless: { multiple: false },
	    barcode: { multiple: false },
	    isrc: { multiple: true },
	    asin: { multiple: false },
	    musicbrainz_recordingid: { multiple: false },
	    musicbrainz_trackid: { multiple: false },
	    musicbrainz_albumid: { multiple: false },
	    musicbrainz_artistid: { multiple: true },
	    musicbrainz_albumartistid: { multiple: true },
	    musicbrainz_releasegroupid: { multiple: false },
	    musicbrainz_workid: { multiple: false },
	    musicbrainz_trmid: { multiple: false },
	    musicbrainz_discid: { multiple: false },
	    acoustid_id: { multiple: false },
	    acoustid_fingerprint: { multiple: false },
	    musicip_puid: { multiple: false },
	    musicip_fingerprint: { multiple: false },
	    website: { multiple: false },
	    'performer:instrument': { multiple: true, unique: true },
	    averageLevel: { multiple: false },
	    peakLevel: { multiple: false },
	    notes: { multiple: true, unique: false },
	    key: { multiple: false },
	    originalalbum: { multiple: false },
	    originalartist: { multiple: false },
	    discogs_artist_id: { multiple: true, unique: true },
	    discogs_release_id: { multiple: false },
	    discogs_label_id: { multiple: false },
	    discogs_master_release_id: { multiple: false },
	    discogs_votes: { multiple: false },
	    discogs_rating: { multiple: false },
	    replaygain_track_peak: { multiple: false },
	    replaygain_track_gain: { multiple: false },
	    replaygain_album_peak: { multiple: false },
	    replaygain_album_gain: { multiple: false },
	    replaygain_track_minmax: { multiple: false },
	    replaygain_album_minmax: { multiple: false },
	    replaygain_undo: { multiple: false },
	    description: { multiple: true },
	    longDescription: { multiple: false },
	    category: { multiple: true },
	    hdVideo: { multiple: false },
	    keywords: { multiple: true },
	    movement: { multiple: false },
	    movementIndex: { multiple: false },
	    movementTotal: { multiple: false },
	    podcastId: { multiple: false },
	    showMovement: { multiple: false },
	    stik: { multiple: false }
	};
	/**
	 * @param alias Name of common tag
	 * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false
	 */
	function isSingleton(alias) {
	    return exports.commonTags.hasOwnProperty(alias) && !exports.commonTags[alias].multiple;
	}
	exports.isSingleton = isSingleton;
	/**
	 * @param alias Common (generic) tag
	 * @returns {boolean|*} true if given alias is a singleton or explicitly marked as unique
	 */
	function isUnique(alias) {
	    return !exports.commonTags[alias].multiple || exports.commonTags[alias].unique;
	}
	exports.isUnique = isUnique;
	
} (GenericTagTypes));

var CombinedTagMapper$1 = {};

var ID3v1TagMap = {};

var GenericTagMapper = {};

Object.defineProperty(GenericTagMapper, "__esModule", { value: true });
GenericTagMapper.CommonTagMapper = void 0;
class CommonTagMapper {
    static toIntOrNull(str) {
        const cleaned = parseInt(str, 10);
        return isNaN(cleaned) ? null : cleaned;
    }
    // TODO: a string of 1of1 would fail to be converted
    // converts 1/10 to no : 1, of : 10
    // or 1 to no : 1, of : 0
    static normalizeTrack(origVal) {
        const split = origVal.toString().split('/');
        return {
            no: parseInt(split[0], 10) || null,
            of: parseInt(split[1], 10) || null
        };
    }
    constructor(tagTypes, tagMap) {
        this.tagTypes = tagTypes;
        this.tagMap = tagMap;
    }
    /**
     * Process and set common tags
     * write common tags to
     * @param tag Native tag
     * @param warnings Register warnings
     * @return common name
     */
    mapGenericTag(tag, warnings) {
        tag = { id: tag.id, value: tag.value }; // clone object
        this.postMap(tag, warnings);
        // Convert native tag event to generic 'alias' tag
        const id = this.getCommonName(tag.id);
        return id ? { id, value: tag.value } : null;
    }
    /**
     * Convert native tag key to common tag key
     * @tag  Native header tag
     * @return common tag name (alias)
     */
    getCommonName(tag) {
        return this.tagMap[tag];
    }
    /**
     * Handle post mapping exceptions / correction
     * @param tag Tag e.g. {"©alb", "Buena Vista Social Club")
     * @param warnings Used to register warnings
     */
    postMap(tag, warnings) {
        return;
    }
}
CommonTagMapper.maxRatingScore = 1;
GenericTagMapper.CommonTagMapper = CommonTagMapper;

Object.defineProperty(ID3v1TagMap, "__esModule", { value: true });
ID3v1TagMap.ID3v1TagMapper = void 0;
const GenericTagMapper_1$6 = GenericTagMapper;
/**
 * ID3v1 tag mappings
 */
const id3v1TagMap = {
    title: 'title',
    artist: 'artist',
    album: 'album',
    year: 'year',
    comment: 'comment',
    track: 'track',
    genre: 'genre'
};
class ID3v1TagMapper extends GenericTagMapper_1$6.CommonTagMapper {
    constructor() {
        super(['ID3v1'], id3v1TagMap);
    }
}
ID3v1TagMap.ID3v1TagMapper = ID3v1TagMapper;

var ID3v24TagMapper$1 = {};

var CaseInsensitiveTagMap$1 = {};

Object.defineProperty(CaseInsensitiveTagMap$1, "__esModule", { value: true });
CaseInsensitiveTagMap$1.CaseInsensitiveTagMap = void 0;
const GenericTagMapper_1$5 = GenericTagMapper;
class CaseInsensitiveTagMap extends GenericTagMapper_1$5.CommonTagMapper {
    constructor(tagTypes, tagMap) {
        const upperCaseMap = {};
        for (const tag of Object.keys(tagMap)) {
            upperCaseMap[tag.toUpperCase()] = tagMap[tag];
        }
        super(tagTypes, upperCaseMap);
    }
    /**
     * @tag  Native header tag
     * @return common tag name (alias)
     */
    getCommonName(tag) {
        return this.tagMap[tag.toUpperCase()];
    }
}
CaseInsensitiveTagMap$1.CaseInsensitiveTagMap = CaseInsensitiveTagMap;

var Util = {};

Object.defineProperty(Util, "__esModule", { value: true });
Util.toRatio = Util.dbToRatio = Util.ratioToDb = Util.a2hex = Util.isBitSet = Util.getBitAllignedNumber = Util.stripNulls = Util.decodeString = Util.trimRightNull = Util.findZero = Util.getBit = void 0;
function getBit(buf, off, bit) {
    return (buf[off] & (1 << bit)) !== 0;
}
Util.getBit = getBit;
/**
 * Found delimiting zero in uint8Array
 * @param uint8Array Uint8Array to find the zero delimiter in
 * @param start Offset in uint8Array
 * @param end Last position to parse in uint8Array
 * @param encoding The string encoding used
 * @return Absolute position on uint8Array where zero found
 */
function findZero(uint8Array, start, end, encoding) {
    let i = start;
    if (encoding === 'utf16le') {
        while (uint8Array[i] !== 0 || uint8Array[i + 1] !== 0) {
            if (i >= end)
                return end;
            i += 2;
        }
        return i;
    }
    else {
        while (uint8Array[i] !== 0) {
            if (i >= end)
                return end;
            i++;
        }
        return i;
    }
}
Util.findZero = findZero;
function trimRightNull(x) {
    const pos0 = x.indexOf('\0');
    return pos0 === -1 ? x : x.substr(0, pos0);
}
Util.trimRightNull = trimRightNull;
function swapBytes(uint8Array) {
    const l = uint8Array.length;
    if ((l & 1) !== 0)
        throw new Error('Buffer length must be even');
    for (let i = 0; i < l; i += 2) {
        const a = uint8Array[i];
        uint8Array[i] = uint8Array[i + 1];
        uint8Array[i + 1] = a;
    }
    return uint8Array;
}
/**
 * Decode string
 */
function decodeString(uint8Array, encoding) {
    // annoying workaround for a double BOM issue
    // https://github.com/leetreveil/musicmetadata/issues/84
    if (uint8Array[0] === 0xFF && uint8Array[1] === 0xFE) { // little endian
        return decodeString(uint8Array.subarray(2), encoding);
    }
    else if (encoding === 'utf16le' && uint8Array[0] === 0xFE && uint8Array[1] === 0xFF) {
        // BOM, indicating big endian decoding
        if ((uint8Array.length & 1) !== 0)
            throw new Error('Expected even number of octets for 16-bit unicode string');
        return decodeString(swapBytes(uint8Array), encoding);
    }
    return Buffer.from(uint8Array).toString(encoding);
}
Util.decodeString = decodeString;
function stripNulls(str) {
    str = str.replace(/^\x00+/g, '');
    str = str.replace(/\x00+$/g, '');
    return str;
}
Util.stripNulls = stripNulls;
/**
 * Read bit-aligned number start from buffer
 * Total offset in bits = byteOffset * 8 + bitOffset
 * @param source Byte buffer
 * @param byteOffset Starting offset in bytes
 * @param bitOffset Starting offset in bits: 0 = lsb
 * @param len Length of number in bits
 * @return Decoded bit aligned number
 */
function getBitAllignedNumber(source, byteOffset, bitOffset, len) {
    const byteOff = byteOffset + ~~(bitOffset / 8);
    const bitOff = bitOffset % 8;
    let value = source[byteOff];
    value &= 0xff >> bitOff;
    const bitsRead = 8 - bitOff;
    const bitsLeft = len - bitsRead;
    if (bitsLeft < 0) {
        value >>= (8 - bitOff - len);
    }
    else if (bitsLeft > 0) {
        value <<= bitsLeft;
        value |= getBitAllignedNumber(source, byteOffset, bitOffset + bitsRead, bitsLeft);
    }
    return value;
}
Util.getBitAllignedNumber = getBitAllignedNumber;
/**
 * Read bit-aligned number start from buffer
 * Total offset in bits = byteOffset * 8 + bitOffset
 * @param source Byte Uint8Array
 * @param byteOffset Starting offset in bytes
 * @param bitOffset Starting offset in bits: 0 = most significant bit, 7 is the least significant bit
 * @return True if bit is set
 */
function isBitSet(source, byteOffset, bitOffset) {
    return getBitAllignedNumber(source, byteOffset, bitOffset, 1) === 1;
}
Util.isBitSet = isBitSet;
function a2hex(str) {
    const arr = [];
    for (let i = 0, l = str.length; i < l; i++) {
        const hex = Number(str.charCodeAt(i)).toString(16);
        arr.push(hex.length === 1 ? '0' + hex : hex);
    }
    return arr.join(' ');
}
Util.a2hex = a2hex;
/**
 * Convert power ratio to DB
 * ratio: [0..1]
 */
function ratioToDb(ratio) {
    return 10 * Math.log10(ratio);
}
Util.ratioToDb = ratioToDb;
/**
 * Convert dB to ratio
 * db Decibels
 */
function dbToRatio(dB) {
    return Math.pow(10, dB / 10);
}
Util.dbToRatio = dbToRatio;
/**
 * Convert replay gain to ratio and Decibel
 * @param value string holding a ratio like '0.034' or '-7.54 dB'
 */
function toRatio(value) {
    const ps = value.split(' ').map(p => p.trim().toLowerCase());
    // @ts-ignore
    if (ps.length >= 1) {
        const v = parseFloat(ps[0]);
        return ps.length === 2 && ps[1] === 'db' ? {
            dB: v,
            ratio: dbToRatio(v)
        } : {
            dB: ratioToDb(v),
            ratio: v
        };
    }
}
Util.toRatio = toRatio;

Object.defineProperty(ID3v24TagMapper$1, "__esModule", { value: true });
ID3v24TagMapper$1.ID3v24TagMapper = void 0;
const GenericTagMapper_1$4 = GenericTagMapper;
const CaseInsensitiveTagMap_1$2 = CaseInsensitiveTagMap$1;
const util$a = Util;
/**
 * ID3v2.3/ID3v2.4 tag mappings
 */
const id3v24TagMap = {
    // id3v2.3
    TIT2: 'title',
    TPE1: 'artist',
    'TXXX:Artists': 'artists',
    TPE2: 'albumartist',
    TALB: 'album',
    TDRV: 'date',
    /**
     * Original release year
     */
    TORY: 'originalyear',
    TPOS: 'disk',
    TCON: 'genre',
    APIC: 'picture',
    TCOM: 'composer',
    'USLT:description': 'lyrics',
    TSOA: 'albumsort',
    TSOT: 'titlesort',
    TOAL: 'originalalbum',
    TSOP: 'artistsort',
    TSO2: 'albumartistsort',
    TSOC: 'composersort',
    TEXT: 'lyricist',
    'TXXX:Writer': 'writer',
    TPE3: 'conductor',
    // 'IPLS:instrument': 'performer:instrument', // ToDo
    TPE4: 'remixer',
    'IPLS:arranger': 'arranger',
    'IPLS:engineer': 'engineer',
    'IPLS:producer': 'producer',
    'IPLS:DJ-mix': 'djmixer',
    'IPLS:mix': 'mixer',
    TPUB: 'label',
    TIT1: 'grouping',
    TIT3: 'subtitle',
    TRCK: 'track',
    TCMP: 'compilation',
    POPM: 'rating',
    TBPM: 'bpm',
    TMED: 'media',
    'TXXX:CATALOGNUMBER': 'catalognumber',
    'TXXX:MusicBrainz Album Status': 'releasestatus',
    'TXXX:MusicBrainz Album Type': 'releasetype',
    /**
     * Release country as documented: https://picard.musicbrainz.org/docs/mappings/#cite_note-0
     */
    'TXXX:MusicBrainz Album Release Country': 'releasecountry',
    /**
     * Release country as implemented // ToDo: report
     */
    'TXXX:RELEASECOUNTRY': 'releasecountry',
    'TXXX:SCRIPT': 'script',
    TLAN: 'language',
    TCOP: 'copyright',
    WCOP: 'license',
    TENC: 'encodedby',
    TSSE: 'encodersettings',
    'TXXX:BARCODE': 'barcode',
    'TXXX:ISRC': 'isrc',
    TSRC: 'isrc',
    'TXXX:ASIN': 'asin',
    'TXXX:originalyear': 'originalyear',
    'UFID:http://musicbrainz.org': 'musicbrainz_recordingid',
    'TXXX:MusicBrainz Release Track Id': 'musicbrainz_trackid',
    'TXXX:MusicBrainz Album Id': 'musicbrainz_albumid',
    'TXXX:MusicBrainz Artist Id': 'musicbrainz_artistid',
    'TXXX:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',
    'TXXX:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',
    'TXXX:MusicBrainz Work Id': 'musicbrainz_workid',
    'TXXX:MusicBrainz TRM Id': 'musicbrainz_trmid',
    'TXXX:MusicBrainz Disc Id': 'musicbrainz_discid',
    'TXXX:ACOUSTID_ID': 'acoustid_id',
    'TXXX:Acoustid Id': 'acoustid_id',
    'TXXX:Acoustid Fingerprint': 'acoustid_fingerprint',
    'TXXX:MusicIP PUID': 'musicip_puid',
    'TXXX:MusicMagic Fingerprint': 'musicip_fingerprint',
    WOAR: 'website',
    // id3v2.4
    // ToDo: In same sequence as defined at http://id3.org/id3v2.4.0-frames
    TDRC: 'date',
    TYER: 'year',
    TDOR: 'originaldate',
    // 'TMCL:instrument': 'performer:instrument',
    'TIPL:arranger': 'arranger',
    'TIPL:engineer': 'engineer',
    'TIPL:producer': 'producer',
    'TIPL:DJ-mix': 'djmixer',
    'TIPL:mix': 'mixer',
    TMOO: 'mood',
    // additional mappings:
    SYLT: 'lyrics',
    TSST: 'discsubtitle',
    TKEY: 'key',
    COMM: 'comment',
    TOPE: 'originalartist',
    // Windows Media Player
    'PRIV:AverageLevel': 'averageLevel',
    'PRIV:PeakLevel': 'peakLevel',
    // Discogs
    'TXXX:DISCOGS_ARTIST_ID': 'discogs_artist_id',
    'TXXX:DISCOGS_ARTISTS': 'artists',
    'TXXX:DISCOGS_ARTIST_NAME': 'artists',
    'TXXX:DISCOGS_ALBUM_ARTISTS': 'albumartist',
    'TXXX:DISCOGS_CATALOG': 'catalognumber',
    'TXXX:DISCOGS_COUNTRY': 'releasecountry',
    'TXXX:DISCOGS_DATE': 'originaldate',
    'TXXX:DISCOGS_LABEL': 'label',
    'TXXX:DISCOGS_LABEL_ID': 'discogs_label_id',
    'TXXX:DISCOGS_MASTER_RELEASE_ID': 'discogs_master_release_id',
    'TXXX:DISCOGS_RATING': 'discogs_rating',
    'TXXX:DISCOGS_RELEASED': 'date',
    'TXXX:DISCOGS_RELEASE_ID': 'discogs_release_id',
    'TXXX:DISCOGS_VOTES': 'discogs_votes',
    'TXXX:CATALOGID': 'catalognumber',
    'TXXX:STYLE': 'genre',
    'TXXX:REPLAYGAIN_TRACK_PEAK': 'replaygain_track_peak',
    'TXXX:REPLAYGAIN_TRACK_GAIN': 'replaygain_track_gain',
    'TXXX:REPLAYGAIN_ALBUM_PEAK': 'replaygain_album_peak',
    'TXXX:REPLAYGAIN_ALBUM_GAIN': 'replaygain_album_gain',
    'TXXX:MP3GAIN_MINMAX': 'replaygain_track_minmax',
    'TXXX:MP3GAIN_ALBUM_MINMAX': 'replaygain_album_minmax',
    'TXXX:MP3GAIN_UNDO': 'replaygain_undo',
    MVNM: 'movement',
    MVIN: 'movementIndex',
    PCST: 'podcast',
    TCAT: 'category',
    TDES: 'description',
    TDRL: 'date',
    TGID: 'podcastId',
    TKWD: 'keywords',
    WFED: 'podcasturl'
};
class ID3v24TagMapper extends CaseInsensitiveTagMap_1$2.CaseInsensitiveTagMap {
    static toRating(popm) {
        return {
            source: popm.email,
            rating: popm.rating > 0 ? (popm.rating - 1) / 254 * GenericTagMapper_1$4.CommonTagMapper.maxRatingScore : undefined
        };
    }
    constructor() {
        super(['ID3v2.3', 'ID3v2.4'], id3v24TagMap);
    }
    /**
     * Handle post mapping exceptions / correction
     * @param tag to post map
     * @param warnings Wil be used to register (collect) warnings
     * @return Common value e.g. "Buena Vista Social Club"
     */
    postMap(tag, warnings) {
        switch (tag.id) {
            case 'UFID': // decode MusicBrainz Recording Id
                if (tag.value.owner_identifier === 'http://musicbrainz.org') {
                    tag.id += ':' + tag.value.owner_identifier;
                    tag.value = util$a.decodeString(tag.value.identifier, 'latin1'); // latin1 == iso-8859-1
                }
                break;
            case 'PRIV':
                switch (tag.value.owner_identifier) {
                    // decode Windows Media Player
                    case 'AverageLevel':
                    case 'PeakValue':
                        tag.id += ':' + tag.value.owner_identifier;
                        tag.value = tag.value.data.length === 4 ? tag.value.data.readUInt32LE(0) : null;
                        if (tag.value === null) {
                            warnings.addWarning(`Failed to parse PRIV:PeakValue`);
                        }
                        break;
                    default:
                        warnings.addWarning(`Unknown PRIV owner-identifier: ${tag.value.owner_identifier}`);
                }
                break;
            case 'COMM':
                tag.value = tag.value ? tag.value.text : null;
                break;
            case 'POPM':
                tag.value = ID3v24TagMapper.toRating(tag.value);
                break;
        }
    }
}
ID3v24TagMapper$1.ID3v24TagMapper = ID3v24TagMapper;

var AsfTagMapper$1 = {};

Object.defineProperty(AsfTagMapper$1, "__esModule", { value: true });
AsfTagMapper$1.AsfTagMapper = void 0;
const GenericTagMapper_1$3 = GenericTagMapper;
/**
 * ASF Metadata tag mappings.
 * See http://msdn.microsoft.com/en-us/library/ms867702.aspx
 */
const asfTagMap = {
    Title: 'title',
    Author: 'artist',
    'WM/AlbumArtist': 'albumartist',
    'WM/AlbumTitle': 'album',
    'WM/Year': 'date',
    'WM/OriginalReleaseTime': 'originaldate',
    'WM/OriginalReleaseYear': 'originalyear',
    Description: 'comment',
    'WM/TrackNumber': 'track',
    'WM/PartOfSet': 'disk',
    'WM/Genre': 'genre',
    'WM/Composer': 'composer',
    'WM/Lyrics': 'lyrics',
    'WM/AlbumSortOrder': 'albumsort',
    'WM/TitleSortOrder': 'titlesort',
    'WM/ArtistSortOrder': 'artistsort',
    'WM/AlbumArtistSortOrder': 'albumartistsort',
    'WM/ComposerSortOrder': 'composersort',
    'WM/Writer': 'lyricist',
    'WM/Conductor': 'conductor',
    'WM/ModifiedBy': 'remixer',
    'WM/Engineer': 'engineer',
    'WM/Producer': 'producer',
    'WM/DJMixer': 'djmixer',
    'WM/Mixer': 'mixer',
    'WM/Publisher': 'label',
    'WM/ContentGroupDescription': 'grouping',
    'WM/SubTitle': 'subtitle',
    'WM/SetSubTitle': 'discsubtitle',
    // 'WM/PartOfSet': 'totaldiscs',
    'WM/IsCompilation': 'compilation',
    'WM/SharedUserRating': 'rating',
    'WM/BeatsPerMinute': 'bpm',
    'WM/Mood': 'mood',
    'WM/Media': 'media',
    'WM/CatalogNo': 'catalognumber',
    'MusicBrainz/Album Status': 'releasestatus',
    'MusicBrainz/Album Type': 'releasetype',
    'MusicBrainz/Album Release Country': 'releasecountry',
    'WM/Script': 'script',
    'WM/Language': 'language',
    Copyright: 'copyright',
    LICENSE: 'license',
    'WM/EncodedBy': 'encodedby',
    'WM/EncodingSettings': 'encodersettings',
    'WM/Barcode': 'barcode',
    'WM/ISRC': 'isrc',
    'MusicBrainz/Track Id': 'musicbrainz_recordingid',
    'MusicBrainz/Release Track Id': 'musicbrainz_trackid',
    'MusicBrainz/Album Id': 'musicbrainz_albumid',
    'MusicBrainz/Artist Id': 'musicbrainz_artistid',
    'MusicBrainz/Album Artist Id': 'musicbrainz_albumartistid',
    'MusicBrainz/Release Group Id': 'musicbrainz_releasegroupid',
    'MusicBrainz/Work Id': 'musicbrainz_workid',
    'MusicBrainz/TRM Id': 'musicbrainz_trmid',
    'MusicBrainz/Disc Id': 'musicbrainz_discid',
    'Acoustid/Id': 'acoustid_id',
    'Acoustid/Fingerprint': 'acoustid_fingerprint',
    'MusicIP/PUID': 'musicip_puid',
    'WM/ARTISTS': 'artists',
    'WM/InitialKey': 'key',
    ASIN: 'asin',
    'WM/Work': 'work',
    'WM/AuthorURL': 'website',
    'WM/Picture': 'picture'
};
class AsfTagMapper extends GenericTagMapper_1$3.CommonTagMapper {
    static toRating(rating) {
        return {
            rating: parseFloat(rating + 1) / 5
        };
    }
    constructor() {
        super(['asf'], asfTagMap);
    }
    postMap(tag) {
        switch (tag.id) {
            case 'WM/SharedUserRating':
                const keys = tag.id.split(':');
                tag.value = AsfTagMapper.toRating(tag.value);
                tag.id = keys[0];
                break;
        }
    }
}
AsfTagMapper$1.AsfTagMapper = AsfTagMapper;

var ID3v22TagMapper = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ID3v22TagMapper = exports.id3v22TagMap = void 0;
	const CaseInsensitiveTagMap_1 = CaseInsensitiveTagMap$1;
	/**
	 * ID3v2.2 tag mappings
	 */
	exports.id3v22TagMap = {
	    TT2: 'title',
	    TP1: 'artist',
	    TP2: 'albumartist',
	    TAL: 'album',
	    TYE: 'year',
	    COM: 'comment',
	    TRK: 'track',
	    TPA: 'disk',
	    TCO: 'genre',
	    PIC: 'picture',
	    TCM: 'composer',
	    TOR: 'originaldate',
	    TOT: 'originalalbum',
	    TXT: 'lyricist',
	    TP3: 'conductor',
	    TPB: 'label',
	    TT1: 'grouping',
	    TT3: 'subtitle',
	    TLA: 'language',
	    TCR: 'copyright',
	    WCP: 'license',
	    TEN: 'encodedby',
	    TSS: 'encodersettings',
	    WAR: 'website',
	    'COM:iTunPGAP': 'gapless'
	    /* ToDo: iTunes tags:
	    'COM:iTunNORM': ,
	    'COM:iTunSMPB': 'encoder delay',
	    'COM:iTunes_CDDB_IDs'
	    */ ,
	    PCS: 'podcast',
	    TCP: "compilation",
	    TDR: 'date',
	    TS2: 'albumartistsort',
	    TSA: 'albumsort',
	    TSC: 'composersort',
	    TSP: 'artistsort',
	    TST: 'titlesort',
	    WFD: 'podcasturl',
	    TBP: 'bpm'
	};
	class ID3v22TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {
	    constructor() {
	        super(['ID3v2.2'], exports.id3v22TagMap);
	    }
	}
	exports.ID3v22TagMapper = ID3v22TagMapper;
	
} (ID3v22TagMapper));

var APEv2TagMapper$1 = {};

Object.defineProperty(APEv2TagMapper$1, "__esModule", { value: true });
APEv2TagMapper$1.APEv2TagMapper = void 0;
const CaseInsensitiveTagMap_1$1 = CaseInsensitiveTagMap$1;
/**
 * ID3v2.2 tag mappings
 */
const apev2TagMap = {
    Title: 'title',
    Artist: 'artist',
    Artists: 'artists',
    'Album Artist': 'albumartist',
    Album: 'album',
    Year: 'date',
    Originalyear: 'originalyear',
    Originaldate: 'originaldate',
    Comment: 'comment',
    Track: 'track',
    Disc: 'disk',
    DISCNUMBER: 'disk',
    Genre: 'genre',
    'Cover Art (Front)': 'picture',
    'Cover Art (Back)': 'picture',
    Composer: 'composer',
    Lyrics: 'lyrics',
    ALBUMSORT: 'albumsort',
    TITLESORT: 'titlesort',
    WORK: 'work',
    ARTISTSORT: 'artistsort',
    ALBUMARTISTSORT: 'albumartistsort',
    COMPOSERSORT: 'composersort',
    Lyricist: 'lyricist',
    Writer: 'writer',
    Conductor: 'conductor',
    // 'Performer=artist (instrument)': 'performer:instrument',
    MixArtist: 'remixer',
    Arranger: 'arranger',
    Engineer: 'engineer',
    Producer: 'producer',
    DJMixer: 'djmixer',
    Mixer: 'mixer',
    Label: 'label',
    Grouping: 'grouping',
    Subtitle: 'subtitle',
    DiscSubtitle: 'discsubtitle',
    Compilation: 'compilation',
    BPM: 'bpm',
    Mood: 'mood',
    Media: 'media',
    CatalogNumber: 'catalognumber',
    MUSICBRAINZ_ALBUMSTATUS: 'releasestatus',
    MUSICBRAINZ_ALBUMTYPE: 'releasetype',
    RELEASECOUNTRY: 'releasecountry',
    Script: 'script',
    Language: 'language',
    Copyright: 'copyright',
    LICENSE: 'license',
    EncodedBy: 'encodedby',
    EncoderSettings: 'encodersettings',
    Barcode: 'barcode',
    ISRC: 'isrc',
    ASIN: 'asin',
    musicbrainz_trackid: 'musicbrainz_recordingid',
    musicbrainz_releasetrackid: 'musicbrainz_trackid',
    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',
    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',
    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',
    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',
    MUSICBRAINZ_WORKID: 'musicbrainz_workid',
    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',
    MUSICBRAINZ_DISCID: 'musicbrainz_discid',
    Acoustid_Id: 'acoustid_id',
    ACOUSTID_FINGERPRINT: 'acoustid_fingerprint',
    MUSICIP_PUID: 'musicip_puid',
    Weblink: 'website',
    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',
    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',
    MP3GAIN_MINMAX: 'replaygain_track_minmax',
    MP3GAIN_UNDO: 'replaygain_undo'
};
class APEv2TagMapper extends CaseInsensitiveTagMap_1$1.CaseInsensitiveTagMap {
    constructor() {
        super(['APEv2'], apev2TagMap);
    }
}
APEv2TagMapper$1.APEv2TagMapper = APEv2TagMapper;

var MP4TagMapper = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MP4TagMapper = exports.tagType = void 0;
	const CaseInsensitiveTagMap_1 = CaseInsensitiveTagMap$1;
	/**
	 * Ref: https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata
	 */
	const mp4TagMap = {
	    '©nam': 'title',
	    '©ART': 'artist',
	    aART: 'albumartist',
	    /**
	     * ToDo: Album artist seems to be stored here while Picard documentation says: aART
	     */
	    '----:com.apple.iTunes:Band': 'albumartist',
	    '©alb': 'album',
	    '©day': 'date',
	    '©cmt': 'comment',
	    '©com': 'comment',
	    trkn: 'track',
	    disk: 'disk',
	    '©gen': 'genre',
	    covr: 'picture',
	    '©wrt': 'composer',
	    '©lyr': 'lyrics',
	    soal: 'albumsort',
	    sonm: 'titlesort',
	    soar: 'artistsort',
	    soaa: 'albumartistsort',
	    soco: 'composersort',
	    '----:com.apple.iTunes:LYRICIST': 'lyricist',
	    '----:com.apple.iTunes:CONDUCTOR': 'conductor',
	    '----:com.apple.iTunes:REMIXER': 'remixer',
	    '----:com.apple.iTunes:ENGINEER': 'engineer',
	    '----:com.apple.iTunes:PRODUCER': 'producer',
	    '----:com.apple.iTunes:DJMIXER': 'djmixer',
	    '----:com.apple.iTunes:MIXER': 'mixer',
	    '----:com.apple.iTunes:LABEL': 'label',
	    '©grp': 'grouping',
	    '----:com.apple.iTunes:SUBTITLE': 'subtitle',
	    '----:com.apple.iTunes:DISCSUBTITLE': 'discsubtitle',
	    cpil: 'compilation',
	    tmpo: 'bpm',
	    '----:com.apple.iTunes:MOOD': 'mood',
	    '----:com.apple.iTunes:MEDIA': 'media',
	    '----:com.apple.iTunes:CATALOGNUMBER': 'catalognumber',
	    tvsh: 'tvShow',
	    tvsn: 'tvSeason',
	    tves: 'tvEpisode',
	    sosn: 'tvShowSort',
	    tven: 'tvEpisodeId',
	    tvnn: 'tvNetwork',
	    pcst: 'podcast',
	    purl: 'podcasturl',
	    '----:com.apple.iTunes:MusicBrainz Album Status': 'releasestatus',
	    '----:com.apple.iTunes:MusicBrainz Album Type': 'releasetype',
	    '----:com.apple.iTunes:MusicBrainz Album Release Country': 'releasecountry',
	    '----:com.apple.iTunes:SCRIPT': 'script',
	    '----:com.apple.iTunes:LANGUAGE': 'language',
	    cprt: 'copyright',
	    '©cpy': 'copyright',
	    '----:com.apple.iTunes:LICENSE': 'license',
	    '©too': 'encodedby',
	    pgap: 'gapless',
	    '----:com.apple.iTunes:BARCODE': 'barcode',
	    '----:com.apple.iTunes:ISRC': 'isrc',
	    '----:com.apple.iTunes:ASIN': 'asin',
	    '----:com.apple.iTunes:NOTES': 'comment',
	    '----:com.apple.iTunes:MusicBrainz Track Id': 'musicbrainz_recordingid',
	    '----:com.apple.iTunes:MusicBrainz Release Track Id': 'musicbrainz_trackid',
	    '----:com.apple.iTunes:MusicBrainz Album Id': 'musicbrainz_albumid',
	    '----:com.apple.iTunes:MusicBrainz Artist Id': 'musicbrainz_artistid',
	    '----:com.apple.iTunes:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',
	    '----:com.apple.iTunes:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',
	    '----:com.apple.iTunes:MusicBrainz Work Id': 'musicbrainz_workid',
	    '----:com.apple.iTunes:MusicBrainz TRM Id': 'musicbrainz_trmid',
	    '----:com.apple.iTunes:MusicBrainz Disc Id': 'musicbrainz_discid',
	    '----:com.apple.iTunes:Acoustid Id': 'acoustid_id',
	    '----:com.apple.iTunes:Acoustid Fingerprint': 'acoustid_fingerprint',
	    '----:com.apple.iTunes:MusicIP PUID': 'musicip_puid',
	    '----:com.apple.iTunes:fingerprint': 'musicip_fingerprint',
	    '----:com.apple.iTunes:replaygain_track_gain': 'replaygain_track_gain',
	    '----:com.apple.iTunes:replaygain_track_peak': 'replaygain_track_peak',
	    '----:com.apple.iTunes:replaygain_album_gain': 'replaygain_album_gain',
	    '----:com.apple.iTunes:replaygain_album_peak': 'replaygain_album_peak',
	    '----:com.apple.iTunes:replaygain_track_minmax': 'replaygain_track_minmax',
	    '----:com.apple.iTunes:replaygain_album_minmax': 'replaygain_album_minmax',
	    '----:com.apple.iTunes:replaygain_undo': 'replaygain_undo',
	    // Additional mappings:
	    gnre: 'genre',
	    '----:com.apple.iTunes:ALBUMARTISTSORT': 'albumartistsort',
	    '----:com.apple.iTunes:ARTISTS': 'artists',
	    '----:com.apple.iTunes:ORIGINALDATE': 'originaldate',
	    '----:com.apple.iTunes:ORIGINALYEAR': 'originalyear',
	    // '----:com.apple.iTunes:PERFORMER': 'performer'
	    desc: 'description',
	    ldes: 'longDescription',
	    '©mvn': 'movement',
	    '©mvi': 'movementIndex',
	    '©mvc': 'movementTotal',
	    '©wrk': 'work',
	    catg: 'category',
	    egid: 'podcastId',
	    hdvd: 'hdVideo',
	    keyw: 'keywords',
	    shwm: 'showMovement',
	    stik: 'stik',
	    rate: 'rating'
	};
	exports.tagType = 'iTunes';
	class MP4TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {
	    constructor() {
	        super([exports.tagType], mp4TagMap);
	    }
	    postMap(tag, warnings) {
	        switch (tag.id) {
	            case 'rate':
	                tag.value = {
	                    source: undefined,
	                    rating: parseFloat(tag.value) / 100
	                };
	                break;
	        }
	    }
	}
	exports.MP4TagMapper = MP4TagMapper;
	
} (MP4TagMapper));

var VorbisTagMapper$1 = {};

Object.defineProperty(VorbisTagMapper$1, "__esModule", { value: true });
VorbisTagMapper$1.VorbisTagMapper = void 0;
const GenericTagMapper_1$2 = GenericTagMapper;
/**
 * Vorbis tag mappings
 *
 * Mapping from native header format to one or possibly more 'common' entries
 * The common entries aim to read the same information from different media files
 * independent of the underlying format
 */
const vorbisTagMap = {
    TITLE: 'title',
    ARTIST: 'artist',
    ARTISTS: 'artists',
    ALBUMARTIST: 'albumartist',
    'ALBUM ARTIST': 'albumartist',
    ALBUM: 'album',
    DATE: 'date',
    ORIGINALDATE: 'originaldate',
    ORIGINALYEAR: 'originalyear',
    COMMENT: 'comment',
    TRACKNUMBER: 'track',
    DISCNUMBER: 'disk',
    GENRE: 'genre',
    METADATA_BLOCK_PICTURE: 'picture',
    COMPOSER: 'composer',
    LYRICS: 'lyrics',
    ALBUMSORT: 'albumsort',
    TITLESORT: 'titlesort',
    WORK: 'work',
    ARTISTSORT: 'artistsort',
    ALBUMARTISTSORT: 'albumartistsort',
    COMPOSERSORT: 'composersort',
    LYRICIST: 'lyricist',
    WRITER: 'writer',
    CONDUCTOR: 'conductor',
    // 'PERFORMER=artist (instrument)': 'performer:instrument', // ToDo
    REMIXER: 'remixer',
    ARRANGER: 'arranger',
    ENGINEER: 'engineer',
    PRODUCER: 'producer',
    DJMIXER: 'djmixer',
    MIXER: 'mixer',
    LABEL: 'label',
    GROUPING: 'grouping',
    SUBTITLE: 'subtitle',
    DISCSUBTITLE: 'discsubtitle',
    TRACKTOTAL: 'totaltracks',
    DISCTOTAL: 'totaldiscs',
    COMPILATION: 'compilation',
    RATING: 'rating',
    BPM: 'bpm',
    KEY: 'key',
    MOOD: 'mood',
    MEDIA: 'media',
    CATALOGNUMBER: 'catalognumber',
    RELEASESTATUS: 'releasestatus',
    RELEASETYPE: 'releasetype',
    RELEASECOUNTRY: 'releasecountry',
    SCRIPT: 'script',
    LANGUAGE: 'language',
    COPYRIGHT: 'copyright',
    LICENSE: 'license',
    ENCODEDBY: 'encodedby',
    ENCODERSETTINGS: 'encodersettings',
    BARCODE: 'barcode',
    ISRC: 'isrc',
    ASIN: 'asin',
    MUSICBRAINZ_TRACKID: 'musicbrainz_recordingid',
    MUSICBRAINZ_RELEASETRACKID: 'musicbrainz_trackid',
    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',
    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',
    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',
    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',
    MUSICBRAINZ_WORKID: 'musicbrainz_workid',
    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',
    MUSICBRAINZ_DISCID: 'musicbrainz_discid',
    ACOUSTID_ID: 'acoustid_id',
    ACOUSTID_ID_FINGERPRINT: 'acoustid_fingerprint',
    MUSICIP_PUID: 'musicip_puid',
    // 'FINGERPRINT=MusicMagic Fingerprint {fingerprint}': 'musicip_fingerprint', // ToDo
    WEBSITE: 'website',
    NOTES: 'notes',
    TOTALTRACKS: 'totaltracks',
    TOTALDISCS: 'totaldiscs',
    // Discogs
    DISCOGS_ARTIST_ID: 'discogs_artist_id',
    DISCOGS_ARTISTS: 'artists',
    DISCOGS_ARTIST_NAME: 'artists',
    DISCOGS_ALBUM_ARTISTS: 'albumartist',
    DISCOGS_CATALOG: 'catalognumber',
    DISCOGS_COUNTRY: 'releasecountry',
    DISCOGS_DATE: 'originaldate',
    DISCOGS_LABEL: 'label',
    DISCOGS_LABEL_ID: 'discogs_label_id',
    DISCOGS_MASTER_RELEASE_ID: 'discogs_master_release_id',
    DISCOGS_RATING: 'discogs_rating',
    DISCOGS_RELEASED: 'date',
    DISCOGS_RELEASE_ID: 'discogs_release_id',
    DISCOGS_VOTES: 'discogs_votes',
    CATALOGID: 'catalognumber',
    STYLE: 'genre',
    //
    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',
    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',
    REPLAYGAIN_ALBUM_GAIN: 'replaygain_album_gain',
    REPLAYGAIN_ALBUM_PEAK: 'replaygain_album_peak',
    // To Sure if these (REPLAYGAIN_MINMAX, REPLAYGAIN_ALBUM_MINMAX & REPLAYGAIN_UNDO) are used for Vorbis:
    REPLAYGAIN_MINMAX: 'replaygain_track_minmax',
    REPLAYGAIN_ALBUM_MINMAX: 'replaygain_album_minmax',
    REPLAYGAIN_UNDO: 'replaygain_undo'
};
class VorbisTagMapper extends GenericTagMapper_1$2.CommonTagMapper {
    static toRating(email, rating, maxScore) {
        return {
            source: email ? email.toLowerCase() : email,
            rating: (parseFloat(rating) / maxScore) * GenericTagMapper_1$2.CommonTagMapper.maxRatingScore
        };
    }
    constructor() {
        super(['vorbis'], vorbisTagMap);
    }
    postMap(tag) {
        if (tag.id === 'RATING') {
            // The way Winamp 5.666 assigns rating
            tag.value = VorbisTagMapper.toRating(undefined, tag.value, 100);
        }
        else if (tag.id.indexOf('RATING:') === 0) {
            const keys = tag.id.split(':');
            tag.value = VorbisTagMapper.toRating(keys[1], tag.value, 1);
            tag.id = keys[0];
        }
    }
}
VorbisTagMapper$1.VorbisTagMapper = VorbisTagMapper;

var RiffInfoTagMap = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.RiffInfoTagMapper = exports.riffInfoTagMap = void 0;
	const GenericTagMapper_1 = GenericTagMapper;
	/**
	 * RIFF Info Tags; part of the EXIF 2.3
	 * Ref: http://owl.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info
	 */
	exports.riffInfoTagMap = {
	    IART: 'artist',
	    ICRD: 'date',
	    INAM: 'title',
	    TITL: 'title',
	    IPRD: 'album',
	    ITRK: 'track',
	    IPRT: 'track',
	    COMM: 'comment',
	    ICMT: 'comment',
	    ICNT: 'releasecountry',
	    GNRE: 'genre',
	    IWRI: 'writer',
	    RATE: 'rating',
	    YEAR: 'year',
	    ISFT: 'encodedby',
	    CODE: 'encodedby',
	    TURL: 'website',
	    IGNR: 'genre',
	    IENG: 'engineer',
	    ITCH: 'technician',
	    IMED: 'media',
	    IRPD: 'album' // Product, where the file was intended for
	};
	class RiffInfoTagMapper extends GenericTagMapper_1.CommonTagMapper {
	    constructor() {
	        super(['exif'], exports.riffInfoTagMap);
	    }
	}
	exports.RiffInfoTagMapper = RiffInfoTagMapper;
	
} (RiffInfoTagMap));

var MatroskaTagMapper$1 = {};

Object.defineProperty(MatroskaTagMapper$1, "__esModule", { value: true });
MatroskaTagMapper$1.MatroskaTagMapper = void 0;
const CaseInsensitiveTagMap_1 = CaseInsensitiveTagMap$1;
/**
 * EBML Tag map
 */
const ebmlTagMap = {
    'segment:title': 'title',
    'album:ARTIST': 'albumartist',
    'album:ARTISTSORT': 'albumartistsort',
    'album:TITLE': 'album',
    'album:DATE_RECORDED': 'originaldate',
    'album:PART_NUMBER': 'disk',
    'album:TOTAL_PARTS': 'totaltracks',
    'track:ARTIST': 'artist',
    'track:ARTISTSORT': 'artistsort',
    'track:TITLE': 'title',
    'track:PART_NUMBER': 'track',
    'track:MUSICBRAINZ_TRACKID': 'musicbrainz_recordingid',
    'track:MUSICBRAINZ_ALBUMID': 'musicbrainz_albumid',
    'track:MUSICBRAINZ_ARTISTID': 'musicbrainz_artistid',
    'track:PUBLISHER': 'label',
    'track:GENRE': 'genre',
    'track:ENCODER': 'encodedby',
    'track:ENCODER_OPTIONS': 'encodersettings',
    'edition:TOTAL_PARTS': 'totaldiscs',
    picture: 'picture'
};
class MatroskaTagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {
    constructor() {
        super(['matroska'], ebmlTagMap);
    }
}
MatroskaTagMapper$1.MatroskaTagMapper = MatroskaTagMapper;

var AiffTagMap = {};

Object.defineProperty(AiffTagMap, "__esModule", { value: true });
AiffTagMap.AiffTagMapper = void 0;
const GenericTagMapper_1$1 = GenericTagMapper;
/**
 * ID3v1 tag mappings
 */
const tagMap = {
    NAME: 'title',
    AUTH: 'artist',
    '(c) ': 'copyright',
    ANNO: 'comment'
};
class AiffTagMapper extends GenericTagMapper_1$1.CommonTagMapper {
    constructor() {
        super(['AIFF'], tagMap);
    }
}
AiffTagMap.AiffTagMapper = AiffTagMapper;

Object.defineProperty(CombinedTagMapper$1, "__esModule", { value: true });
CombinedTagMapper$1.CombinedTagMapper = void 0;
const ID3v1TagMap_1 = ID3v1TagMap;
const ID3v24TagMapper_1 = ID3v24TagMapper$1;
const AsfTagMapper_1 = AsfTagMapper$1;
const ID3v22TagMapper_1 = ID3v22TagMapper;
const APEv2TagMapper_1 = APEv2TagMapper$1;
const MP4TagMapper_1 = MP4TagMapper;
const VorbisTagMapper_1 = VorbisTagMapper$1;
const RiffInfoTagMap_1 = RiffInfoTagMap;
const MatroskaTagMapper_1 = MatroskaTagMapper$1;
const AiffTagMap_1 = AiffTagMap;
class CombinedTagMapper {
    constructor() {
        this.tagMappers = {};
        [
            new ID3v1TagMap_1.ID3v1TagMapper(),
            new ID3v22TagMapper_1.ID3v22TagMapper(),
            new ID3v24TagMapper_1.ID3v24TagMapper(),
            new MP4TagMapper_1.MP4TagMapper(),
            new MP4TagMapper_1.MP4TagMapper(),
            new VorbisTagMapper_1.VorbisTagMapper(),
            new APEv2TagMapper_1.APEv2TagMapper(),
            new AsfTagMapper_1.AsfTagMapper(),
            new RiffInfoTagMap_1.RiffInfoTagMapper(),
            new MatroskaTagMapper_1.MatroskaTagMapper(),
            new AiffTagMap_1.AiffTagMapper()
        ].forEach(mapper => {
            this.registerTagMapper(mapper);
        });
    }
    /**
     * Convert native to generic (common) tags
     * @param tagType Originating tag format
     * @param tag     Native tag to map to a generic tag id
     * @param warnings
     * @return Generic tag result (output of this function)
     */
    mapTag(tagType, tag, warnings) {
        const tagMapper = this.tagMappers[tagType];
        if (tagMapper) {
            return this.tagMappers[tagType].mapGenericTag(tag, warnings);
        }
        throw new Error('No generic tag mapper defined for tag-format: ' + tagType);
    }
    registerTagMapper(genericTagMapper) {
        for (const tagType of genericTagMapper.tagTypes) {
            this.tagMappers[tagType] = genericTagMapper;
        }
    }
}
CombinedTagMapper$1.CombinedTagMapper = CombinedTagMapper;

Object.defineProperty(MetadataCollector$1, "__esModule", { value: true });
MetadataCollector$1.joinArtists = MetadataCollector$1.MetadataCollector = void 0;
const type_1$2 = type;
const debug_1$n = browserExports;
const GenericTagTypes_1 = GenericTagTypes;
const CombinedTagMapper_1 = CombinedTagMapper$1;
const GenericTagMapper_1 = GenericTagMapper;
const Util_1$1 = Util;
const FileType$1 = core;
const debug$n = (0, debug_1$n.default)('music-metadata:collector');
const TagPriority = ['matroska', 'APEv2', 'vorbis', 'ID3v2.4', 'ID3v2.3', 'ID3v2.2', 'exif', 'asf', 'iTunes', 'AIFF', 'ID3v1'];
/**
 * Provided to the parser to uodate the metadata result.
 * Responsible for triggering async updates
 */
class MetadataCollector {
    constructor(opts) {
        this.opts = opts;
        this.format = {
            tagTypes: [],
            trackInfo: []
        };
        this.native = {};
        this.common = {
            track: { no: null, of: null },
            disk: { no: null, of: null },
            movementIndex: {}
        };
        this.quality = {
            warnings: []
        };
        /**
         * Keeps track of origin priority for each mapped id
         */
        this.commonOrigin = {};
        /**
         * Maps a tag type to a priority
         */
        this.originPriority = {};
        this.tagMapper = new CombinedTagMapper_1.CombinedTagMapper();
        let priority = 1;
        for (const tagType of TagPriority) {
            this.originPriority[tagType] = priority++;
        }
        this.originPriority.artificial = 500; // Filled using alternative tags
        this.originPriority.id3v1 = 600; // Consider as the worst because of the field length limit
    }
    /**
     * @returns {boolean} true if one or more tags have been found
     */
    hasAny() {
        return Object.keys(this.native).length > 0;
    }
    addStreamInfo(streamInfo) {
        debug$n(`streamInfo: type=${type_1$2.TrackType[streamInfo.type]}, codec=${streamInfo.codecName}`);
        this.format.trackInfo.push(streamInfo);
    }
    setFormat(key, value) {
        debug$n(`format: ${key} = ${value}`);
        this.format[key] = value; // as any to override readonly
        if (this.opts.observer) {
            this.opts.observer({ metadata: this, tag: { type: 'format', id: key, value } });
        }
    }
    addTag(tagType, tagId, value) {
        debug$n(`tag ${tagType}.${tagId} = ${value}`);
        if (!this.native[tagType]) {
            this.format.tagTypes.push(tagType);
            this.native[tagType] = [];
        }
        this.native[tagType].push({ id: tagId, value });
        this.toCommon(tagType, tagId, value);
    }
    addWarning(warning) {
        this.quality.warnings.push({ message: warning });
    }
    postMap(tagType, tag) {
        // Common tag (alias) found
        // check if we need to do something special with common tag
        // if the event has been aliased then we need to clean it before
        // it is emitted to the user. e.g. genre (20) -> Electronic
        switch (tag.id) {
            case 'artist':
                if (this.commonOrigin.artist === this.originPriority[tagType]) {
                    // Assume the artist field is used as artists
                    return this.postMap('artificial', { id: 'artists', value: tag.value });
                }
                if (!this.common.artists) {
                    // Fill artists using artist source
                    this.setGenericTag('artificial', { id: 'artists', value: tag.value });
                }
                break;
            case 'artists':
                if (!this.common.artist || this.commonOrigin.artist === this.originPriority.artificial) {
                    if (!this.common.artists || this.common.artists.indexOf(tag.value) === -1) {
                        // Fill artist using artists source
                        const artists = (this.common.artists || []).concat([tag.value]);
                        const value = joinArtists(artists);
                        const artistTag = { id: 'artist', value };
                        this.setGenericTag('artificial', artistTag);
                    }
                }
                break;
            case 'picture':
                this.postFixPicture(tag.value).then(picture => {
                    if (picture !== null) {
                        tag.value = picture;
                        this.setGenericTag(tagType, tag);
                    }
                });
                return;
            case 'totaltracks':
                this.common.track.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);
                return;
            case 'totaldiscs':
                this.common.disk.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);
                return;
            case 'movementTotal':
                this.common.movementIndex.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);
                return;
            case 'track':
            case 'disk':
            case 'movementIndex':
                const of = this.common[tag.id].of; // store of value, maybe maybe overwritten
                this.common[tag.id] = GenericTagMapper_1.CommonTagMapper.normalizeTrack(tag.value);
                this.common[tag.id].of = of != null ? of : this.common[tag.id].of;
                return;
            case 'bpm':
            case 'year':
            case 'originalyear':
                tag.value = parseInt(tag.value, 10);
                break;
            case 'date':
                // ToDo: be more strict on 'YYYY...'
                const year = parseInt(tag.value.substr(0, 4), 10);
                if (!isNaN(year)) {
                    this.common.year = year;
                }
                break;
            case 'discogs_label_id':
            case 'discogs_release_id':
            case 'discogs_master_release_id':
            case 'discogs_artist_id':
            case 'discogs_votes':
                tag.value = typeof tag.value === 'string' ? parseInt(tag.value, 10) : tag.value;
                break;
            case 'replaygain_track_gain':
            case 'replaygain_track_peak':
            case 'replaygain_album_gain':
            case 'replaygain_album_peak':
                tag.value = (0, Util_1$1.toRatio)(tag.value);
                break;
            case 'replaygain_track_minmax':
                tag.value = tag.value.split(',').map(v => parseInt(v, 10));
                break;
            case 'replaygain_undo':
                const minMix = tag.value.split(',').map(v => parseInt(v, 10));
                tag.value = {
                    leftChannel: minMix[0],
                    rightChannel: minMix[1]
                };
                break;
            case 'gapless': // iTunes gap-less flag
            case 'compilation':
            case 'podcast':
            case 'showMovement':
                tag.value = tag.value === '1' || tag.value === 1; // boolean
                break;
            case 'isrc': // Only keep unique values
                if (this.common[tag.id] && this.common[tag.id].indexOf(tag.value) !== -1)
                    return;
                break;
            // nothing to do
        }
        if (tag.value !== null) {
            this.setGenericTag(tagType, tag);
        }
    }
    /**
     * Convert native tags to common tags
     * @returns {IAudioMetadata} Native + common tags
     */
    toCommonMetadata() {
        return {
            format: this.format,
            native: this.native,
            quality: this.quality,
            common: this.common
        };
    }
    /**
     * Fix some common issues with picture object
     * @param picture Picture
     */
    async postFixPicture(picture) {
        if (picture.data && picture.data.length > 0) {
            if (!picture.format) {
                const fileType = await FileType$1.fromBuffer(picture.data);
                if (fileType) {
                    picture.format = fileType.mime;
                }
                else {
                    return null;
                }
            }
            picture.format = picture.format.toLocaleLowerCase();
            switch (picture.format) {
                case 'image/jpg':
                    picture.format = 'image/jpeg'; // ToDo: register warning
            }
            return picture;
        }
        this.addWarning(`Empty picture tag found`);
        return null;
    }
    /**
     * Convert native tag to common tags
     */
    toCommon(tagType, tagId, value) {
        const tag = { id: tagId, value };
        const genericTag = this.tagMapper.mapTag(tagType, tag, this);
        if (genericTag) {
            this.postMap(tagType, genericTag);
        }
    }
    /**
     * Set generic tag
     */
    setGenericTag(tagType, tag) {
        debug$n(`common.${tag.id} = ${tag.value}`);
        const prio0 = this.commonOrigin[tag.id] || 1000;
        const prio1 = this.originPriority[tagType];
        if ((0, GenericTagTypes_1.isSingleton)(tag.id)) {
            if (prio1 <= prio0) {
                this.common[tag.id] = tag.value;
                this.commonOrigin[tag.id] = prio1;
            }
            else {
                return debug$n(`Ignore native tag (singleton): ${tagType}.${tag.id} = ${tag.value}`);
            }
        }
        else {
            if (prio1 === prio0) {
                if (!(0, GenericTagTypes_1.isUnique)(tag.id) || this.common[tag.id].indexOf(tag.value) === -1) {
                    this.common[tag.id].push(tag.value);
                }
                else {
                    debug$n(`Ignore duplicate value: ${tagType}.${tag.id} = ${tag.value}`);
                }
                // no effect? this.commonOrigin[tag.id] = prio1;
            }
            else if (prio1 < prio0) {
                this.common[tag.id] = [tag.value];
                this.commonOrigin[tag.id] = prio1;
            }
            else {
                return debug$n(`Ignore native tag (list): ${tagType}.${tag.id} = ${tag.value}`);
            }
        }
        if (this.opts.observer) {
            this.opts.observer({ metadata: this, tag: { type: 'common', id: tag.id, value: tag.value } });
        }
        // ToDo: trigger metadata event
    }
}
MetadataCollector$1.MetadataCollector = MetadataCollector;
function joinArtists(artists) {
    if (artists.length > 2) {
        return artists.slice(0, artists.length - 1).join(', ') + ' & ' + artists[artists.length - 1];
    }
    return artists.join(' & ');
}
MetadataCollector$1.joinArtists = joinArtists;

var AiffParser = {};

var ID3v2Parser$1 = {};

var FrameParser$1 = {};

var ID3v2Token = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TextEncodingToken = exports.ExtendedHeader = exports.ID3v2Header = exports.UINT32SYNCSAFE = exports.AttachedPictureType = void 0;
	const Token = lib$1;
	const util = Util;
	(function (AttachedPictureType) {
	    AttachedPictureType[AttachedPictureType["Other"] = 0] = "Other";
	    AttachedPictureType[AttachedPictureType["32x32 pixels 'file icon' (PNG only)"] = 1] = "32x32 pixels 'file icon' (PNG only)";
	    AttachedPictureType[AttachedPictureType["Other file icon"] = 2] = "Other file icon";
	    AttachedPictureType[AttachedPictureType["Cover (front)"] = 3] = "Cover (front)";
	    AttachedPictureType[AttachedPictureType["Cover (back)"] = 4] = "Cover (back)";
	    AttachedPictureType[AttachedPictureType["Leaflet page"] = 5] = "Leaflet page";
	    AttachedPictureType[AttachedPictureType["Media (e.g. label side of CD)"] = 6] = "Media (e.g. label side of CD)";
	    AttachedPictureType[AttachedPictureType["Lead artist/lead performer/soloist"] = 7] = "Lead artist/lead performer/soloist";
	    AttachedPictureType[AttachedPictureType["Artist/performer"] = 8] = "Artist/performer";
	    AttachedPictureType[AttachedPictureType["Conductor"] = 9] = "Conductor";
	    AttachedPictureType[AttachedPictureType["Band/Orchestra"] = 10] = "Band/Orchestra";
	    AttachedPictureType[AttachedPictureType["Composer"] = 11] = "Composer";
	    AttachedPictureType[AttachedPictureType["Lyricist/text writer"] = 12] = "Lyricist/text writer";
	    AttachedPictureType[AttachedPictureType["Recording Location"] = 13] = "Recording Location";
	    AttachedPictureType[AttachedPictureType["During recording"] = 14] = "During recording";
	    AttachedPictureType[AttachedPictureType["During performance"] = 15] = "During performance";
	    AttachedPictureType[AttachedPictureType["Movie/video screen capture"] = 16] = "Movie/video screen capture";
	    AttachedPictureType[AttachedPictureType["A bright coloured fish"] = 17] = "A bright coloured fish";
	    AttachedPictureType[AttachedPictureType["Illustration"] = 18] = "Illustration";
	    AttachedPictureType[AttachedPictureType["Band/artist logotype"] = 19] = "Band/artist logotype";
	    AttachedPictureType[AttachedPictureType["Publisher/Studio logotype"] = 20] = "Publisher/Studio logotype";
	})(exports.AttachedPictureType || (exports.AttachedPictureType = {}));
	/**
	 * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.
	 * 4 * %0xxxxxxx
	 */
	exports.UINT32SYNCSAFE = {
	    get: (buf, off) => {
	        return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |
	            ((buf[off + 1]) << 14) | ((buf[off]) << 21);
	    },
	    len: 4
	};
	/**
	 * ID3v2 header
	 * Ref: http://id3.org/id3v2.3.0#ID3v2_header
	 * ToDo
	 */
	exports.ID3v2Header = {
	    len: 10,
	    get: (buf, off) => {
	        return {
	            // ID3v2/file identifier   "ID3"
	            fileIdentifier: new Token.StringType(3, 'ascii').get(buf, off),
	            // ID3v2 versionIndex
	            version: {
	                major: Token.INT8.get(buf, off + 3),
	                revision: Token.INT8.get(buf, off + 4)
	            },
	            // ID3v2 flags
	            flags: {
	                // Unsynchronisation
	                unsynchronisation: util.getBit(buf, off + 5, 7),
	                // Extended header
	                isExtendedHeader: util.getBit(buf, off + 5, 6),
	                // Experimental indicator
	                expIndicator: util.getBit(buf, off + 5, 5),
	                footer: util.getBit(buf, off + 5, 4)
	            },
	            size: exports.UINT32SYNCSAFE.get(buf, off + 6)
	        };
	    }
	};
	exports.ExtendedHeader = {
	    len: 10,
	    get: (buf, off) => {
	        return {
	            // Extended header size
	            size: Token.UINT32_BE.get(buf, off),
	            // Extended Flags
	            extendedFlags: Token.UINT16_BE.get(buf, off + 4),
	            // Size of padding
	            sizeOfPadding: Token.UINT32_BE.get(buf, off + 6),
	            // CRC data present
	            crcDataPresent: util.getBit(buf, off + 4, 31)
	        };
	    }
	};
	exports.TextEncodingToken = {
	    len: 1,
	    get: (uint8Array, off) => {
	        switch (uint8Array[off]) {
	            case 0x00:
	                return { encoding: 'latin1' }; // binary
	            case 0x01:
	                return { encoding: 'utf16le', bom: true };
	            case 0x02:
	                return { encoding: 'utf16le', bom: false };
	            case 0x03:
	                return { encoding: 'utf8', bom: false };
	            default:
	                return { encoding: 'utf8', bom: false };
	        }
	    }
	}; 
} (ID3v2Token));

var ID3v1Parser = {};

var BasicParser$1 = {};

Object.defineProperty(BasicParser$1, "__esModule", { value: true });
BasicParser$1.BasicParser = void 0;
class BasicParser {
    /**
     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).
     * @param {INativeMetadataCollector} metadata Output
     * @param {ITokenizer} tokenizer Input
     * @param {IOptions} options Parsing options
     */
    init(metadata, tokenizer, options) {
        this.metadata = metadata;
        this.tokenizer = tokenizer;
        this.options = options;
        return this;
    }
}
BasicParser$1.BasicParser = BasicParser;

var APEv2Parser$1 = {};

var APEv2Token = {};

var FourCC = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FourCcToken = void 0;
	const util = Util;
	const validFourCC = /^[\x21-\x7e©][\x20-\x7e\x00()]{3}/;
	/**
	 * Token for read FourCC
	 * Ref: https://en.wikipedia.org/wiki/FourCC
	 */
	exports.FourCcToken = {
	    len: 4,
	    get: (buf, off) => {
	        const id = buf.toString('binary', off, off + exports.FourCcToken.len);
	        if (!id.match(validFourCC)) {
	            throw new Error(`FourCC contains invalid characters: ${util.a2hex(id)} "${id}"`);
	        }
	        return id;
	    },
	    put: (buffer, offset, id) => {
	        const str = Buffer.from(id, 'binary');
	        if (str.length !== 4)
	            throw new Error('Invalid length');
	        return str.copy(buffer, offset);
	    }
	};
	
} (FourCC));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isBitSet = exports.parseTagFlags = exports.TagField = exports.TagItemHeader = exports.TagFooter = exports.Header = exports.DescriptorParser = exports.DataType = void 0;
	const Token = lib$1;
	const FourCC_1 = FourCC;
	(function (DataType) {
	    DataType[DataType["text_utf8"] = 0] = "text_utf8";
	    DataType[DataType["binary"] = 1] = "binary";
	    DataType[DataType["external_info"] = 2] = "external_info";
	    DataType[DataType["reserved"] = 3] = "reserved";
	})(exports.DataType || (exports.DataType = {}));
	/**
	 * APE_DESCRIPTOR: defines the sizes (and offsets) of all the pieces, as well as the MD5 checksum
	 */
	exports.DescriptorParser = {
	    len: 52,
	    get: (buf, off) => {
	        return {
	            // should equal 'MAC '
	            ID: FourCC_1.FourCcToken.get(buf, off),
	            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)
	            version: Token.UINT32_LE.get(buf, off + 4) / 1000,
	            // the number of descriptor bytes (allows later expansion of this header)
	            descriptorBytes: Token.UINT32_LE.get(buf, off + 8),
	            // the number of header APE_HEADER bytes
	            headerBytes: Token.UINT32_LE.get(buf, off + 12),
	            // the number of header APE_HEADER bytes
	            seekTableBytes: Token.UINT32_LE.get(buf, off + 16),
	            // the number of header data bytes (from original file)
	            headerDataBytes: Token.UINT32_LE.get(buf, off + 20),
	            // the number of bytes of APE frame data
	            apeFrameDataBytes: Token.UINT32_LE.get(buf, off + 24),
	            // the high order number of APE frame data bytes
	            apeFrameDataBytesHigh: Token.UINT32_LE.get(buf, off + 28),
	            // the terminating data of the file (not including tag data)
	            terminatingDataBytes: Token.UINT32_LE.get(buf, off + 32),
	            // the MD5 hash of the file (see notes for usage... it's a little tricky)
	            fileMD5: new Token.Uint8ArrayType(16).get(buf, off + 36)
	        };
	    }
	};
	/**
	 * APE_HEADER: describes all of the necessary information about the APE file
	 */
	exports.Header = {
	    len: 24,
	    get: (buf, off) => {
	        return {
	            // the compression level (see defines I.E. COMPRESSION_LEVEL_FAST)
	            compressionLevel: Token.UINT16_LE.get(buf, off),
	            // any format flags (for future use)
	            formatFlags: Token.UINT16_LE.get(buf, off + 2),
	            // the number of audio blocks in one frame
	            blocksPerFrame: Token.UINT32_LE.get(buf, off + 4),
	            // the number of audio blocks in the final frame
	            finalFrameBlocks: Token.UINT32_LE.get(buf, off + 8),
	            // the total number of frames
	            totalFrames: Token.UINT32_LE.get(buf, off + 12),
	            // the bits per sample (typically 16)
	            bitsPerSample: Token.UINT16_LE.get(buf, off + 16),
	            // the number of channels (1 or 2)
	            channel: Token.UINT16_LE.get(buf, off + 18),
	            // the sample rate (typically 44100)
	            sampleRate: Token.UINT32_LE.get(buf, off + 20)
	        };
	    }
	};
	/**
	 * APE Tag Header/Footer Version 2.0
	 * TAG: describes all the properties of the file [optional]
	 */
	exports.TagFooter = {
	    len: 32,
	    get: (buf, off) => {
	        return {
	            // should equal 'APETAGEX'
	            ID: new Token.StringType(8, 'ascii').get(buf, off),
	            // equals CURRENT_APE_TAG_VERSION
	            version: Token.UINT32_LE.get(buf, off + 8),
	            // the complete size of the tag, including this footer (excludes header)
	            size: Token.UINT32_LE.get(buf, off + 12),
	            // the number of fields in the tag
	            fields: Token.UINT32_LE.get(buf, off + 16),
	            // reserved for later use (must be zero),
	            flags: parseTagFlags(Token.UINT32_LE.get(buf, off + 20))
	        };
	    }
	};
	/**
	 * APE Tag v2.0 Item Header
	 */
	exports.TagItemHeader = {
	    len: 8,
	    get: (buf, off) => {
	        return {
	            // Length of assigned value in bytes
	            size: Token.UINT32_LE.get(buf, off),
	            // reserved for later use (must be zero),
	            flags: parseTagFlags(Token.UINT32_LE.get(buf, off + 4))
	        };
	    }
	};
	const TagField = footer => {
	    return new Token.Uint8ArrayType(footer.size - exports.TagFooter.len);
	};
	exports.TagField = TagField;
	function parseTagFlags(flags) {
	    return {
	        containsHeader: isBitSet(flags, 31),
	        containsFooter: isBitSet(flags, 30),
	        isHeader: isBitSet(flags, 31),
	        readOnly: isBitSet(flags, 0),
	        dataType: (flags & 6) >> 1
	    };
	}
	exports.parseTagFlags = parseTagFlags;
	/**
	 * @param num {number}
	 * @param bit 0 is least significant bit (LSB)
	 * @return {boolean} true if bit is 1; otherwise false
	 */
	function isBitSet(num, bit) {
	    return (num & 1 << bit) !== 0;
	}
	exports.isBitSet = isBitSet;
	
} (APEv2Token));

Object.defineProperty(APEv2Parser$1, "__esModule", { value: true });
APEv2Parser$1.APEv2Parser = void 0;
const debug_1$m = browserExports;
const strtok3$4 = core$1;
const token_types_1$2 = lib$1;
const util$9 = Util;
const BasicParser_1$b = BasicParser$1;
const APEv2Token_1 = APEv2Token;
const debug$m = (0, debug_1$m.default)('music-metadata:parser:APEv2');
const tagFormat$1 = 'APEv2';
const preamble = 'APETAGEX';
class APEv2Parser extends BasicParser_1$b.BasicParser {
    constructor() {
        super(...arguments);
        this.ape = {};
    }
    static tryParseApeHeader(metadata, tokenizer, options) {
        const apeParser = new APEv2Parser();
        apeParser.init(metadata, tokenizer, options);
        return apeParser.tryParseApeHeader();
    }
    /**
     * Calculate the media file duration
     * @param ah ApeHeader
     * @return {number} duration in seconds
     */
    static calculateDuration(ah) {
        let duration = ah.totalFrames > 1 ? ah.blocksPerFrame * (ah.totalFrames - 1) : 0;
        duration += ah.finalFrameBlocks;
        return duration / ah.sampleRate;
    }
    /**
     * Calculates the APEv1 / APEv2 first field offset
     * @param reader
     * @param offset
     */
    static async findApeFooterOffset(reader, offset) {
        // Search for APE footer header at the end of the file
        const apeBuf = Buffer.alloc(APEv2Token_1.TagFooter.len);
        await reader.randomRead(apeBuf, 0, APEv2Token_1.TagFooter.len, offset - APEv2Token_1.TagFooter.len);
        const tagFooter = APEv2Token_1.TagFooter.get(apeBuf, 0);
        if (tagFooter.ID === 'APETAGEX') {
            debug$m(`APE footer header at offset=${offset}`);
            return { footer: tagFooter, offset: offset - tagFooter.size };
        }
    }
    static parseTagFooter(metadata, buffer, options) {
        const footer = APEv2Token_1.TagFooter.get(buffer, buffer.length - APEv2Token_1.TagFooter.len);
        if (footer.ID !== preamble)
            throw new Error('Unexpected APEv2 Footer ID preamble value.');
        strtok3$4.fromBuffer(buffer);
        const apeParser = new APEv2Parser();
        apeParser.init(metadata, strtok3$4.fromBuffer(buffer), options);
        return apeParser.parseTags(footer);
    }
    /**
     * Parse APEv1 / APEv2 header if header signature found
     */
    async tryParseApeHeader() {
        if (this.tokenizer.fileInfo.size && this.tokenizer.fileInfo.size - this.tokenizer.position < APEv2Token_1.TagFooter.len) {
            debug$m(`No APEv2 header found, end-of-file reached`);
            return;
        }
        const footer = await this.tokenizer.peekToken(APEv2Token_1.TagFooter);
        if (footer.ID === preamble) {
            await this.tokenizer.ignore(APEv2Token_1.TagFooter.len);
            return this.parseTags(footer);
        }
        else {
            debug$m(`APEv2 header not found at offset=${this.tokenizer.position}`);
            if (this.tokenizer.fileInfo.size) {
                // Try to read the APEv2 header using just the footer-header
                const remaining = this.tokenizer.fileInfo.size - this.tokenizer.position; // ToDo: take ID3v1 into account
                const buffer = Buffer.alloc(remaining);
                await this.tokenizer.readBuffer(buffer);
                return APEv2Parser.parseTagFooter(this.metadata, buffer, this.options);
            }
        }
    }
    async parse() {
        const descriptor = await this.tokenizer.readToken(APEv2Token_1.DescriptorParser);
        if (descriptor.ID !== 'MAC ')
            throw new Error('Unexpected descriptor ID');
        this.ape.descriptor = descriptor;
        const lenExp = descriptor.descriptorBytes - APEv2Token_1.DescriptorParser.len;
        const header = await (lenExp > 0 ? this.parseDescriptorExpansion(lenExp) : this.parseHeader());
        await this.tokenizer.ignore(header.forwardBytes);
        return this.tryParseApeHeader();
    }
    async parseTags(footer) {
        const keyBuffer = Buffer.alloc(256); // maximum tag key length
        let bytesRemaining = footer.size - APEv2Token_1.TagFooter.len;
        debug$m(`Parse APE tags at offset=${this.tokenizer.position}, size=${bytesRemaining}`);
        for (let i = 0; i < footer.fields; i++) {
            if (bytesRemaining < APEv2Token_1.TagItemHeader.len) {
                this.metadata.addWarning(`APEv2 Tag-header: ${footer.fields - i} items remaining, but no more tag data to read.`);
                break;
            }
            // Only APEv2 tag has tag item headers
            const tagItemHeader = await this.tokenizer.readToken(APEv2Token_1.TagItemHeader);
            bytesRemaining -= APEv2Token_1.TagItemHeader.len + tagItemHeader.size;
            await this.tokenizer.peekBuffer(keyBuffer, { length: Math.min(keyBuffer.length, bytesRemaining) });
            let zero = util$9.findZero(keyBuffer, 0, keyBuffer.length);
            const key = await this.tokenizer.readToken(new token_types_1$2.StringType(zero, 'ascii'));
            await this.tokenizer.ignore(1);
            bytesRemaining -= key.length + 1;
            switch (tagItemHeader.flags.dataType) {
                case APEv2Token_1.DataType.text_utf8: { // utf-8 text-string
                    const value = await this.tokenizer.readToken(new token_types_1$2.StringType(tagItemHeader.size, 'utf8'));
                    const values = value.split(/\x00/g);
                    for (const val of values) {
                        this.metadata.addTag(tagFormat$1, key, val);
                    }
                    break;
                }
                case APEv2Token_1.DataType.binary: // binary (probably artwork)
                    if (this.options.skipCovers) {
                        await this.tokenizer.ignore(tagItemHeader.size);
                    }
                    else {
                        const picData = Buffer.alloc(tagItemHeader.size);
                        await this.tokenizer.readBuffer(picData);
                        zero = util$9.findZero(picData, 0, picData.length);
                        const description = picData.toString('utf8', 0, zero);
                        const data = Buffer.from(picData.slice(zero + 1));
                        this.metadata.addTag(tagFormat$1, key, {
                            description,
                            data
                        });
                    }
                    break;
                case APEv2Token_1.DataType.external_info:
                    debug$m(`Ignore external info ${key}`);
                    await this.tokenizer.ignore(tagItemHeader.size);
                    break;
                case APEv2Token_1.DataType.reserved:
                    debug$m(`Ignore external info ${key}`);
                    this.metadata.addWarning(`APEv2 header declares a reserved datatype for "${key}"`);
                    await this.tokenizer.ignore(tagItemHeader.size);
                    break;
            }
        }
    }
    async parseDescriptorExpansion(lenExp) {
        await this.tokenizer.ignore(lenExp);
        return this.parseHeader();
    }
    async parseHeader() {
        const header = await this.tokenizer.readToken(APEv2Token_1.Header);
        // ToDo before
        this.metadata.setFormat('lossless', true);
        this.metadata.setFormat('container', 'Monkey\'s Audio');
        this.metadata.setFormat('bitsPerSample', header.bitsPerSample);
        this.metadata.setFormat('sampleRate', header.sampleRate);
        this.metadata.setFormat('numberOfChannels', header.channel);
        this.metadata.setFormat('duration', APEv2Parser.calculateDuration(header));
        return {
            forwardBytes: this.ape.descriptor.seekTableBytes + this.ape.descriptor.headerDataBytes +
                this.ape.descriptor.apeFrameDataBytes + this.ape.descriptor.terminatingDataBytes
        };
    }
}
APEv2Parser$1.APEv2Parser = APEv2Parser;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hasID3v1Header = exports.ID3v1Parser = exports.Genres = void 0;
	const debug_1 = browserExports;
	const token_types_1 = lib$1;
	const util = Util;
	const BasicParser_1 = BasicParser$1;
	const APEv2Parser_1 = APEv2Parser$1;
	const debug = (0, debug_1.default)('music-metadata:parser:ID3v1');
	/**
	 * ID3v1 Genre mappings
	 * Ref: https://de.wikipedia.org/wiki/Liste_der_ID3v1-Genres
	 */
	exports.Genres = [
	    'Blues', 'Classic Rock', 'Country', 'Dance', 'Disco', 'Funk', 'Grunge', 'Hip-Hop',
	    'Jazz', 'Metal', 'New Age', 'Oldies', 'Other', 'Pop', 'R&B', 'Rap', 'Reggae', 'Rock',
	    'Techno', 'Industrial', 'Alternative', 'Ska', 'Death Metal', 'Pranks', 'Soundtrack',
	    'Euro-Techno', 'Ambient', 'Trip-Hop', 'Vocal', 'Jazz+Funk', 'Fusion', 'Trance',
	    'Classical', 'Instrumental', 'Acid', 'House', 'Game', 'Sound Clip', 'Gospel', 'Noise',
	    'Alt. Rock', 'Bass', 'Soul', 'Punk', 'Space', 'Meditative', 'Instrumental Pop',
	    'Instrumental Rock', 'Ethnic', 'Gothic', 'Darkwave', 'Techno-Industrial',
	    'Electronic', 'Pop-Folk', 'Eurodance', 'Dream', 'Southern Rock', 'Comedy', 'Cult',
	    'Gangsta Rap', 'Top 40', 'Christian Rap', 'Pop/Funk', 'Jungle', 'Native American',
	    'Cabaret', 'New Wave', 'Psychedelic', 'Rave', 'Showtunes', 'Trailer', 'Lo-Fi', 'Tribal',
	    'Acid Punk', 'Acid Jazz', 'Polka', 'Retro', 'Musical', 'Rock & Roll', 'Hard Rock',
	    'Folk', 'Folk/Rock', 'National Folk', 'Swing', 'Fast-Fusion', 'Bebob', 'Latin', 'Revival',
	    'Celtic', 'Bluegrass', 'Avantgarde', 'Gothic Rock', 'Progressive Rock', 'Psychedelic Rock',
	    'Symphonic Rock', 'Slow Rock', 'Big Band', 'Chorus', 'Easy Listening', 'Acoustic', 'Humour',
	    'Speech', 'Chanson', 'Opera', 'Chamber Music', 'Sonata', 'Symphony', 'Booty Bass', 'Primus',
	    'Porn Groove', 'Satire', 'Slow Jam', 'Club', 'Tango', 'Samba', 'Folklore',
	    'Ballad', 'Power Ballad', 'Rhythmic Soul', 'Freestyle', 'Duet', 'Punk Rock', 'Drum Solo',
	    'A Cappella', 'Euro-House', 'Dance Hall', 'Goa', 'Drum & Bass', 'Club-House',
	    'Hardcore', 'Terror', 'Indie', 'BritPop', 'Negerpunk', 'Polsk Punk', 'Beat',
	    'Christian Gangsta Rap', 'Heavy Metal', 'Black Metal', 'Crossover', 'Contemporary Christian',
	    'Christian Rock', 'Merengue', 'Salsa', 'Thrash Metal', 'Anime', 'JPop', 'Synthpop',
	    'Abstract', 'Art Rock', 'Baroque', 'Bhangra', 'Big Beat', 'Breakbeat', 'Chillout',
	    'Downtempo', 'Dub', 'EBM', 'Eclectic', 'Electro', 'Electroclash', 'Emo', 'Experimental',
	    'Garage', 'Global', 'IDM', 'Illbient', 'Industro-Goth', 'Jam Band', 'Krautrock',
	    'Leftfield', 'Lounge', 'Math Rock', 'New Romantic', 'Nu-Breakz', 'Post-Punk', 'Post-Rock',
	    'Psytrance', 'Shoegaze', 'Space Rock', 'Trop Rock', 'World Music', 'Neoclassical', 'Audiobook',
	    'Audio Theatre', 'Neue Deutsche Welle', 'Podcast', 'Indie Rock', 'G-Funk', 'Dubstep',
	    'Garage Rock', 'Psybient'
	];
	/**
	 * Spec: http://id3.org/ID3v1
	 * Wiki: https://en.wikipedia.org/wiki/ID3
	 */
	const Iid3v1Token = {
	    len: 128,
	    /**
	     * @param buf Buffer possibly holding the 128 bytes ID3v1.1 metadata header
	     * @param off Offset in buffer in bytes
	     * @returns ID3v1.1 header if first 3 bytes equals 'TAG', otherwise null is returned
	     */
	    get: (buf, off) => {
	        const header = new Id3v1StringType(3).get(buf, off);
	        return header === 'TAG' ? {
	            header,
	            title: new Id3v1StringType(30).get(buf, off + 3),
	            artist: new Id3v1StringType(30).get(buf, off + 33),
	            album: new Id3v1StringType(30).get(buf, off + 63),
	            year: new Id3v1StringType(4).get(buf, off + 93),
	            comment: new Id3v1StringType(28).get(buf, off + 97),
	            // ID3v1.1 separator for track
	            zeroByte: token_types_1.UINT8.get(buf, off + 127),
	            // track: ID3v1.1 field added by Michael Mutschler
	            track: token_types_1.UINT8.get(buf, off + 126),
	            genre: token_types_1.UINT8.get(buf, off + 127)
	        } : null;
	    }
	};
	class Id3v1StringType extends token_types_1.StringType {
	    constructor(len) {
	        super(len, 'binary');
	    }
	    get(buf, off) {
	        let value = super.get(buf, off);
	        value = util.trimRightNull(value);
	        value = value.trim();
	        return value.length > 0 ? value : undefined;
	    }
	}
	class ID3v1Parser extends BasicParser_1.BasicParser {
	    static getGenre(genreIndex) {
	        if (genreIndex < exports.Genres.length) {
	            return exports.Genres[genreIndex];
	        }
	        return undefined; // ToDO: generate warning
	    }
	    async parse() {
	        if (!this.tokenizer.fileInfo.size) {
	            debug('Skip checking for ID3v1 because the file-size is unknown');
	            return;
	        }
	        if (this.options.apeHeader) {
	            this.tokenizer.ignore(this.options.apeHeader.offset - this.tokenizer.position);
	            const apeParser = new APEv2Parser_1.APEv2Parser();
	            apeParser.init(this.metadata, this.tokenizer, this.options);
	            await apeParser.parseTags(this.options.apeHeader.footer);
	        }
	        const offset = this.tokenizer.fileInfo.size - Iid3v1Token.len;
	        if (this.tokenizer.position > offset) {
	            debug('Already consumed the last 128 bytes');
	            return;
	        }
	        const header = await this.tokenizer.readToken(Iid3v1Token, offset);
	        if (header) {
	            debug('ID3v1 header found at: pos=%s', this.tokenizer.fileInfo.size - Iid3v1Token.len);
	            for (const id of ['title', 'artist', 'album', 'comment', 'track', 'year']) {
	                if (header[id] && header[id] !== '')
	                    this.addTag(id, header[id]);
	            }
	            const genre = ID3v1Parser.getGenre(header.genre);
	            if (genre)
	                this.addTag('genre', genre);
	        }
	        else {
	            debug('ID3v1 header not found at: pos=%s', this.tokenizer.fileInfo.size - Iid3v1Token.len);
	        }
	    }
	    addTag(id, value) {
	        this.metadata.addTag('ID3v1', id, value);
	    }
	}
	exports.ID3v1Parser = ID3v1Parser;
	async function hasID3v1Header(reader) {
	    if (reader.fileSize >= 128) {
	        const tag = Buffer.alloc(3);
	        await reader.randomRead(tag, 0, tag.length, reader.fileSize - 128);
	        return tag.toString('binary') === 'TAG';
	    }
	    return false;
	}
	exports.hasID3v1Header = hasID3v1Header; 
} (ID3v1Parser));

Object.defineProperty(FrameParser$1, "__esModule", { value: true });
FrameParser$1.FrameParser = FrameParser$1.parseGenre = void 0;
const debug_1$l = browserExports;
const Token$r = lib$1;
const util$8 = Util;
const ID3v2Token_1$3 = ID3v2Token;
const ID3v1Parser_1$3 = ID3v1Parser;
const debug$l = (0, debug_1$l.default)('music-metadata:id3v2:frame-parser');
const defaultEnc = 'latin1'; // latin1 == iso-8859-1;
function parseGenre(origVal) {
    // match everything inside parentheses
    const genres = [];
    let code;
    let word = '';
    for (const c of origVal) {
        if (typeof code === 'string') {
            if (c === '(' && code === '') {
                word += '(';
                code = undefined;
            }
            else if (c === ')') {
                if (word !== '') {
                    genres.push(word);
                    word = '';
                }
                const genre = parseGenreCode(code);
                if (genre) {
                    genres.push(genre);
                }
                code = undefined;
            }
            else
                code += c;
        }
        else if (c === '(') {
            code = '';
        }
        else {
            word += c;
        }
    }
    if (word) {
        if (genres.length === 0 && word.match(/^\d*$/)) {
            word = ID3v1Parser_1$3.Genres[word];
        }
        genres.push(word);
    }
    return genres;
}
FrameParser$1.parseGenre = parseGenre;
function parseGenreCode(code) {
    if (code === 'RX')
        return 'Remix';
    if (code === 'CR')
        return 'Cover';
    if (code.match(/^\d*$/)) {
        return ID3v1Parser_1$3.Genres[code];
    }
}
class FrameParser {
    /**
     * Create id3v2 frame parser
     * @param major - Major version, e.g. (4) for  id3v2.4
     * @param warningCollector - Used to collect decode issue
     */
    constructor(major, warningCollector) {
        this.major = major;
        this.warningCollector = warningCollector;
    }
    readData(uint8Array, type, includeCovers) {
        if (uint8Array.length === 0) {
            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);
            return;
        }
        const { encoding, bom } = ID3v2Token_1$3.TextEncodingToken.get(uint8Array, 0);
        const length = uint8Array.length;
        let offset = 0;
        let output = []; // ToDo
        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);
        let fzero;
        const out = {};
        debug$l(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);
        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {
            case 'T*': // 4.2.1. Text information frames - details
            case 'IPLS': // v2.3: Involved people list
            case 'MVIN':
            case 'MVNM':
            case 'PCS':
            case 'PCST':
                let text;
                try {
                    text = util$8.decodeString(uint8Array.slice(1), encoding).replace(/\x00+$/, '');
                }
                catch (error) {
                    this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);
                }
                switch (type) {
                    case 'TMCL': // Musician credits list
                    case 'TIPL': // Involved people list
                    case 'IPLS': // Involved people list
                        output = this.splitValue(type, text);
                        output = FrameParser.functionList(output);
                        break;
                    case 'TRK':
                    case 'TRCK':
                    case 'TPOS':
                        output = text;
                        break;
                    case 'TCOM':
                    case 'TEXT':
                    case 'TOLY':
                    case 'TOPE':
                    case 'TPE1':
                    case 'TSRC':
                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /
                        output = this.splitValue(type, text);
                        break;
                    case 'TCO':
                    case 'TCON':
                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);
                        break;
                    case 'PCS':
                    case 'PCST':
                        // TODO: Why `default` not results `1` but `''`?
                        output = this.major >= 4 ? this.splitValue(type, text) : [text];
                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;
                        break;
                    default:
                        output = this.major >= 4 ? this.splitValue(type, text) : [text];
                }
                break;
            case 'TXXX':
                output = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);
                output = {
                    description: output.id,
                    text: this.splitValue(type, util$8.decodeString(output.data, encoding).replace(/\x00+$/, ''))
                };
                break;
            case 'PIC':
            case 'APIC':
                if (includeCovers) {
                    const pic = {};
                    offset += 1;
                    switch (this.major) {
                        case 2:
                            pic.format = util$8.decodeString(uint8Array.slice(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;
                            offset += 3;
                            break;
                        case 3:
                        case 4:
                            fzero = util$8.findZero(uint8Array, offset, length, defaultEnc);
                            pic.format = util$8.decodeString(uint8Array.slice(offset, fzero), defaultEnc);
                            offset = fzero + 1;
                            break;
                        default:
                            throw new Error('Warning: unexpected major versionIndex: ' + this.major);
                    }
                    pic.format = FrameParser.fixPictureMimeType(pic.format);
                    pic.type = ID3v2Token_1$3.AttachedPictureType[uint8Array[offset]];
                    offset += 1;
                    fzero = util$8.findZero(uint8Array, offset, length, encoding);
                    pic.description = util$8.decodeString(uint8Array.slice(offset, fzero), encoding);
                    offset = fzero + nullTerminatorLength;
                    pic.data = Buffer.from(uint8Array.slice(offset, length));
                    output = pic;
                }
                break;
            case 'CNT':
            case 'PCNT':
                output = Token$r.UINT32_BE.get(uint8Array, 0);
                break;
            case 'SYLT':
                // skip text encoding (1 byte),
                //      language (3 bytes),
                //      time stamp format (1 byte),
                //      content tagTypes (1 byte),
                //      content descriptor (1 byte)
                offset += 7;
                output = [];
                while (offset < length) {
                    const txt = uint8Array.slice(offset, offset = util$8.findZero(uint8Array, offset, length, encoding));
                    offset += 5; // push offset forward one +  4 byte timestamp
                    output.push(util$8.decodeString(txt, encoding));
                }
                break;
            case 'ULT':
            case 'USLT':
            case 'COM':
            case 'COMM':
                offset += 1;
                out.language = util$8.decodeString(uint8Array.slice(offset, offset + 3), defaultEnc);
                offset += 3;
                fzero = util$8.findZero(uint8Array, offset, length, encoding);
                out.description = util$8.decodeString(uint8Array.slice(offset, fzero), encoding);
                offset = fzero + nullTerminatorLength;
                out.text = util$8.decodeString(uint8Array.slice(offset, length), encoding).replace(/\x00+$/, '');
                output = [out];
                break;
            case 'UFID':
                output = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);
                output = { owner_identifier: output.id, identifier: output.data };
                break;
            case 'PRIV': // private frame
                output = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);
                output = { owner_identifier: output.id, data: output.data };
                break;
            case 'POPM': // Popularimeter
                fzero = util$8.findZero(uint8Array, offset, length, defaultEnc);
                const email = util$8.decodeString(uint8Array.slice(offset, fzero), defaultEnc);
                offset = fzero + 1;
                const dataLen = length - offset;
                output = {
                    email,
                    rating: Token$r.UINT8.get(uint8Array, offset),
                    counter: dataLen >= 5 ? Token$r.UINT32_BE.get(uint8Array, offset + 1) : undefined
                };
                break;
            case 'GEOB': { // General encapsulated object
                fzero = util$8.findZero(uint8Array, offset + 1, length, encoding);
                const mimeType = util$8.decodeString(uint8Array.slice(offset + 1, fzero), defaultEnc);
                offset = fzero + 1;
                fzero = util$8.findZero(uint8Array, offset, length - offset, encoding);
                const filename = util$8.decodeString(uint8Array.slice(offset, fzero), defaultEnc);
                offset = fzero + 1;
                fzero = util$8.findZero(uint8Array, offset, length - offset, encoding);
                const description = util$8.decodeString(uint8Array.slice(offset, fzero), defaultEnc);
                output = {
                    type: mimeType,
                    filename,
                    description,
                    data: uint8Array.slice(offset + 1, length)
                };
                break;
            }
            // W-Frames:
            case 'WCOM':
            case 'WCOP':
            case 'WOAF':
            case 'WOAR':
            case 'WOAS':
            case 'WORS':
            case 'WPAY':
            case 'WPUB':
                // Decode URL
                output = util$8.decodeString(uint8Array.slice(offset, fzero), defaultEnc);
                break;
            case 'WXXX': {
                // Decode URL
                fzero = util$8.findZero(uint8Array, offset + 1, length, encoding);
                const description = util$8.decodeString(uint8Array.slice(offset + 1, fzero), encoding);
                offset = fzero + (encoding === 'utf16le' ? 2 : 1);
                output = { description, url: util$8.decodeString(uint8Array.slice(offset, length), defaultEnc) };
                break;
            }
            case 'WFD':
            case 'WFED':
                output = util$8.decodeString(uint8Array.slice(offset + 1, util$8.findZero(uint8Array, offset + 1, length, encoding)), encoding);
                break;
            case 'MCDI': {
                // Music CD identifier
                output = uint8Array.slice(0, length);
                break;
            }
            default:
                debug$l('Warning: unsupported id3v2-tag-type: ' + type);
                break;
        }
        return output;
    }
    static fixPictureMimeType(pictureType) {
        pictureType = pictureType.toLocaleLowerCase();
        switch (pictureType) {
            case 'jpg':
                return 'image/jpeg';
            case 'png':
                return 'image/png';
        }
        return pictureType;
    }
    /**
     * Converts TMCL (Musician credits list) or TIPL (Involved people list)
     * @param entries
     */
    static functionList(entries) {
        const res = {};
        for (let i = 0; i + 1 < entries.length; i += 2) {
            const names = entries[i + 1].split(',');
            res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;
        }
        return res;
    }
    /**
     * id3v2.4 defines that multiple T* values are separated by 0x00
     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /
     * @param tag - Tag name
     * @param text - Concatenated tag value
     * @returns Split tag value
     */
    splitValue(tag, text) {
        let values;
        if (this.major < 4) {
            values = text.split(/\x00/g);
            if (values.length > 1) {
                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);
            }
            else {
                values = text.split(/\//g);
            }
        }
        else {
            values = text.split(/\x00/g);
        }
        return FrameParser.trimArray(values);
    }
    static trimArray(values) {
        return values.map(value => value.replace(/\x00+$/, '').trim());
    }
    static readIdentifierAndData(uint8Array, offset, length, encoding) {
        const fzero = util$8.findZero(uint8Array, offset, length, encoding);
        const id = util$8.decodeString(uint8Array.slice(offset, fzero), encoding);
        offset = fzero + FrameParser.getNullTerminatorLength(encoding);
        return { id, data: uint8Array.slice(offset, length) };
    }
    static getNullTerminatorLength(enc) {
        return enc === 'utf16le' ? 2 : 1;
    }
}
FrameParser$1.FrameParser = FrameParser;

Object.defineProperty(ID3v2Parser$1, "__esModule", { value: true });
ID3v2Parser$1.ID3v2Parser = void 0;
const Token$q = lib$1;
const util$7 = Util;
const FrameParser_1 = FrameParser$1;
const ID3v2Token_1$2 = ID3v2Token;
class ID3v2Parser {
    static removeUnsyncBytes(buffer) {
        let readI = 0;
        let writeI = 0;
        while (readI < buffer.length - 1) {
            if (readI !== writeI) {
                buffer[writeI] = buffer[readI];
            }
            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;
            writeI++;
        }
        if (readI < buffer.length) {
            buffer[writeI++] = buffer[readI];
        }
        return buffer.slice(0, writeI);
    }
    static getFrameHeaderLength(majorVer) {
        switch (majorVer) {
            case 2:
                return 6;
            case 3:
            case 4:
                return 10;
            default:
                throw new Error('header versionIndex is incorrect');
        }
    }
    static readFrameFlags(b) {
        return {
            status: {
                tag_alter_preservation: util$7.getBit(b, 0, 6),
                file_alter_preservation: util$7.getBit(b, 0, 5),
                read_only: util$7.getBit(b, 0, 4)
            },
            format: {
                grouping_identity: util$7.getBit(b, 1, 7),
                compression: util$7.getBit(b, 1, 3),
                encryption: util$7.getBit(b, 1, 2),
                unsynchronisation: util$7.getBit(b, 1, 1),
                data_length_indicator: util$7.getBit(b, 1, 0)
            }
        };
    }
    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {
        const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);
        switch (majorVer) {
            case 2:
                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);
            case 3:
            case 4:
                if (frameHeader.flags.format.unsynchronisation) {
                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);
                }
                if (frameHeader.flags.format.data_length_indicator) {
                    uint8Array = uint8Array.slice(4, uint8Array.length);
                }
                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);
            default:
                throw new Error('Unexpected majorVer: ' + majorVer);
        }
    }
    /**
     * Create a combined tag key, of tag & description
     * @param tag e.g.: COM
     * @param description e.g. iTunPGAP
     * @returns string e.g. COM:iTunPGAP
     */
    static makeDescriptionTagName(tag, description) {
        return tag + (description ? ':' + description : '');
    }
    async parse(metadata, tokenizer, options) {
        this.tokenizer = tokenizer;
        this.metadata = metadata;
        this.options = options;
        const id3Header = await this.tokenizer.readToken(ID3v2Token_1$2.ID3v2Header);
        if (id3Header.fileIdentifier !== 'ID3') {
            throw new Error('expected ID3-header file-identifier \'ID3\' was not found');
        }
        this.id3Header = id3Header;
        this.headerType = ('ID3v2.' + id3Header.version.major);
        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);
    }
    async parseExtendedHeader() {
        const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1$2.ExtendedHeader);
        const dataRemaining = extendedHeader.size - ID3v2Token_1$2.ExtendedHeader.len;
        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);
    }
    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {
        await this.tokenizer.ignore(dataRemaining);
        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);
    }
    async parseId3Data(dataLen) {
        const uint8Array = await this.tokenizer.readToken(new Token$q.Uint8ArrayType(dataLen));
        for (const tag of this.parseMetadata(uint8Array)) {
            if (tag.id === 'TXXX') {
                if (tag.value) {
                    for (const text of tag.value.text) {
                        this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);
                    }
                }
            }
            else if (tag.id === 'COM') {
                for (const value of tag.value) {
                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);
                }
            }
            else if (tag.id === 'COMM') {
                for (const value of tag.value) {
                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);
                }
            }
            else if (Array.isArray(tag.value)) {
                for (const value of tag.value) {
                    this.addTag(tag.id, value);
                }
            }
            else {
                this.addTag(tag.id, tag.value);
            }
        }
    }
    addTag(id, value) {
        this.metadata.addTag(this.headerType, id, value);
    }
    parseMetadata(data) {
        let offset = 0;
        const tags = [];
        while (true) {
            if (offset === data.length)
                break;
            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);
            if (offset + frameHeaderLength > data.length) {
                this.metadata.addWarning('Illegal ID3v2 tag length');
                break;
            }
            const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);
            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);
            const frameDataBytes = data.slice(offset, offset += frameHeader.length);
            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);
            if (values) {
                tags.push({ id: frameHeader.id, value: values });
            }
        }
        return tags;
    }
    readFrameHeader(uint8Array, majorVer) {
        let header;
        switch (majorVer) {
            case 2:
                header = {
                    id: Buffer.from(uint8Array.slice(0, 3)).toString('ascii'),
                    length: Token$q.UINT24_BE.get(uint8Array, 3)
                };
                if (!header.id.match(/[A-Z0-9]{3}/g)) {
                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);
                }
                break;
            case 3:
            case 4:
                header = {
                    id: Buffer.from(uint8Array.slice(0, 4)).toString('ascii'),
                    length: (majorVer === 4 ? ID3v2Token_1$2.UINT32SYNCSAFE : Token$q.UINT32_BE).get(uint8Array, 4),
                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))
                };
                if (!header.id.match(/[A-Z0-9]{4}/g)) {
                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);
                }
                break;
            default:
                throw new Error('Unexpected majorVer: ' + majorVer);
        }
        return header;
    }
}
ID3v2Parser$1.ID3v2Parser = ID3v2Parser;

var AiffToken$1 = {};

Object.defineProperty(AiffToken$1, "__esModule", { value: true });
AiffToken$1.Common = void 0;
const Token$p = lib$1;
const FourCC_1$a = FourCC;
class Common {
    constructor(header, isAifc) {
        this.isAifc = isAifc;
        const minimumChunkSize = isAifc ? 22 : 18;
        if (header.chunkSize < minimumChunkSize)
            throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);
        this.len = header.chunkSize;
    }
    get(buf, off) {
        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value
        const shift = buf.readUInt16BE(off + 8) - 16398;
        const baseSampleRate = buf.readUInt16BE(off + 8 + 2);
        const res = {
            numChannels: buf.readUInt16BE(off),
            numSampleFrames: buf.readUInt32BE(off + 2),
            sampleSize: buf.readUInt16BE(off + 6),
            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift
        };
        if (this.isAifc) {
            res.compressionType = FourCC_1$a.FourCcToken.get(buf, off + 18);
            if (this.len > 22) {
                const strLen = buf.readInt8(off + 22);
                if (strLen > 0) {
                    const padding = (strLen + 1) % 2;
                    if (23 + strLen + padding === this.len) {
                        res.compressionName = new Token$p.StringType(strLen, 'binary').get(buf, off + 23);
                    }
                    else {
                        throw new Error('Illegal pstring length');
                    }
                }
                else {
                    res.compressionName = undefined;
                }
            }
        }
        else {
            res.compressionName = 'PCM';
        }
        return res;
    }
}
AiffToken$1.Common = Common;

var iff$1 = {};

Object.defineProperty(iff$1, "__esModule", { value: true });
iff$1.Header = void 0;
const Token$o = lib$1;
const FourCC_1$9 = FourCC;
/**
 * Common AIFF chunk header
 */
iff$1.Header = {
    len: 8,
    get: (buf, off) => {
        return {
            // Chunk type ID
            chunkID: FourCC_1$9.FourCcToken.get(buf, off),
            // Chunk size
            chunkSize: Number(BigInt(Token$o.UINT32_BE.get(buf, off + 4)))
        };
    }
};

Object.defineProperty(AiffParser, "__esModule", { value: true });
AiffParser.AIFFParser = void 0;
const Token$n = lib$1;
const debug_1$k = browserExports;
const strtok3$3 = core$1;
const ID3v2Parser_1$4 = ID3v2Parser$1;
const FourCC_1$8 = FourCC;
const BasicParser_1$a = BasicParser$1;
const AiffToken = AiffToken$1;
const iff = iff$1;
const debug$k = (0, debug_1$k.default)('music-metadata:parser:aiff');
const compressionTypes = {
    NONE: 'not compressed	PCM	Apple Computer',
    sowt: 'PCM (byte swapped)',
    fl32: '32-bit floating point IEEE 32-bit float',
    fl64: '64-bit floating point IEEE 64-bit float	Apple Computer',
    alaw: 'ALaw 2:1	8-bit ITU-T G.711 A-law',
    ulaw: 'µLaw 2:1	8-bit ITU-T G.711 µ-law	Apple Computer',
    ULAW: 'CCITT G.711 u-law 8-bit ITU-T G.711 µ-law',
    ALAW: 'CCITT G.711 A-law 8-bit ITU-T G.711 A-law',
    FL32: 'Float 32	IEEE 32-bit float '
};
/**
 * AIFF - Audio Interchange File Format
 *
 * Ref:
 * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html
 * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/Docs/AIFF-1.3.pdf
 */
class AIFFParser extends BasicParser_1$a.BasicParser {
    async parse() {
        const header = await this.tokenizer.readToken(iff.Header);
        if (header.chunkID !== 'FORM')
            throw new Error('Invalid Chunk-ID, expected \'FORM\''); // Not AIFF format
        const type = await this.tokenizer.readToken(FourCC_1$8.FourCcToken);
        switch (type) {
            case 'AIFF':
                this.metadata.setFormat('container', type);
                this.isCompressed = false;
                break;
            case 'AIFC':
                this.metadata.setFormat('container', 'AIFF-C');
                this.isCompressed = true;
                break;
            default:
                throw Error('Unsupported AIFF type: ' + type);
        }
        this.metadata.setFormat('lossless', !this.isCompressed);
        try {
            while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= iff.Header.len) {
                debug$k('Reading AIFF chunk at offset=' + this.tokenizer.position);
                const chunkHeader = await this.tokenizer.readToken(iff.Header);
                const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);
                const bytesRead = await this.readData(chunkHeader);
                await this.tokenizer.ignore(nextChunk - bytesRead);
            }
        }
        catch (err) {
            if (err instanceof strtok3$3.EndOfStreamError) {
                debug$k(`End-of-stream`);
            }
            else {
                throw err;
            }
        }
    }
    async readData(header) {
        var _a;
        switch (header.chunkID) {
            case 'COMM': // The Common Chunk
                const common = await this.tokenizer.readToken(new AiffToken.Common(header, this.isCompressed));
                this.metadata.setFormat('bitsPerSample', common.sampleSize);
                this.metadata.setFormat('sampleRate', common.sampleRate);
                this.metadata.setFormat('numberOfChannels', common.numChannels);
                this.metadata.setFormat('numberOfSamples', common.numSampleFrames);
                this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);
                this.metadata.setFormat('codec', (_a = common.compressionName) !== null && _a !== void 0 ? _a : compressionTypes[common.compressionType]);
                return header.chunkSize;
            case 'ID3 ': // ID3-meta-data
                const id3_data = await this.tokenizer.readToken(new Token$n.Uint8ArrayType(header.chunkSize));
                const rst = strtok3$3.fromBuffer(id3_data);
                await new ID3v2Parser_1$4.ID3v2Parser().parse(this.metadata, rst, this.options);
                return header.chunkSize;
            case 'SSND': // Sound Data Chunk
                if (this.metadata.format.duration) {
                    this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);
                }
                return 0;
            case 'NAME': // Sample name chunk
            case 'AUTH': // Author chunk
            case '(c) ': // Copyright chunk
            case 'ANNO': // Annotation chunk
                return this.readTextChunk(header);
            default:
                debug$k(`Ignore chunk id=${header.chunkID}, size=${header.chunkSize}`);
                return 0;
        }
    }
    async readTextChunk(header) {
        const value = await this.tokenizer.readToken(new Token$n.StringType(header.chunkSize, 'ascii'));
        value.split('\0').map(v => v.trim()).filter(v => v && v.length > 0).forEach(v => {
            this.metadata.addTag('AIFF', header.chunkID, v.trim());
        });
        return header.chunkSize;
    }
}
AiffParser.AIFFParser = AIFFParser;

var AsfParser$1 = {};

var GUID$1 = {};

Object.defineProperty(GUID$1, "__esModule", { value: true });
/**
 * Ref:
 * - https://tools.ietf.org/html/draft-fleischman-asf-01, Appendix A: ASF GUIDs
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 *
 * ASF File Structure:
 * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx
 *
 * ASF GUIDs:
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 * - https://github.com/dji-sdk/FFmpeg/blob/master/libavformat/asf.c
 */
class GUID {
    static fromBin(bin, offset = 0) {
        return new GUID(this.decode(bin, offset));
    }
    /**
     * Decode GUID in format like "B503BF5F-2EA9-CF11-8EE3-00C00C205365"
     * @param objectId Binary GUID
     * @param offset Read offset in bytes, default 0
     * @returns GUID as dashed hexadecimal representation
     */
    static decode(objectId, offset = 0) {
        const guid = objectId.readUInt32LE(offset).toString(16) + "-" +
            objectId.readUInt16LE(offset + 4).toString(16) + "-" +
            objectId.readUInt16LE(offset + 6).toString(16) + "-" +
            objectId.readUInt16BE(offset + 8).toString(16) + "-" +
            objectId.slice(offset + 10, offset + 16).toString('hex');
        return guid.toUpperCase();
    }
    /**
     * Decode stream type
     * @param mediaType Media type GUID
     * @returns Media type
     */
    static decodeMediaType(mediaType) {
        switch (mediaType.str) {
            case GUID.AudioMedia.str: return 'audio';
            case GUID.VideoMedia.str: return 'video';
            case GUID.CommandMedia.str: return 'command';
            case GUID.Degradable_JPEG_Media.str: return 'degradable-jpeg';
            case GUID.FileTransferMedia.str: return 'file-transfer';
            case GUID.BinaryMedia.str: return 'binary';
        }
    }
    /**
     * Encode GUID
     * @param guid GUID like: "B503BF5F-2EA9-CF11-8EE3-00C00C205365"
     * @returns Encoded Binary GUID
     */
    static encode(str) {
        const bin = Buffer.alloc(16);
        bin.writeUInt32LE(parseInt(str.slice(0, 8), 16), 0);
        bin.writeUInt16LE(parseInt(str.slice(9, 13), 16), 4);
        bin.writeUInt16LE(parseInt(str.slice(14, 18), 16), 6);
        Buffer.from(str.slice(19, 23), "hex").copy(bin, 8);
        Buffer.from(str.slice(24), "hex").copy(bin, 10);
        return bin;
    }
    constructor(str) {
        this.str = str;
    }
    equals(guid) {
        return this.str === guid.str;
    }
    toBin() {
        return GUID.encode(this.str);
    }
}
// 10.1 Top-level ASF object GUIDs
GUID.HeaderObject = new GUID("75B22630-668E-11CF-A6D9-00AA0062CE6C");
GUID.DataObject = new GUID("75B22636-668E-11CF-A6D9-00AA0062CE6C");
GUID.SimpleIndexObject = new GUID("33000890-E5B1-11CF-89F4-00A0C90349CB");
GUID.IndexObject = new GUID("D6E229D3-35DA-11D1-9034-00A0C90349BE");
GUID.MediaObjectIndexObject = new GUID("FEB103F8-12AD-4C64-840F-2A1D2F7AD48C");
GUID.TimecodeIndexObject = new GUID("3CB73FD0-0C4A-4803-953D-EDF7B6228F0C");
// 10.2 Header Object GUIDs
GUID.FilePropertiesObject = new GUID("8CABDCA1-A947-11CF-8EE4-00C00C205365");
GUID.StreamPropertiesObject = new GUID("B7DC0791-A9B7-11CF-8EE6-00C00C205365");
GUID.HeaderExtensionObject = new GUID("5FBF03B5-A92E-11CF-8EE3-00C00C205365");
GUID.CodecListObject = new GUID("86D15240-311D-11D0-A3A4-00A0C90348F6");
GUID.ScriptCommandObject = new GUID("1EFB1A30-0B62-11D0-A39B-00A0C90348F6");
GUID.MarkerObject = new GUID("F487CD01-A951-11CF-8EE6-00C00C205365");
GUID.BitrateMutualExclusionObject = new GUID("D6E229DC-35DA-11D1-9034-00A0C90349BE");
GUID.ErrorCorrectionObject = new GUID("75B22635-668E-11CF-A6D9-00AA0062CE6C");
GUID.ContentDescriptionObject = new GUID("75B22633-668E-11CF-A6D9-00AA0062CE6C");
GUID.ExtendedContentDescriptionObject = new GUID("D2D0A440-E307-11D2-97F0-00A0C95EA850");
GUID.ContentBrandingObject = new GUID("2211B3FA-BD23-11D2-B4B7-00A0C955FC6E");
GUID.StreamBitratePropertiesObject = new GUID("7BF875CE-468D-11D1-8D82-006097C9A2B2");
GUID.ContentEncryptionObject = new GUID("2211B3FB-BD23-11D2-B4B7-00A0C955FC6E");
GUID.ExtendedContentEncryptionObject = new GUID("298AE614-2622-4C17-B935-DAE07EE9289C");
GUID.DigitalSignatureObject = new GUID("2211B3FC-BD23-11D2-B4B7-00A0C955FC6E");
GUID.PaddingObject = new GUID("1806D474-CADF-4509-A4BA-9AABCB96AAE8");
// 10.3 Header Extension Object GUIDs
GUID.ExtendedStreamPropertiesObject = new GUID("14E6A5CB-C672-4332-8399-A96952065B5A");
GUID.AdvancedMutualExclusionObject = new GUID("A08649CF-4775-4670-8A16-6E35357566CD");
GUID.GroupMutualExclusionObject = new GUID("D1465A40-5A79-4338-B71B-E36B8FD6C249");
GUID.StreamPrioritizationObject = new GUID("D4FED15B-88D3-454F-81F0-ED5C45999E24");
GUID.BandwidthSharingObject = new GUID("A69609E6-517B-11D2-B6AF-00C04FD908E9");
GUID.LanguageListObject = new GUID("7C4346A9-EFE0-4BFC-B229-393EDE415C85");
GUID.MetadataObject = new GUID("C5F8CBEA-5BAF-4877-8467-AA8C44FA4CCA");
GUID.MetadataLibraryObject = new GUID("44231C94-9498-49D1-A141-1D134E457054");
GUID.IndexParametersObject = new GUID("D6E229DF-35DA-11D1-9034-00A0C90349BE");
GUID.MediaObjectIndexParametersObject = new GUID("6B203BAD-3F11-48E4-ACA8-D7613DE2CFA7");
GUID.TimecodeIndexParametersObject = new GUID("F55E496D-9797-4B5D-8C8B-604DFE9BFB24");
GUID.CompatibilityObject = new GUID("26F18B5D-4584-47EC-9F5F-0E651F0452C9");
GUID.AdvancedContentEncryptionObject = new GUID("43058533-6981-49E6-9B74-AD12CB86D58C");
// 10.4 Stream Properties Object Stream Type GUIDs
GUID.AudioMedia = new GUID("F8699E40-5B4D-11CF-A8FD-00805F5C442B");
GUID.VideoMedia = new GUID("BC19EFC0-5B4D-11CF-A8FD-00805F5C442B");
GUID.CommandMedia = new GUID("59DACFC0-59E6-11D0-A3AC-00A0C90348F6");
GUID.JFIF_Media = new GUID("B61BE100-5B4E-11CF-A8FD-00805F5C442B");
GUID.Degradable_JPEG_Media = new GUID("35907DE0-E415-11CF-A917-00805F5C442B");
GUID.FileTransferMedia = new GUID("91BD222C-F21C-497A-8B6D-5AA86BFC0185");
GUID.BinaryMedia = new GUID("3AFB65E2-47EF-40F2-AC2C-70A90D71D343");
GUID.ASF_Index_Placeholder_Object = new GUID("D9AADE20-7C17-4F9C-BC28-8555DD98E2A2");
GUID$1.default = GUID;

var AsfObject$1 = {};

var AsfUtil$1 = {};

Object.defineProperty(AsfUtil$1, "__esModule", { value: true });
AsfUtil$1.AsfUtil = void 0;
const Token$m = lib$1;
const util$6 = Util;
class AsfUtil {
    static getParserForAttr(i) {
        return AsfUtil.attributeParsers[i];
    }
    static parseUnicodeAttr(uint8Array) {
        return util$6.stripNulls(util$6.decodeString(uint8Array, 'utf16le'));
    }
    static parseByteArrayAttr(buf) {
        return Buffer.from(buf);
    }
    static parseBoolAttr(buf, offset = 0) {
        return AsfUtil.parseWordAttr(buf, offset) === 1;
    }
    static parseDWordAttr(buf, offset = 0) {
        return buf.readUInt32LE(offset);
    }
    static parseQWordAttr(buf, offset = 0) {
        return Token$m.UINT64_LE.get(buf, offset);
    }
    static parseWordAttr(buf, offset = 0) {
        return buf.readUInt16LE(offset);
    }
}
AsfUtil.attributeParsers = [
    AsfUtil.parseUnicodeAttr,
    AsfUtil.parseByteArrayAttr,
    AsfUtil.parseBoolAttr,
    AsfUtil.parseDWordAttr,
    AsfUtil.parseQWordAttr,
    AsfUtil.parseWordAttr,
    AsfUtil.parseByteArrayAttr
];
AsfUtil$1.AsfUtil = AsfUtil;

(function (exports) {
	// ASF Objects
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WmPictureToken = exports.MetadataLibraryObjectState = exports.MetadataObjectState = exports.ExtendedStreamPropertiesObjectState = exports.ExtendedContentDescriptionObjectState = exports.ContentDescriptionObjectState = exports.readCodecEntries = exports.HeaderExtensionObject = exports.StreamPropertiesObject = exports.FilePropertiesObject = exports.IgnoreObjectState = exports.State = exports.HeaderObjectToken = exports.TopLevelHeaderObjectToken = exports.DataType = void 0;
	const util = Util;
	const Token = lib$1;
	const GUID_1 = GUID$1;
	const AsfUtil_1 = AsfUtil$1;
	const ID3v2Token_1 = ID3v2Token;
	(function (DataType) {
	    /**
	     * Unicode string. The data consists of a sequence of Unicode characters.
	     */
	    DataType[DataType["UnicodeString"] = 0] = "UnicodeString";
	    /**
	     * BYTE array. The type of data is implementation-specific.
	     */
	    DataType[DataType["ByteArray"] = 1] = "ByteArray";
	    /**
	     * BOOL. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values.
	     */
	    DataType[DataType["Bool"] = 2] = "Bool";
	    /**
	     * DWORD. The data is 4 bytes long and should be interpreted as a 32-bit unsigned integer.
	     */
	    DataType[DataType["DWord"] = 3] = "DWord";
	    /**
	     * QWORD. The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer.
	     */
	    DataType[DataType["QWord"] = 4] = "QWord";
	    /**
	     * WORD. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer.
	     */
	    DataType[DataType["Word"] = 5] = "Word";
	})(exports.DataType || (exports.DataType = {}));
	/**
	 * Token for: 3. ASF top-level Header Object
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3
	 */
	exports.TopLevelHeaderObjectToken = {
	    len: 30,
	    get: (buf, off) => {
	        return {
	            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),
	            objectSize: Number(Token.UINT64_LE.get(buf, off + 16)),
	            numberOfHeaderObjects: Token.UINT32_LE.get(buf, off + 24)
	            // Reserved: 2 bytes
	        };
	    }
	};
	/**
	 * Token for: 3.1 Header Object (mandatory, one only)
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1
	 */
	exports.HeaderObjectToken = {
	    len: 24,
	    get: (buf, off) => {
	        return {
	            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),
	            objectSize: Number(Token.UINT64_LE.get(buf, off + 16))
	        };
	    }
	};
	class State {
	    constructor(header) {
	        this.len = Number(header.objectSize) - exports.HeaderObjectToken.len;
	    }
	    postProcessTag(tags, name, valueType, data) {
	        if (name === 'WM/Picture') {
	            tags.push({ id: name, value: WmPictureToken.fromBuffer(data) });
	        }
	        else {
	            const parseAttr = AsfUtil_1.AsfUtil.getParserForAttr(valueType);
	            if (!parseAttr) {
	                throw new Error('unexpected value headerType: ' + valueType);
	            }
	            tags.push({ id: name, value: parseAttr(data) });
	        }
	    }
	}
	exports.State = State;
	// ToDo: use ignore type
	class IgnoreObjectState extends State {
	    constructor(header) {
	        super(header);
	    }
	    get(buf, off) {
	        return null;
	    }
	}
	exports.IgnoreObjectState = IgnoreObjectState;
	/**
	 * Token for: 3.2: File Properties Object (mandatory, one only)
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2
	 */
	class FilePropertiesObject extends State {
	    constructor(header) {
	        super(header);
	    }
	    get(buf, off) {
	        return {
	            fileId: GUID_1.default.fromBin(buf, off),
	            fileSize: Token.UINT64_LE.get(buf, off + 16),
	            creationDate: Token.UINT64_LE.get(buf, off + 24),
	            dataPacketsCount: Token.UINT64_LE.get(buf, off + 32),
	            playDuration: Token.UINT64_LE.get(buf, off + 40),
	            sendDuration: Token.UINT64_LE.get(buf, off + 48),
	            preroll: Token.UINT64_LE.get(buf, off + 56),
	            flags: {
	                broadcast: util.getBit(buf, off + 64, 24),
	                seekable: util.getBit(buf, off + 64, 25)
	            },
	            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),
	            minimumDataPacketSize: Token.UINT32_LE.get(buf, off + 68),
	            maximumDataPacketSize: Token.UINT32_LE.get(buf, off + 72),
	            maximumBitrate: Token.UINT32_LE.get(buf, off + 76)
	        };
	    }
	}
	FilePropertiesObject.guid = GUID_1.default.FilePropertiesObject;
	exports.FilePropertiesObject = FilePropertiesObject;
	/**
	 * Token for: 3.3 Stream Properties Object (mandatory, one per stream)
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3
	 */
	class StreamPropertiesObject extends State {
	    constructor(header) {
	        super(header);
	    }
	    get(buf, off) {
	        return {
	            streamType: GUID_1.default.decodeMediaType(GUID_1.default.fromBin(buf, off)),
	            errorCorrectionType: GUID_1.default.fromBin(buf, off + 8)
	            // ToDo
	        };
	    }
	}
	StreamPropertiesObject.guid = GUID_1.default.StreamPropertiesObject;
	exports.StreamPropertiesObject = StreamPropertiesObject;
	/**
	 * 3.4: Header Extension Object (mandatory, one only)
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4
	 */
	class HeaderExtensionObject {
	    constructor() {
	        this.len = 22;
	    }
	    get(buf, off) {
	        return {
	            reserved1: GUID_1.default.fromBin(buf, off),
	            reserved2: buf.readUInt16LE(off + 16),
	            extensionDataSize: buf.readUInt32LE(off + 18)
	        };
	    }
	}
	HeaderExtensionObject.guid = GUID_1.default.HeaderExtensionObject;
	exports.HeaderExtensionObject = HeaderExtensionObject;
	/**
	 * 3.5: The Codec List Object provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5
	 */
	const CodecListObjectHeader = {
	    len: 20,
	    get: (buf, off) => {
	        return {
	            entryCount: buf.readUInt16LE(off + 16)
	        };
	    }
	};
	async function readString(tokenizer) {
	    const length = await tokenizer.readNumber(Token.UINT16_LE);
	    return (await tokenizer.readToken(new Token.StringType(length * 2, 'utf16le'))).replace('\0', '');
	}
	/**
	 * 3.5: Read the Codec-List-Object, which provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5
	 */
	async function readCodecEntries(tokenizer) {
	    const codecHeader = await tokenizer.readToken(CodecListObjectHeader);
	    const entries = [];
	    for (let i = 0; i < codecHeader.entryCount; ++i) {
	        entries.push(await readCodecEntry(tokenizer));
	    }
	    return entries;
	}
	exports.readCodecEntries = readCodecEntries;
	async function readInformation(tokenizer) {
	    const length = await tokenizer.readNumber(Token.UINT16_LE);
	    const buf = Buffer.alloc(length);
	    await tokenizer.readBuffer(buf);
	    return buf;
	}
	/**
	 * Read Codec-Entries
	 * @param tokenizer
	 */
	async function readCodecEntry(tokenizer) {
	    const type = await tokenizer.readNumber(Token.UINT16_LE);
	    return {
	        type: {
	            videoCodec: (type & 0x0001) === 0x0001,
	            audioCodec: (type & 0x0002) === 0x0002
	        },
	        codecName: await readString(tokenizer),
	        description: await readString(tokenizer),
	        information: await readInformation(tokenizer)
	    };
	}
	/**
	 * 3.10 Content Description Object (optional, one only)
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10
	 */
	class ContentDescriptionObjectState extends State {
	    constructor(header) {
	        super(header);
	    }
	    get(buf, off) {
	        const tags = [];
	        let pos = off + 10;
	        for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {
	            const length = buf.readUInt16LE(off + i * 2);
	            if (length > 0) {
	                const tagName = ContentDescriptionObjectState.contentDescTags[i];
	                const end = pos + length;
	                tags.push({ id: tagName, value: AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, end)) });
	                pos = end;
	            }
	        }
	        return tags;
	    }
	}
	ContentDescriptionObjectState.guid = GUID_1.default.ContentDescriptionObject;
	ContentDescriptionObjectState.contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];
	exports.ContentDescriptionObjectState = ContentDescriptionObjectState;
	/**
	 * 3.11 Extended Content Description Object (optional, one only)
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11
	 */
	class ExtendedContentDescriptionObjectState extends State {
	    constructor(header) {
	        super(header);
	    }
	    get(buf, off) {
	        const tags = [];
	        const attrCount = buf.readUInt16LE(off);
	        let pos = off + 2;
	        for (let i = 0; i < attrCount; i += 1) {
	            const nameLen = buf.readUInt16LE(pos);
	            pos += 2;
	            const name = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));
	            pos += nameLen;
	            const valueType = buf.readUInt16LE(pos);
	            pos += 2;
	            const valueLen = buf.readUInt16LE(pos);
	            pos += 2;
	            const value = buf.slice(pos, pos + valueLen);
	            pos += valueLen;
	            this.postProcessTag(tags, name, valueType, value);
	        }
	        return tags;
	    }
	}
	ExtendedContentDescriptionObjectState.guid = GUID_1.default.ExtendedContentDescriptionObject;
	exports.ExtendedContentDescriptionObjectState = ExtendedContentDescriptionObjectState;
	/**
	 * 4.1 Extended Stream Properties Object (optional, 1 per media stream)
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1
	 */
	class ExtendedStreamPropertiesObjectState extends State {
	    constructor(header) {
	        super(header);
	    }
	    get(buf, off) {
	        return {
	            startTime: Token.UINT64_LE.get(buf, off),
	            endTime: Token.UINT64_LE.get(buf, off + 8),
	            dataBitrate: buf.readInt32LE(off + 12),
	            bufferSize: buf.readInt32LE(off + 16),
	            initialBufferFullness: buf.readInt32LE(off + 20),
	            alternateDataBitrate: buf.readInt32LE(off + 24),
	            alternateBufferSize: buf.readInt32LE(off + 28),
	            alternateInitialBufferFullness: buf.readInt32LE(off + 32),
	            maximumObjectSize: buf.readInt32LE(off + 36),
	            flags: {
	                reliableFlag: util.getBit(buf, off + 40, 0),
	                seekableFlag: util.getBit(buf, off + 40, 1),
	                resendLiveCleanpointsFlag: util.getBit(buf, off + 40, 2)
	            },
	            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),
	            streamNumber: buf.readInt16LE(off + 42),
	            streamLanguageId: buf.readInt16LE(off + 44),
	            averageTimePerFrame: buf.readInt32LE(off + 52),
	            streamNameCount: buf.readInt32LE(off + 54),
	            payloadExtensionSystems: buf.readInt32LE(off + 56),
	            streamNames: [],
	            streamPropertiesObject: null
	        };
	    }
	}
	ExtendedStreamPropertiesObjectState.guid = GUID_1.default.ExtendedStreamPropertiesObject;
	exports.ExtendedStreamPropertiesObjectState = ExtendedStreamPropertiesObjectState;
	/**
	 * 4.7  Metadata Object (optional, 0 or 1)
	 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7
	 */
	class MetadataObjectState extends State {
	    constructor(header) {
	        super(header);
	    }
	    get(uint8Array, off) {
	        const tags = [];
	        const buf = Buffer.from(uint8Array);
	        const descriptionRecordsCount = buf.readUInt16LE(off);
	        let pos = off + 2;
	        for (let i = 0; i < descriptionRecordsCount; i += 1) {
	            pos += 4;
	            const nameLen = buf.readUInt16LE(pos);
	            pos += 2;
	            const dataType = buf.readUInt16LE(pos);
	            pos += 2;
	            const dataLen = buf.readUInt32LE(pos);
	            pos += 4;
	            const name = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));
	            pos += nameLen;
	            const data = buf.slice(pos, pos + dataLen);
	            pos += dataLen;
	            this.postProcessTag(tags, name, dataType, data);
	        }
	        return tags;
	    }
	}
	MetadataObjectState.guid = GUID_1.default.MetadataObject;
	exports.MetadataObjectState = MetadataObjectState;
	// 4.8	Metadata Library Object (optional, 0 or 1)
	class MetadataLibraryObjectState extends MetadataObjectState {
	    constructor(header) {
	        super(header);
	    }
	}
	MetadataLibraryObjectState.guid = GUID_1.default.MetadataLibraryObject;
	exports.MetadataLibraryObjectState = MetadataLibraryObjectState;
	/**
	 * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx
	 */
	class WmPictureToken {
	    static fromBase64(base64str) {
	        return this.fromBuffer(Buffer.from(base64str, 'base64'));
	    }
	    static fromBuffer(buffer) {
	        const pic = new WmPictureToken(buffer.length);
	        return pic.get(buffer, 0);
	    }
	    constructor(len) {
	        this.len = len;
	    }
	    get(buffer, offset) {
	        const typeId = buffer.readUInt8(offset++);
	        const size = buffer.readInt32LE(offset);
	        let index = 5;
	        while (buffer.readUInt16BE(index) !== 0) {
	            index += 2;
	        }
	        const format = buffer.slice(5, index).toString('utf16le');
	        while (buffer.readUInt16BE(index) !== 0) {
	            index += 2;
	        }
	        const description = buffer.slice(5, index).toString('utf16le');
	        return {
	            type: ID3v2Token_1.AttachedPictureType[typeId],
	            format,
	            description,
	            size,
	            data: buffer.slice(index + 4)
	        };
	    }
	}
	exports.WmPictureToken = WmPictureToken; 
} (AsfObject$1));

Object.defineProperty(AsfParser$1, "__esModule", { value: true });
AsfParser$1.AsfParser = void 0;
const debug_1$j = browserExports;
const type_1$1 = type;
const GUID_1 = GUID$1;
const AsfObject = AsfObject$1;
const BasicParser_1$9 = BasicParser$1;
const debug$j = (0, debug_1$j.default)('music-metadata:parser:ASF');
const headerType = 'asf';
/**
 * Windows Media Metadata Usage Guidelines
 * - Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx
 *
 * Ref:
 * - https://tools.ietf.org/html/draft-fleischman-asf-01
 * - https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html
 * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx
 */
class AsfParser extends BasicParser_1$9.BasicParser {
    async parse() {
        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);
        if (!header.objectId.equals(GUID_1.default.HeaderObject)) {
            throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);
        }
        try {
            await this.parseObjectHeader(header.numberOfHeaderObjects);
        }
        catch (err) {
            debug$j('Error while parsing ASF: %s', err);
        }
    }
    async parseObjectHeader(numberOfObjectHeaders) {
        let tags;
        do {
            // Parse common header of the ASF Object (3.1)
            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);
            // Parse data part of the ASF Object
            debug$j('header GUID=%s', header.objectId.str);
            switch (header.objectId.str) {
                case AsfObject.FilePropertiesObject.guid.str: // 3.2
                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));
                    this.metadata.setFormat('duration', Number(fpo.playDuration / BigInt(1000)) / 10000 - Number(fpo.preroll) / 1000);
                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);
                    break;
                case AsfObject.StreamPropertiesObject.guid.str: // 3.3
                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));
                    this.metadata.setFormat('container', 'ASF/' + spo.streamType);
                    break;
                case AsfObject.HeaderExtensionObject.guid.str: // 3.4
                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());
                    await this.parseExtensionObject(extHeader.extensionDataSize);
                    break;
                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10
                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));
                    this.addTags(tags);
                    break;
                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11
                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));
                    this.addTags(tags);
                    break;
                case GUID_1.default.CodecListObject.str:
                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);
                    codecs.forEach(codec => {
                        this.metadata.addStreamInfo({
                            type: codec.type.videoCodec ? type_1$1.TrackType.video : type_1$1.TrackType.audio,
                            codecName: codec.codecName
                        });
                    });
                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');
                    this.metadata.setFormat('codec', audioCodecs);
                    break;
                case GUID_1.default.StreamBitratePropertiesObject.str:
                    // ToDo?
                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);
                    break;
                case GUID_1.default.PaddingObject.str:
                    // ToDo: register bytes pad
                    debug$j('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);
                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);
                    break;
                default:
                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);
                    debug$j('Ignore ASF-Object-GUID: %s', header.objectId.str);
                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));
            }
        } while (--numberOfObjectHeaders);
        // done
    }
    addTags(tags) {
        tags.forEach(tag => {
            this.metadata.addTag(headerType, tag.id, tag.value);
        });
    }
    async parseExtensionObject(extensionSize) {
        do {
            // Parse common header of the ASF Object (3.1)
            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);
            const remaining = header.objectSize - AsfObject.HeaderObjectToken.len;
            // Parse data part of the ASF Object
            switch (header.objectId.str) {
                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1
                    // ToDo: extended stream header properties are ignored
                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));
                    break;
                case AsfObject.MetadataObjectState.guid.str: // 4.7
                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));
                    this.addTags(moTags);
                    break;
                case AsfObject.MetadataLibraryObjectState.guid.str: // 4.8
                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));
                    this.addTags(mlTags);
                    break;
                case GUID_1.default.PaddingObject.str:
                    // ToDo: register bytes pad
                    await this.tokenizer.ignore(remaining);
                    break;
                case GUID_1.default.CompatibilityObject.str:
                    this.tokenizer.ignore(remaining);
                    break;
                case GUID_1.default.ASF_Index_Placeholder_Object.str:
                    await this.tokenizer.ignore(remaining);
                    break;
                default:
                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);
                    // console.log("Ignore ASF-Object-GUID: %s", header.objectId.str);
                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));
                    break;
            }
            extensionSize -= header.objectSize;
        } while (extensionSize > 0);
    }
}
AsfParser$1.AsfParser = AsfParser;

var FlacParser$1 = {};

var Vorbis = {};

Object.defineProperty(Vorbis, "__esModule", { value: true });
Vorbis.IdentificationHeader = Vorbis.CommonHeader = Vorbis.VorbisPictureToken = void 0;
const Token$l = lib$1;
const ID3v2Token_1$1 = ID3v2Token;
/**
 * Parse the METADATA_BLOCK_PICTURE
 * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE
 * Ref: https://xiph.org/flac/format.html#metadata_block_picture
 * // ToDo: move to ID3 / APIC?
 */
class VorbisPictureToken {
    static fromBase64(base64str) {
        return this.fromBuffer(Buffer.from(base64str, 'base64'));
    }
    static fromBuffer(buffer) {
        const pic = new VorbisPictureToken(buffer.length);
        return pic.get(buffer, 0);
    }
    constructor(len) {
        this.len = len;
    }
    get(buffer, offset) {
        const type = ID3v2Token_1$1.AttachedPictureType[Token$l.UINT32_BE.get(buffer, offset)];
        const mimeLen = Token$l.UINT32_BE.get(buffer, offset += 4);
        const format = buffer.toString('utf-8', offset += 4, offset + mimeLen);
        const descLen = Token$l.UINT32_BE.get(buffer, offset += mimeLen);
        const description = buffer.toString('utf-8', offset += 4, offset + descLen);
        const width = Token$l.UINT32_BE.get(buffer, offset += descLen);
        const height = Token$l.UINT32_BE.get(buffer, offset += 4);
        const colour_depth = Token$l.UINT32_BE.get(buffer, offset += 4);
        const indexed_color = Token$l.UINT32_BE.get(buffer, offset += 4);
        const picDataLen = Token$l.UINT32_BE.get(buffer, offset += 4);
        const data = Buffer.from(buffer.slice(offset += 4, offset + picDataLen));
        return {
            type,
            format,
            description,
            width,
            height,
            colour_depth,
            indexed_color,
            data
        };
    }
}
Vorbis.VorbisPictureToken = VorbisPictureToken;
/**
 * Comment header decoder
 * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1
 */
Vorbis.CommonHeader = {
    len: 7,
    get: (buf, off) => {
        return {
            packetType: buf.readUInt8(off),
            vorbis: new Token$l.StringType(6, 'ascii').get(buf, off + 1)
        };
    }
};
/**
 * Identification header decoder
 * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2
 */
Vorbis.IdentificationHeader = {
    len: 23,
    get: (uint8Array, off) => {
        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset);
        return {
            version: dataView.getUint32(off + 0, true),
            channelMode: dataView.getUint8(off + 4),
            sampleRate: dataView.getUint32(off + 5, true),
            bitrateMax: dataView.getUint32(off + 9, true),
            bitrateNominal: dataView.getUint32(off + 13, true),
            bitrateMin: dataView.getUint32(off + 17, true)
        };
    }
};

var AbstractID3Parser$1 = {};

Object.defineProperty(AbstractID3Parser$1, "__esModule", { value: true });
AbstractID3Parser$1.AbstractID3Parser = void 0;
const core_1$2 = core$1;
const debug_1$i = browserExports;
const ID3v2Token_1 = ID3v2Token;
const ID3v2Parser_1$3 = ID3v2Parser$1;
const ID3v1Parser_1$2 = ID3v1Parser;
const BasicParser_1$8 = BasicParser$1;
const debug$i = (0, debug_1$i.default)('music-metadata:parser:ID3');
/**
 * Abstract parser which tries take ID3v2 and ID3v1 headers.
 */
class AbstractID3Parser extends BasicParser_1$8.BasicParser {
    constructor() {
        super(...arguments);
        this.id3parser = new ID3v2Parser_1$3.ID3v2Parser();
    }
    static async startsWithID3v2Header(tokenizer) {
        return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';
    }
    async parse() {
        try {
            await this.parseID3v2();
        }
        catch (err) {
            if (err instanceof core_1$2.EndOfStreamError) {
                debug$i(`End-of-stream`);
            }
            else {
                throw err;
            }
        }
    }
    finalize() {
        return;
    }
    async parseID3v2() {
        await this.tryReadId3v2Headers();
        debug$i('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);
        await this.postId3v2Parse();
        if (this.options.skipPostHeaders && this.metadata.hasAny()) {
            this.finalize();
        }
        else {
            const id3v1parser = new ID3v1Parser_1$2.ID3v1Parser();
            await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();
            this.finalize();
        }
    }
    async tryReadId3v2Headers() {
        const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);
        if (id3Header.fileIdentifier === 'ID3') {
            debug$i('Found ID3v2 header, pos=%s', this.tokenizer.position);
            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);
            return this.tryReadId3v2Headers();
        }
    }
}
AbstractID3Parser$1.AbstractID3Parser = AbstractID3Parser;

var VorbisParser$1 = {};

var VorbisDecoder$1 = {};

Object.defineProperty(VorbisDecoder$1, "__esModule", { value: true });
VorbisDecoder$1.VorbisDecoder = void 0;
const Token$k = lib$1;
class VorbisDecoder {
    constructor(data, offset) {
        this.data = data;
        this.offset = offset;
    }
    readInt32() {
        const value = Token$k.UINT32_LE.get(this.data, this.offset);
        this.offset += 4;
        return value;
    }
    readStringUtf8() {
        const len = this.readInt32();
        const value = Buffer.from(this.data).toString('utf-8', this.offset, this.offset + len);
        this.offset += len;
        return value;
    }
    parseUserComment() {
        const offset0 = this.offset;
        const v = this.readStringUtf8();
        const idx = v.indexOf('=');
        return {
            key: v.slice(0, idx).toUpperCase(),
            value: v.slice(idx + 1),
            len: this.offset - offset0
        };
    }
}
VorbisDecoder$1.VorbisDecoder = VorbisDecoder;

Object.defineProperty(VorbisParser$1, "__esModule", { value: true });
VorbisParser$1.VorbisParser = void 0;
const Token$j = lib$1;
const debug_1$h = browserExports;
const VorbisDecoder_1$1 = VorbisDecoder$1;
const Vorbis_1$1 = Vorbis;
const debug$h = (0, debug_1$h.default)('music-metadata:parser:ogg:vorbis1');
/**
 * Vorbis 1 Parser.
 * Used by OggParser
 */
class VorbisParser {
    constructor(metadata, options) {
        this.metadata = metadata;
        this.options = options;
        this.pageSegments = [];
    }
    /**
     * Vorbis 1 parser
     * @param header Ogg Page Header
     * @param pageData Page data
     */
    parsePage(header, pageData) {
        if (header.headerType.firstPage) {
            this.parseFirstPage(header, pageData);
        }
        else {
            if (header.headerType.continued) {
                if (this.pageSegments.length === 0) {
                    throw new Error("Cannot continue on previous page");
                }
                this.pageSegments.push(pageData);
            }
            if (header.headerType.lastPage || !header.headerType.continued) {
                // Flush page segments
                if (this.pageSegments.length > 0) {
                    const fullPage = Buffer.concat(this.pageSegments);
                    this.parseFullPage(fullPage);
                }
                // Reset page segments
                this.pageSegments = header.headerType.lastPage ? [] : [pageData];
            }
        }
        if (header.headerType.lastPage) {
            this.calculateDuration(header);
        }
    }
    flush() {
        this.parseFullPage(Buffer.concat(this.pageSegments));
    }
    parseUserComment(pageData, offset) {
        const decoder = new VorbisDecoder_1$1.VorbisDecoder(pageData, offset);
        const tag = decoder.parseUserComment();
        this.addTag(tag.key, tag.value);
        return tag.len;
    }
    addTag(id, value) {
        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {
            if (this.options.skipCovers) {
                debug$h(`Ignore picture`);
                return;
            }
            value = Vorbis_1$1.VorbisPictureToken.fromBase64(value);
            debug$h(`Push picture: id=${id}, format=${value.format}`);
        }
        else {
            debug$h(`Push tag: id=${id}, value=${value}`);
        }
        this.metadata.addTag('vorbis', id, value);
    }
    calculateDuration(header) {
        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {
            // Calculate duration
            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);
            this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);
        }
    }
    /**
     * Parse first Ogg/Vorbis page
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */
    parseFirstPage(header, pageData) {
        this.metadata.setFormat('codec', 'Vorbis I');
        debug$h("Parse first page");
        // Parse  Vorbis common header
        const commonHeader = Vorbis_1$1.CommonHeader.get(pageData, 0);
        if (commonHeader.vorbis !== 'vorbis')
            throw new Error('Metadata does not look like Vorbis');
        if (commonHeader.packetType === 1) {
            const idHeader = Vorbis_1$1.IdentificationHeader.get(pageData, Vorbis_1$1.CommonHeader.len);
            this.metadata.setFormat('sampleRate', idHeader.sampleRate);
            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);
            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);
            debug$h("sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s", idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);
        }
        else
            throw new Error('First Ogg page should be type 1: the identification header');
    }
    parseFullPage(pageData) {
        // New page
        const commonHeader = Vorbis_1$1.CommonHeader.get(pageData, 0);
        debug$h("Parse full page: type=%s, byteLength=%s", commonHeader.packetType, pageData.byteLength);
        switch (commonHeader.packetType) {
            case 3: //  type 3: comment header
                return this.parseUserCommentList(pageData, Vorbis_1$1.CommonHeader.len);
        }
    }
    /**
     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2
     */
    parseUserCommentList(pageData, offset) {
        const strLen = Token$j.UINT32_LE.get(pageData, offset);
        offset += 4;
        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);
        offset += strLen;
        let userCommentListLength = Token$j.UINT32_LE.get(pageData, offset);
        offset += 4;
        while (userCommentListLength-- > 0) {
            offset += this.parseUserComment(pageData, offset);
        }
    }
}
VorbisParser$1.VorbisParser = VorbisParser;

Object.defineProperty(FlacParser$1, "__esModule", { value: true });
FlacParser$1.FlacParser = void 0;
const token_types_1$1 = lib$1;
const debug_1$g = browserExports;
const util$5 = Util;
const Vorbis_1 = Vorbis;
const AbstractID3Parser_1$3 = AbstractID3Parser$1;
const FourCC_1$7 = FourCC;
const VorbisParser_1$3 = VorbisParser$1;
const VorbisDecoder_1 = VorbisDecoder$1;
const debug$g = (0, debug_1$g.default)('music-metadata:parser:FLAC');
/**
 * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:
 * ref: https://xiph.org/flac/format.html#metadata_block
 */
var BlockType;
(function (BlockType) {
    BlockType[BlockType["STREAMINFO"] = 0] = "STREAMINFO";
    BlockType[BlockType["PADDING"] = 1] = "PADDING";
    BlockType[BlockType["APPLICATION"] = 2] = "APPLICATION";
    BlockType[BlockType["SEEKTABLE"] = 3] = "SEEKTABLE";
    BlockType[BlockType["VORBIS_COMMENT"] = 4] = "VORBIS_COMMENT";
    BlockType[BlockType["CUESHEET"] = 5] = "CUESHEET";
    BlockType[BlockType["PICTURE"] = 6] = "PICTURE";
})(BlockType || (BlockType = {}));
class FlacParser extends AbstractID3Parser_1$3.AbstractID3Parser {
    constructor() {
        super(...arguments);
        this.padding = 0;
    }
    /**
     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).
     * @param {INativeMetadataCollector} metadata Output
     * @param {ITokenizer} tokenizer Input
     * @param {IOptions} options Parsing options
     */
    init(metadata, tokenizer, options) {
        super.init(metadata, tokenizer, options);
        this.vorbisParser = new VorbisParser_1$3.VorbisParser(metadata, options);
        return this;
    }
    async postId3v2Parse() {
        const fourCC = await this.tokenizer.readToken(FourCC_1$7.FourCcToken);
        if (fourCC.toString() !== 'fLaC') {
            throw new Error('Invalid FLAC preamble');
        }
        let blockHeader;
        do {
            // Read block header
            blockHeader = await this.tokenizer.readToken(Metadata.BlockHeader);
            // Parse block data
            await this.parseDataBlock(blockHeader);
        } while (!blockHeader.lastBlock);
        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {
            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;
            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);
        }
    }
    parseDataBlock(blockHeader) {
        debug$g(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);
        switch (blockHeader.type) {
            case BlockType.STREAMINFO:
                return this.parseBlockStreamInfo(blockHeader.length);
            case BlockType.PADDING:
                this.padding += blockHeader.length;
                break;
            case BlockType.APPLICATION:
                break;
            case BlockType.SEEKTABLE:
                break;
            case BlockType.VORBIS_COMMENT:
                return this.parseComment(blockHeader.length);
            case BlockType.CUESHEET:
                break;
            case BlockType.PICTURE:
                return this.parsePicture(blockHeader.length).then();
            default:
                this.metadata.addWarning('Unknown block type: ' + blockHeader.type);
        }
        // Ignore data block
        return this.tokenizer.ignore(blockHeader.length).then();
    }
    /**
     * Parse STREAMINFO
     */
    async parseBlockStreamInfo(dataLen) {
        if (dataLen !== Metadata.BlockStreamInfo.len)
            throw new Error('Unexpected block-stream-info length');
        const streamInfo = await this.tokenizer.readToken(Metadata.BlockStreamInfo);
        this.metadata.setFormat('container', 'FLAC');
        this.metadata.setFormat('codec', 'FLAC');
        this.metadata.setFormat('lossless', true);
        this.metadata.setFormat('numberOfChannels', streamInfo.channels);
        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);
        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);
        if (streamInfo.totalSamples > 0) {
            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);
        }
    }
    /**
     * Parse VORBIS_COMMENT
     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3
     */
    async parseComment(dataLen) {
        const data = await this.tokenizer.readToken(new token_types_1$1.Uint8ArrayType(dataLen));
        const decoder = new VorbisDecoder_1.VorbisDecoder(data, 0);
        decoder.readStringUtf8(); // vendor (skip)
        const commentListLength = decoder.readInt32();
        for (let i = 0; i < commentListLength; i++) {
            const tag = decoder.parseUserComment();
            this.vorbisParser.addTag(tag.key, tag.value);
        }
    }
    async parsePicture(dataLen) {
        if (this.options.skipCovers) {
            return this.tokenizer.ignore(dataLen);
        }
        else {
            const picture = await this.tokenizer.readToken(new Vorbis_1.VorbisPictureToken(dataLen));
            this.vorbisParser.addTag('METADATA_BLOCK_PICTURE', picture);
        }
    }
}
FlacParser$1.FlacParser = FlacParser;
class Metadata {
}
Metadata.BlockHeader = {
    len: 4,
    get: (buf, off) => {
        return {
            lastBlock: util$5.getBit(buf, off, 7),
            type: util$5.getBitAllignedNumber(buf, off, 1, 7),
            length: token_types_1$1.UINT24_BE.get(buf, off + 1)
        };
    }
};
/**
 * METADATA_BLOCK_DATA
 * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo
 */
Metadata.BlockStreamInfo = {
    len: 34,
    get: (buf, off) => {
        return {
            // The minimum block size (in samples) used in the stream.
            minimumBlockSize: token_types_1$1.UINT16_BE.get(buf, off),
            // The maximum block size (in samples) used in the stream.
            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.
            maximumBlockSize: token_types_1$1.UINT16_BE.get(buf, off + 2) / 1000,
            // The minimum frame size (in bytes) used in the stream.
            // May be 0 to imply the value is not known.
            minimumFrameSize: token_types_1$1.UINT24_BE.get(buf, off + 4),
            // The maximum frame size (in bytes) used in the stream.
            // May be 0 to imply the value is not known.
            maximumFrameSize: token_types_1$1.UINT24_BE.get(buf, off + 7),
            // Sample rate in Hz. Though 20 bits are available,
            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.
            // Also, a value of 0 is invalid.
            sampleRate: token_types_1$1.UINT24_BE.get(buf, off + 10) >> 4,
            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),
            // (number of channels)-1. FLAC supports from 1 to 8 channels
            channels: util$5.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,
            // bits per sample)-1.
            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.
            bitsPerSample: util$5.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,
            // Total samples in stream.
            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.
            // A value of zero here means the number of total samples is unknown.
            totalSamples: util$5.getBitAllignedNumber(buf, off + 13, 4, 36),
            // the MD5 hash of the file (see notes for usage... it's a littly tricky)
            fileMD5: new token_types_1$1.Uint8ArrayType(16).get(buf, off + 18)
        };
    }
};

var MP4Parser$1 = {};

var Atom$1 = {};

var AtomToken$2 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ChapterText = exports.StcoAtom = exports.StszAtom = exports.StscAtom = exports.SampleToChunkToken = exports.SttsAtom = exports.TimeToSampleToken = exports.SoundSampleDescriptionV0 = exports.SoundSampleDescriptionVersion = exports.StsdAtom = exports.TrackHeaderAtom = exports.NameAtom = exports.DataAtom = exports.MvhdAtom = exports.MdhdAtom = exports.FixedLengthAtom = exports.mhdr = exports.tkhd = exports.ftyp = exports.ExtendedSize = exports.Header = void 0;
	const Token = lib$1;
	const debug_1 = browserExports;
	const FourCC_1 = FourCC;
	const debug = (0, debug_1.default)('music-metadata:parser:MP4:atom');
	exports.Header = {
	    len: 8,
	    get: (buf, off) => {
	        const length = Token.UINT32_BE.get(buf, off);
	        if (length < 0)
	            throw new Error('Invalid atom header length');
	        return {
	            length: BigInt(length),
	            name: new Token.StringType(4, 'binary').get(buf, off + 4)
	        };
	    },
	    put: (buf, off, hdr) => {
	        Token.UINT32_BE.put(buf, off, Number(hdr.length));
	        return FourCC_1.FourCcToken.put(buf, off + 4, hdr.name);
	    }
	};
	/**
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190
	 */
	exports.ExtendedSize = Token.UINT64_BE;
	exports.ftyp = {
	    len: 4,
	    get: (buf, off) => {
	        return {
	            type: new Token.StringType(4, 'ascii').get(buf, off)
	        };
	    }
	};
	exports.tkhd = {
	    len: 4,
	    get: (buf, off) => {
	        return {
	            type: new Token.StringType(4, 'ascii').get(buf, off)
	        };
	    }
	};
	/**
	 * Token: Movie Header Atom
	 */
	exports.mhdr = {
	    len: 8,
	    get: (buf, off) => {
	        return {
	            version: Token.UINT8.get(buf, off),
	            flags: Token.UINT24_BE.get(buf, off + 1),
	            nextItemID: Token.UINT32_BE.get(buf, off + 4)
	        };
	    }
	};
	/**
	 * Base class for 'fixed' length atoms.
	 * In some cases these atoms are longer then the sum of the described fields.
	 * Issue: https://github.com/Borewit/music-metadata/issues/120
	 */
	class FixedLengthAtom {
	    /**
	     *
	     * @param {number} len Length as specified in the size field
	     * @param {number} expLen Total length of sum of specified fields in the standard
	     */
	    constructor(len, expLen, atomId) {
	        this.len = len;
	        if (len < expLen) {
	            throw new Error(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);
	        }
	        else if (len > expLen) {
	            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);
	        }
	    }
	}
	exports.FixedLengthAtom = FixedLengthAtom;
	/**
	 * Timestamp stored in seconds since Mac Epoch (1 January 1904)
	 */
	const SecondsSinceMacEpoch = {
	    len: 4,
	    get: (buf, off) => {
	        const secondsSinceUnixEpoch = Token.UINT32_BE.get(buf, off) - 2082844800;
	        return new Date(secondsSinceUnixEpoch * 1000);
	    }
	};
	/**
	 * Token: Media Header Atom
	 * Ref:
	 * - https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34
	 * - https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd
	 */
	class MdhdAtom extends FixedLengthAtom {
	    constructor(len) {
	        super(len, 24, 'mdhd');
	        this.len = len;
	    }
	    get(buf, off) {
	        return {
	            version: Token.UINT8.get(buf, off + 0),
	            flags: Token.UINT24_BE.get(buf, off + 1),
	            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),
	            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),
	            timeScale: Token.UINT32_BE.get(buf, off + 12),
	            duration: Token.UINT32_BE.get(buf, off + 16),
	            language: Token.UINT16_BE.get(buf, off + 20),
	            quality: Token.UINT16_BE.get(buf, off + 22)
	        };
	    }
	}
	exports.MdhdAtom = MdhdAtom;
	/**
	 * Token: Movie Header Atom
	 */
	class MvhdAtom extends FixedLengthAtom {
	    constructor(len) {
	        super(len, 100, 'mvhd');
	        this.len = len;
	    }
	    get(buf, off) {
	        return {
	            version: Token.UINT8.get(buf, off),
	            flags: Token.UINT24_BE.get(buf, off + 1),
	            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),
	            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),
	            timeScale: Token.UINT32_BE.get(buf, off + 12),
	            duration: Token.UINT32_BE.get(buf, off + 16),
	            preferredRate: Token.UINT32_BE.get(buf, off + 20),
	            preferredVolume: Token.UINT16_BE.get(buf, off + 24),
	            // ignore reserver: 10 bytes
	            // ignore matrix structure: 36 bytes
	            previewTime: Token.UINT32_BE.get(buf, off + 72),
	            previewDuration: Token.UINT32_BE.get(buf, off + 76),
	            posterTime: Token.UINT32_BE.get(buf, off + 80),
	            selectionTime: Token.UINT32_BE.get(buf, off + 84),
	            selectionDuration: Token.UINT32_BE.get(buf, off + 88),
	            currentTime: Token.UINT32_BE.get(buf, off + 92),
	            nextTrackID: Token.UINT32_BE.get(buf, off + 96)
	        };
	    }
	}
	exports.MvhdAtom = MvhdAtom;
	/**
	 * Data Atom Structure
	 */
	class DataAtom {
	    constructor(len) {
	        this.len = len;
	    }
	    get(buf, off) {
	        return {
	            type: {
	                set: Token.UINT8.get(buf, off + 0),
	                type: Token.UINT24_BE.get(buf, off + 1)
	            },
	            locale: Token.UINT24_BE.get(buf, off + 4),
	            value: Buffer.from(new Token.Uint8ArrayType(this.len - 8).get(buf, off + 8))
	        };
	    }
	}
	exports.DataAtom = DataAtom;
	/**
	 * Data Atom Structure
	 * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31
	 */
	class NameAtom {
	    constructor(len) {
	        this.len = len;
	    }
	    get(buf, off) {
	        return {
	            version: Token.UINT8.get(buf, off),
	            flags: Token.UINT24_BE.get(buf, off + 1),
	            name: new Token.StringType(this.len - 4, 'utf-8').get(buf, off + 4)
	        };
	    }
	}
	exports.NameAtom = NameAtom;
	/**
	 * Track Header Atoms structure
	 * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550
	 */
	class TrackHeaderAtom {
	    constructor(len) {
	        this.len = len;
	    }
	    get(buf, off) {
	        return {
	            version: Token.UINT8.get(buf, off),
	            flags: Token.UINT24_BE.get(buf, off + 1),
	            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),
	            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),
	            trackId: Token.UINT32_BE.get(buf, off + 12),
	            // reserved 4 bytes
	            duration: Token.UINT32_BE.get(buf, off + 20),
	            layer: Token.UINT16_BE.get(buf, off + 24),
	            alternateGroup: Token.UINT16_BE.get(buf, off + 26),
	            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point
	            // ToDo: add remaining fields
	        };
	    }
	}
	exports.TrackHeaderAtom = TrackHeaderAtom;
	/**
	 * Atom: Sample Description Atom ('stsd')
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691
	 */
	const stsdHeader = {
	    len: 8,
	    get: (buf, off) => {
	        return {
	            version: Token.UINT8.get(buf, off),
	            flags: Token.UINT24_BE.get(buf, off + 1),
	            numberOfEntries: Token.UINT32_BE.get(buf, off + 4)
	        };
	    }
	};
	/**
	 * Atom: Sample Description Atom ('stsd')
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691
	 */
	class SampleDescriptionTable {
	    constructor(len) {
	        this.len = len;
	    }
	    get(buf, off) {
	        return {
	            dataFormat: FourCC_1.FourCcToken.get(buf, off),
	            dataReferenceIndex: Token.UINT16_BE.get(buf, off + 10),
	            description: new Token.Uint8ArrayType(this.len - 12).get(buf, off + 12)
	        };
	    }
	}
	/**
	 * Atom: Sample-description Atom ('stsd')
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691
	 */
	class StsdAtom {
	    constructor(len) {
	        this.len = len;
	    }
	    get(buf, off) {
	        const header = stsdHeader.get(buf, off);
	        off += stsdHeader.len;
	        const table = [];
	        for (let n = 0; n < header.numberOfEntries; ++n) {
	            const size = Token.UINT32_BE.get(buf, off); // Sample description size
	            off += Token.UINT32_BE.len;
	            table.push(new SampleDescriptionTable(size).get(buf, off));
	            off += size;
	        }
	        return {
	            header,
	            table
	        };
	    }
	}
	exports.StsdAtom = StsdAtom;
	/**
	 * Common Sound Sample Description (version & revision)
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317
	 */
	exports.SoundSampleDescriptionVersion = {
	    len: 8,
	    get(buf, off) {
	        return {
	            version: Token.INT16_BE.get(buf, off),
	            revision: Token.INT16_BE.get(buf, off + 2),
	            vendor: Token.INT32_BE.get(buf, off + 4)
	        };
	    }
	};
	/**
	 * Sound Sample Description (Version 0)
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736
	 */
	exports.SoundSampleDescriptionV0 = {
	    len: 12,
	    get(buf, off) {
	        return {
	            numAudioChannels: Token.INT16_BE.get(buf, off + 0),
	            sampleSize: Token.INT16_BE.get(buf, off + 2),
	            compressionId: Token.INT16_BE.get(buf, off + 4),
	            packetSize: Token.INT16_BE.get(buf, off + 6),
	            sampleRate: Token.UINT16_BE.get(buf, off + 8) + Token.UINT16_BE.get(buf, off + 10) / 10000
	        };
	    }
	};
	class SimpleTableAtom {
	    constructor(len, token) {
	        this.len = len;
	        this.token = token;
	    }
	    get(buf, off) {
	        const nrOfEntries = Token.INT32_BE.get(buf, off + 4);
	        return {
	            version: Token.INT8.get(buf, off + 0),
	            flags: Token.INT24_BE.get(buf, off + 1),
	            numberOfEntries: nrOfEntries,
	            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)
	        };
	    }
	}
	exports.TimeToSampleToken = {
	    len: 8,
	    get(buf, off) {
	        return {
	            count: Token.INT32_BE.get(buf, off + 0),
	            duration: Token.INT32_BE.get(buf, off + 4)
	        };
	    }
	};
	/**
	 * Time-to-sample('stts') atom.
	 * Store duration information for a media’s samples.
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696
	 */
	class SttsAtom extends SimpleTableAtom {
	    constructor(len) {
	        super(len, exports.TimeToSampleToken);
	        this.len = len;
	    }
	}
	exports.SttsAtom = SttsAtom;
	exports.SampleToChunkToken = {
	    len: 12,
	    get(buf, off) {
	        return {
	            firstChunk: Token.INT32_BE.get(buf, off),
	            samplesPerChunk: Token.INT32_BE.get(buf, off + 4),
	            sampleDescriptionId: Token.INT32_BE.get(buf, off + 8)
	        };
	    }
	};
	/**
	 * Sample-to-Chunk ('stsc') atom interface
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706
	 */
	class StscAtom extends SimpleTableAtom {
	    constructor(len) {
	        super(len, exports.SampleToChunkToken);
	        this.len = len;
	    }
	}
	exports.StscAtom = StscAtom;
	/**
	 * Sample-size ('stsz') atom
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710
	 */
	class StszAtom {
	    constructor(len) {
	        this.len = len;
	    }
	    get(buf, off) {
	        const nrOfEntries = Token.INT32_BE.get(buf, off + 8);
	        return {
	            version: Token.INT8.get(buf, off),
	            flags: Token.INT24_BE.get(buf, off + 1),
	            sampleSize: Token.INT32_BE.get(buf, off + 4),
	            numberOfEntries: nrOfEntries,
	            entries: readTokenTable(buf, Token.INT32_BE, off + 12, this.len - 12, nrOfEntries)
	        };
	    }
	}
	exports.StszAtom = StszAtom;
	/**
	 * Chunk offset atom, 'stco'
	 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715
	 */
	class StcoAtom extends SimpleTableAtom {
	    constructor(len) {
	        super(len, Token.INT32_BE);
	        this.len = len;
	    }
	}
	exports.StcoAtom = StcoAtom;
	/**
	 * Token used to decode text-track from 'mdat' atom (raw data stream)
	 */
	class ChapterText {
	    constructor(len) {
	        this.len = len;
	    }
	    get(buf, off) {
	        const titleLen = Token.INT16_BE.get(buf, off + 0);
	        const str = new Token.StringType(titleLen, 'utf-8');
	        return str.get(buf, off + 2);
	    }
	}
	exports.ChapterText = ChapterText;
	function readTokenTable(buf, token, off, remainingLen, numberOfEntries) {
	    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);
	    if (remainingLen === 0)
	        return [];
	    if (remainingLen !== numberOfEntries * token.len)
	        throw new Error('mismatch number-of-entries with remaining atom-length');
	    const entries = [];
	    // parse offset-table
	    for (let n = 0; n < numberOfEntries; ++n) {
	        entries.push(token.get(buf, off));
	        off += token.len;
	    }
	    return entries;
	} 
} (AtomToken$2));

Object.defineProperty(Atom$1, "__esModule", { value: true });
Atom$1.Atom = void 0;
const debug_1$f = browserExports;
const AtomToken$1 = AtomToken$2;
const debug$f = (0, debug_1$f.default)('music-metadata:parser:MP4:Atom');
class Atom {
    static async readAtom(tokenizer, dataHandler, parent, remaining) {
        // Parse atom header
        const offset = tokenizer.position;
        // debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')
        const header = await tokenizer.readToken(AtomToken$1.Header);
        const extended = header.length === BigInt(1);
        if (extended) {
            header.length = await tokenizer.readToken(AtomToken$1.ExtendedSize);
        }
        const atomBean = new Atom(header, header.length === BigInt(1), parent);
        const payloadLength = atomBean.getPayloadLength(remaining);
        debug$f(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')
        await atomBean.readData(tokenizer, dataHandler, payloadLength);
        return atomBean;
    }
    constructor(header, extended, parent) {
        this.header = header;
        this.extended = extended;
        this.parent = parent;
        this.children = [];
        this.atomPath = (this.parent ? this.parent.atomPath + '.' : '') + this.header.name;
    }
    getHeaderLength() {
        return this.extended ? 16 : 8;
    }
    getPayloadLength(remaining) {
        return (this.header.length === BigInt(0) ? remaining : Number(this.header.length)) - this.getHeaderLength();
    }
    async readAtoms(tokenizer, dataHandler, size) {
        while (size > 0) {
            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);
            this.children.push(atomBean);
            size -= atomBean.header.length === BigInt(0) ? size : Number(atomBean.header.length);
        }
    }
    async readData(tokenizer, dataHandler, remaining) {
        switch (this.header.name) {
            // "Container" atoms, contains nested atoms
            case 'moov': // The Movie Atom: contains other atoms
            case 'udta': // User defined atom
            case 'trak':
            case 'mdia': // Media atom
            case 'minf': // Media Information Atom
            case 'stbl': // The Sample Table Atom
            case '<id>':
            case 'ilst':
            case 'tref':
                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));
            case 'meta': // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8
                // meta has 4 bytes of padding, ignore
                const peekHeader = await tokenizer.peekToken(AtomToken$1.Header);
                const paddingLength = peekHeader.name === 'hdlr' ? 0 : 4;
                await tokenizer.ignore(paddingLength);
                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);
            case 'mdhd': // Media header atom
            case 'mvhd': // 'movie' => 'mvhd': movie header atom; child of Movie Atom
            case 'tkhd':
            case 'stsz':
            case 'mdat':
            default:
                return dataHandler(this, remaining);
        }
    }
}
Atom$1.Atom = Atom;

Object.defineProperty(MP4Parser$1, "__esModule", { value: true });
MP4Parser$1.MP4Parser = void 0;
const debug_1$e = browserExports;
const Token$i = lib$1;
const BasicParser_1$7 = BasicParser$1;
const ID3v1Parser_1$1 = ID3v1Parser;
const type_1 = type;
const Atom_1 = Atom$1;
const AtomToken = AtomToken$2;
const debug$e = (0, debug_1$e.default)('music-metadata:parser:MP4');
const tagFormat = 'iTunes';
const encoderDict = {
    raw: {
        lossy: false,
        format: 'raw'
    },
    MAC3: {
        lossy: true,
        format: 'MACE 3:1'
    },
    MAC6: {
        lossy: true,
        format: 'MACE 6:1'
    },
    ima4: {
        lossy: true,
        format: 'IMA 4:1'
    },
    ulaw: {
        lossy: true,
        format: 'uLaw 2:1'
    },
    alaw: {
        lossy: true,
        format: 'uLaw 2:1'
    },
    Qclp: {
        lossy: true,
        format: 'QUALCOMM PureVoice'
    },
    '.mp3': {
        lossy: true,
        format: 'MPEG-1 layer 3'
    },
    alac: {
        lossy: false,
        format: 'ALAC'
    },
    'ac-3': {
        lossy: true,
        format: 'AC-3'
    },
    mp4a: {
        lossy: true,
        format: 'MPEG-4/AAC'
    },
    mp4s: {
        lossy: true,
        format: 'MP4S'
    },
    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87
    c608: {
        lossy: true,
        format: 'CEA-608'
    },
    c708: {
        lossy: true,
        format: 'CEA-708'
    }
};
function distinct(value, index, self) {
    return self.indexOf(value) === index;
}
/*
 * Parser for the MP4 (MPEG-4 Part 14) container format
 * Standard: ISO/IEC 14496-14
 * supporting:
 * - QuickTime container
 * - MP4 File Format
 * - 3GPP file format
 * - 3GPP2 file format
 *
 * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.
 * Support for Apple iTunes tags as found in a M4A/M4V files.
 * Ref:
 *   https://en.wikipedia.org/wiki/ISO_base_media_file_format
 *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html
 *   http://atomicparsley.sourceforge.net/mpeg-4files.html
 *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata
 *   https://wiki.multimedia.cx/index.php/QuickTime_container
 */
class MP4Parser extends BasicParser_1$7.BasicParser {
    constructor() {
        super(...arguments);
        this.atomParsers = {
            /**
             * Parse movie header (mvhd) atom
             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313
             */
            mvhd: async (len) => {
                const mvhd = await this.tokenizer.readToken(new AtomToken.MvhdAtom(len));
                this.metadata.setFormat('creationTime', mvhd.creationTime);
                this.metadata.setFormat('modificationTime', mvhd.modificationTime);
            },
            /**
             * Parse media header (mdhd) atom
             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615
             */
            mdhd: async (len) => {
                const mdhd_data = await this.tokenizer.readToken(new AtomToken.MdhdAtom(len));
                // this.parse_mxhd(mdhd_data, this.currentTrack);
                const td = this.getTrackDescription();
                td.creationTime = mdhd_data.creationTime;
                td.modificationTime = mdhd_data.modificationTime;
                td.timeScale = mdhd_data.timeScale;
                td.duration = mdhd_data.duration;
            },
            chap: async (len) => {
                const td = this.getTrackDescription();
                const trackIds = [];
                while (len >= Token$i.UINT32_BE.len) {
                    trackIds.push(await this.tokenizer.readNumber(Token$i.UINT32_BE));
                    len -= Token$i.UINT32_BE.len;
                }
                td.chapterList = trackIds;
            },
            tkhd: async (len) => {
                const track = (await this.tokenizer.readToken(new AtomToken.TrackHeaderAtom(len)));
                this.tracks.push(track);
            },
            /**
             * Parse mdat atom.
             * Will scan for chapters
             */
            mdat: async (len) => {
                this.audioLengthInBytes = len;
                this.calculateBitRate();
                if (this.options.includeChapters) {
                    const trackWithChapters = this.tracks.filter(track => track.chapterList);
                    if (trackWithChapters.length === 1) {
                        const chapterTrackIds = trackWithChapters[0].chapterList;
                        const chapterTracks = this.tracks.filter(track => chapterTrackIds.indexOf(track.trackId) !== -1);
                        if (chapterTracks.length === 1) {
                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);
                        }
                    }
                }
                await this.tokenizer.ignore(len);
            },
            ftyp: async (len) => {
                const types = [];
                while (len > 0) {
                    const ftype = await this.tokenizer.readToken(AtomToken.ftyp);
                    len -= AtomToken.ftyp.len;
                    const value = ftype.type.replace(/\W/g, '');
                    if (value.length > 0) {
                        types.push(value); // unshift for backward compatibility
                    }
                }
                debug$e(`ftyp: ${types.join('/')}`);
                const x = types.filter(distinct).join('/');
                this.metadata.setFormat('container', x);
            },
            /**
             * Parse sample description atom
             */
            stsd: async (len) => {
                const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(len));
                const trackDescription = this.getTrackDescription();
                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));
            },
            /**
             * sample-to-Chunk Atoms
             */
            stsc: async (len) => {
                const stsc = await this.tokenizer.readToken(new AtomToken.StscAtom(len));
                this.getTrackDescription().sampleToChunkTable = stsc.entries;
            },
            /**
             * time-to-sample table
             */
            stts: async (len) => {
                const stts = await this.tokenizer.readToken(new AtomToken.SttsAtom(len));
                this.getTrackDescription().timeToSampleTable = stts.entries;
            },
            /**
             * Parse sample-sizes atom ('stsz')
             */
            stsz: async (len) => {
                const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(len));
                const td = this.getTrackDescription();
                td.sampleSize = stsz.sampleSize;
                td.sampleSizeTable = stsz.entries;
            },
            /**
             * Parse chunk-offset atom ('stco')
             */
            stco: async (len) => {
                const stco = await this.tokenizer.readToken(new AtomToken.StcoAtom(len));
                this.getTrackDescription().chunkOffsetTable = stco.entries; // remember chunk offsets
            },
            date: async (len) => {
                const date = await this.tokenizer.readToken(new Token$i.StringType(len, 'utf-8'));
                this.addTag('date', date);
            }
        };
    }
    static read_BE_Integer(array, signed) {
        const integerType = (signed ? 'INT' : 'UINT') + array.length * 8 + (array.length > 1 ? '_BE' : '');
        const token = Token$i[integerType];
        if (!token) {
            throw new Error('Token for integer type not found: "' + integerType + '"');
        }
        return Number(token.get(array, 0));
    }
    async parse() {
        this.tracks = [];
        let remainingFileSize = this.tokenizer.fileInfo.size;
        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {
            try {
                const token = await this.tokenizer.peekToken(AtomToken.Header);
                if (token.name === '\0\0\0\0') {
                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;
                    debug$e(errMsg);
                    this.addWarning(errMsg);
                    break;
                }
            }
            catch (error) {
                const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;
                debug$e(errMsg);
                this.addWarning(errMsg);
                break;
            }
            const rootAtom = await Atom_1.Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);
            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);
        }
        // Post process metadata
        const formatList = [];
        this.tracks.forEach(track => {
            const trackFormats = [];
            track.soundSampleDescription.forEach(ssd => {
                const streamInfo = {};
                const encoderInfo = encoderDict[ssd.dataFormat];
                if (encoderInfo) {
                    trackFormats.push(encoderInfo.format);
                    streamInfo.codecName = encoderInfo.format;
                }
                else {
                    streamInfo.codecName = `<${ssd.dataFormat}>`;
                }
                if (ssd.description) {
                    const { description } = ssd;
                    if (description.sampleRate > 0) {
                        streamInfo.type = type_1.TrackType.audio;
                        streamInfo.audio = {
                            samplingFrequency: description.sampleRate,
                            bitDepth: description.sampleSize,
                            channels: description.numAudioChannels
                        };
                    }
                }
                this.metadata.addStreamInfo(streamInfo);
            });
            if (trackFormats.length >= 1) {
                formatList.push(trackFormats.join('/'));
            }
        });
        if (formatList.length > 0) {
            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));
        }
        const audioTracks = this.tracks.filter(track => {
            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;
        });
        if (audioTracks.length >= 1) {
            const audioTrack = audioTracks[0];
            if (audioTrack.timeScale > 0) {
                const duration = audioTrack.duration / audioTrack.timeScale; // calculate duration in seconds
                this.metadata.setFormat('duration', duration);
            }
            const ssd = audioTrack.soundSampleDescription[0];
            if (ssd.description) {
                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);
                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);
                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);
                if (audioTrack.timeScale === 0 && audioTrack.timeToSampleTable.length > 0) {
                    const totalSampleSize = audioTrack.timeToSampleTable
                        .map(ttstEntry => ttstEntry.count * ttstEntry.duration)
                        .reduce((total, sampleSize) => total + sampleSize);
                    const duration = totalSampleSize / ssd.description.sampleRate;
                    this.metadata.setFormat('duration', duration);
                }
            }
            const encoderInfo = encoderDict[ssd.dataFormat];
            if (encoderInfo) {
                this.metadata.setFormat('lossless', !encoderInfo.lossy);
            }
            this.calculateBitRate();
        }
    }
    async handleAtom(atom, remaining) {
        if (atom.parent) {
            switch (atom.parent.header.name) {
                case 'ilst':
                case '<id>':
                    return this.parseMetadataItemData(atom);
            }
        }
        // const payloadLength = atom.getPayloadLength(remaining);
        if (this.atomParsers[atom.header.name]) {
            return this.atomParsers[atom.header.name](remaining);
        }
        else {
            debug$e(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);
            await this.tokenizer.ignore(remaining);
        }
    }
    getTrackDescription() {
        return this.tracks[this.tracks.length - 1];
    }
    calculateBitRate() {
        if (this.audioLengthInBytes && this.metadata.format.duration) {
            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);
        }
    }
    addTag(id, value) {
        this.metadata.addTag(tagFormat, id, value);
    }
    addWarning(message) {
        debug$e('Warning: ' + message);
        this.metadata.addWarning(message);
    }
    /**
     * Parse data of Meta-item-list-atom (item of 'ilst' atom)
     * @param metaAtom
     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8
     */
    parseMetadataItemData(metaAtom) {
        let tagKey = metaAtom.header.name;
        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {
            const payLoadLength = child.getPayloadLength(remaining);
            switch (child.header.name) {
                case 'data': // value atom
                    return this.parseValueAtom(tagKey, child);
                case 'name': // name atom (optional)
                case 'mean':
                case 'rate':
                    const name = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));
                    tagKey += ':' + name.name;
                    break;
                default:
                    const dataAtom = await this.tokenizer.readToken(new Token$i.BufferType(payLoadLength));
                    this.addWarning('Unsupported meta-item: ' + tagKey + '[' + child.header.name + '] => value=' + dataAtom.toString('hex') + ' ascii=' + dataAtom.toString('ascii'));
            }
        }, metaAtom.getPayloadLength(0));
    }
    async parseValueAtom(tagKey, metaAtom) {
        const dataAtom = await this.tokenizer.readToken(new AtomToken.DataAtom(Number(metaAtom.header.length) - AtomToken.Header.len));
        if (dataAtom.type.set !== 0) {
            throw new Error('Unsupported type-set != 0: ' + dataAtom.type.set);
        }
        // Use well-known-type table
        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35
        switch (dataAtom.type.type) {
            case 0: // reserved: Reserved for use where no type needs to be indicated
                switch (tagKey) {
                    case 'trkn':
                    case 'disk':
                        const num = Token$i.UINT8.get(dataAtom.value, 3);
                        const of = Token$i.UINT8.get(dataAtom.value, 5);
                        // console.log("  %s[data] = %s/%s", tagKey, num, of);
                        this.addTag(tagKey, num + '/' + of);
                        break;
                    case 'gnre':
                        const genreInt = Token$i.UINT8.get(dataAtom.value, 1);
                        const genreStr = ID3v1Parser_1$1.Genres[genreInt - 1];
                        // console.log("  %s[data] = %s", tagKey, genreStr);
                        this.addTag(tagKey, genreStr);
                        break;
                    case 'rate':
                        const rate = dataAtom.value.toString('ascii');
                        this.addTag(tagKey, rate);
                        break;
                    default:
                        debug$e('unknown proprietary value type for: ' + metaAtom.atomPath);
                }
                break;
            case 1: // UTF-8: Without any count or NULL terminator
            case 18: // Unknown: Found in m4b in combination with a '©gen' tag
                this.addTag(tagKey, dataAtom.value.toString('utf-8'));
                break;
            case 13: // JPEG
                if (this.options.skipCovers)
                    break;
                this.addTag(tagKey, {
                    format: 'image/jpeg',
                    data: Buffer.from(dataAtom.value)
                });
                break;
            case 14: // PNG
                if (this.options.skipCovers)
                    break;
                this.addTag(tagKey, {
                    format: 'image/png',
                    data: Buffer.from(dataAtom.value)
                });
                break;
            case 21: // BE Signed Integer
                this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));
                break;
            case 22: // BE Unsigned Integer
                this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));
                break;
            case 65: // An 8-bit signed integer
                this.addTag(tagKey, dataAtom.value.readInt8(0));
                break;
            case 66: // A big-endian 16-bit signed integer
                this.addTag(tagKey, dataAtom.value.readInt16BE(0));
                break;
            case 67: // A big-endian 32-bit signed integer
                this.addTag(tagKey, dataAtom.value.readInt32BE(0));
                break;
            default:
                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);
        }
    }
    /**
     * @param sampleDescription
     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916
     */
    parseSoundSampleDescription(sampleDescription) {
        const ssd = {
            dataFormat: sampleDescription.dataFormat,
            dataReferenceIndex: sampleDescription.dataReferenceIndex
        };
        let offset = 0;
        const version = AtomToken.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);
        offset += AtomToken.SoundSampleDescriptionVersion.len;
        if (version.version === 0 || version.version === 1) {
            // Sound Sample Description (Version 0)
            ssd.description = AtomToken.SoundSampleDescriptionV0.get(sampleDescription.description, offset);
        }
        else {
            debug$e(`Warning: sound-sample-description ${version} not implemented`);
        }
        return ssd;
    }
    async parseChapterTrack(chapterTrack, track, len) {
        if (!chapterTrack.sampleSize) {
            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)
                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');
        }
        const chapters = [];
        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {
            const chunkOffset = chapterTrack.chunkOffsetTable[i];
            const nextChunkLen = chunkOffset - this.tokenizer.position;
            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];
            len -= nextChunkLen + sampleSize;
            if (len < 0)
                throw new Error('Chapter chunk exceeding token length');
            await this.tokenizer.ignore(nextChunkLen);
            const title = await this.tokenizer.readToken(new AtomToken.ChapterText(sampleSize));
            debug$e(`Chapter ${i + 1}: ${title}`);
            const chapter = {
                title,
                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)
            };
            debug$e(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);
            chapters.push(chapter);
        }
        this.metadata.setFormat('chapters', chapters);
        await this.tokenizer.ignore(len);
    }
    findSampleOffset(track, chapterOffset) {
        let totalDuration = 0;
        track.timeToSampleTable.forEach(e => {
            totalDuration += e.count * e.duration;
        });
        debug$e(`Total duration=${totalDuration}`);
        let chunkIndex = 0;
        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {
            ++chunkIndex;
        }
        return this.getChunkDuration(chunkIndex + 1, track);
    }
    getChunkDuration(chunkId, track) {
        let ttsi = 0;
        let ttsc = track.timeToSampleTable[ttsi].count;
        let ttsd = track.timeToSampleTable[ttsi].duration;
        let curChunkId = 1;
        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);
        let totalDuration = 0;
        while (curChunkId < chunkId) {
            const nrOfSamples = Math.min(ttsc, samplesPerChunk);
            totalDuration += nrOfSamples * ttsd;
            ttsc -= nrOfSamples;
            samplesPerChunk -= nrOfSamples;
            if (samplesPerChunk === 0) {
                ++curChunkId;
                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);
            }
            else {
                ++ttsi;
                ttsc = track.timeToSampleTable[ttsi].count;
                ttsd = track.timeToSampleTable[ttsi].duration;
            }
        }
        return totalDuration;
    }
    getSamplesPerChunk(chunkId, stcTable) {
        for (let i = 0; i < stcTable.length - 1; ++i) {
            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {
                return stcTable[i].samplesPerChunk;
            }
        }
        return stcTable[stcTable.length - 1].samplesPerChunk;
    }
}
MP4Parser$1.MP4Parser = MP4Parser;

var MpegParser$1 = {};

var XingTag = {};

var ExtendedLameHeader = {};

var ReplayGainDataFormat = {};

Object.defineProperty(ReplayGainDataFormat, "__esModule", { value: true });
ReplayGainDataFormat.ReplayGain = void 0;
const common$2 = Util;
/**
 * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code
 */
var NameCode;
(function (NameCode) {
    /**
     * not set
     */
    NameCode[NameCode["not_set"] = 0] = "not_set";
    /**
     * Radio Gain Adjustment
     */
    NameCode[NameCode["radio"] = 1] = "radio";
    /**
     * Audiophile Gain Adjustment
     */
    NameCode[NameCode["audiophile"] = 2] = "audiophile";
})(NameCode || (NameCode = {}));
/**
 * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code
 */
var ReplayGainOriginator;
(function (ReplayGainOriginator) {
    /**
     * Replay Gain unspecified
     */
    ReplayGainOriginator[ReplayGainOriginator["unspecified"] = 0] = "unspecified";
    /**
     * Replay Gain pre-set by artist/producer/mastering engineer
     */
    ReplayGainOriginator[ReplayGainOriginator["engineer"] = 1] = "engineer";
    /**
     * Replay Gain set by user
     */
    ReplayGainOriginator[ReplayGainOriginator["user"] = 2] = "user";
    /**
     * Replay Gain determined automatically, as described on this site
     */
    ReplayGainOriginator[ReplayGainOriginator["automatic"] = 3] = "automatic";
    /**
     * Set by simple RMS average
     */
    ReplayGainOriginator[ReplayGainOriginator["rms_average"] = 4] = "rms_average";
})(ReplayGainOriginator || (ReplayGainOriginator = {}));
/**
 * Replay Gain Data Format
 *
 * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format
 */
ReplayGainDataFormat.ReplayGain = {
    len: 2,
    get: (buf, off) => {
        const gain_type = common$2.getBitAllignedNumber(buf, off, 0, 3);
        const sign = common$2.getBitAllignedNumber(buf, off, 6, 1);
        const gain_adj = common$2.getBitAllignedNumber(buf, off, 7, 9) / 10.0;
        if (gain_type > 0) {
            return {
                type: common$2.getBitAllignedNumber(buf, off, 0, 3),
                origin: common$2.getBitAllignedNumber(buf, off, 3, 3),
                adjustment: (sign ? -gain_adj : gain_adj)
            };
        }
        return undefined;
    }
};

/**
 * Extended Lame Header
 */
Object.defineProperty(ExtendedLameHeader, "__esModule", { value: true });
ExtendedLameHeader.ExtendedLameHeader = void 0;
const Token$h = lib$1;
const common$1 = Util;
const ReplayGainDataFormat_1 = ReplayGainDataFormat;
/**
 * Info Tag
 * @link http://gabriel.mp3-tech.org/mp3infotag.html
 * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112
 */
ExtendedLameHeader.ExtendedLameHeader = {
    len: 27,
    get: (buf, off) => {
        const track_peak = Token$h.UINT32_BE.get(buf, off + 2);
        return {
            revision: common$1.getBitAllignedNumber(buf, off, 0, 4),
            vbr_method: common$1.getBitAllignedNumber(buf, off, 4, 4),
            lowpass_filter: 100 * Token$h.UINT8.get(buf, off + 1),
            track_peak: track_peak === 0 ? undefined : track_peak / Math.pow(2, 23),
            track_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 6),
            album_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 8),
            music_length: Token$h.UINT32_BE.get(buf, off + 20),
            music_crc: Token$h.UINT8.get(buf, off + 24),
            header_crc: Token$h.UINT16_BE.get(buf, off + 24)
        };
    }
};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.readXingHeader = exports.XingHeaderFlags = exports.LameEncoderVersion = exports.InfoTagHeaderTag = void 0;
	const Token = lib$1;
	const util = Util;
	const ExtendedLameHeader_1 = ExtendedLameHeader;
	/**
	 * Info Tag: Xing, LAME
	 */
	exports.InfoTagHeaderTag = new Token.StringType(4, 'ascii');
	/**
	 * LAME TAG value
	 * Did not find any official documentation for this
	 * Value e.g.: "3.98.4"
	 */
	exports.LameEncoderVersion = new Token.StringType(6, 'ascii');
	/**
	 * Info Tag
	 * Ref: http://gabriel.mp3-tech.org/mp3infotag.html
	 */
	exports.XingHeaderFlags = {
	    len: 4,
	    get: (buf, off) => {
	        return {
	            frames: util.isBitSet(buf, off, 31),
	            bytes: util.isBitSet(buf, off, 30),
	            toc: util.isBitSet(buf, off, 29),
	            vbrScale: util.isBitSet(buf, off, 28)
	        };
	    }
	};
	// /**
	//  * XING Header Tag
	//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html
	//  */
	async function readXingHeader(tokenizer) {
	    const flags = await tokenizer.readToken(exports.XingHeaderFlags);
	    const xingInfoTag = {};
	    if (flags.frames) {
	        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);
	    }
	    if (flags.bytes) {
	        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);
	    }
	    if (flags.toc) {
	        xingInfoTag.toc = Buffer.alloc(100);
	        await tokenizer.readBuffer(xingInfoTag.toc);
	    }
	    if (flags.vbrScale) {
	        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);
	    }
	    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));
	    if (lameTag === 'LAME') {
	        await tokenizer.ignore(4);
	        xingInfoTag.lame = {
	            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))
	        };
	        const match = xingInfoTag.lame.version.match(/\d+.\d+/g);
	        if (match) {
	            const majorMinorVersion = xingInfoTag.lame.version.match(/\d+.\d+/g)[0]; // e.g. 3.97
	            const version = majorMinorVersion.split('.').map(n => parseInt(n, 10));
	            if (version[0] >= 3 && version[1] >= 90) {
	                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader_1.ExtendedLameHeader);
	            }
	        }
	    }
	    return xingInfoTag;
	}
	exports.readXingHeader = readXingHeader; 
} (XingTag));

Object.defineProperty(MpegParser$1, "__esModule", { value: true });
MpegParser$1.MpegParser = void 0;
const Token$g = lib$1;
const core_1$1 = core$1;
const debug_1$d = browserExports;
const common = Util;
const AbstractID3Parser_1$2 = AbstractID3Parser$1;
const XingTag_1 = XingTag;
const debug$d = (0, debug_1$d.default)('music-metadata:parser:mpeg');
/**
 * Cache buffer size used for searching synchronization preabmle
 */
const maxPeekLen = 1024;
/**
 * MPEG-4 Audio definitions
 * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio
 */
const MPEG4 = {
    /**
     * Audio Object Types
     */
    AudioObjectTypes: [
        'AAC Main',
        'AAC LC',
        'AAC SSR',
        'AAC LTP' // Long Term Prediction
    ],
    /**
     * Sampling Frequencies
     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies
     */
    SamplingFrequencies: [
        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, undefined, undefined, -1
    ]
    /**
     * Channel Configurations
     */
};
const MPEG4_ChannelConfigurations = [
    undefined,
    ['front-center'],
    ['front-left', 'front-right'],
    ['front-center', 'front-left', 'front-right'],
    ['front-center', 'front-left', 'front-right', 'back-center'],
    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],
    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],
    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']
];
/**
 * MPEG Audio Layer I/II/III frame header
 * Ref: https://www.mp3-tech.org/programmer/frame_header.html
 * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM
 * Ref: https://wiki.multimedia.cx/index.php/ADTS
 */
class MpegFrameHeader {
    constructor(buf, off) {
        // B(20,19): MPEG Audio versionIndex ID
        this.versionIndex = common.getBitAllignedNumber(buf, off + 1, 3, 2);
        // C(18,17): Layer description
        this.layer = MpegFrameHeader.LayerDescription[common.getBitAllignedNumber(buf, off + 1, 5, 2)];
        if (this.versionIndex > 1 && this.layer === 0) {
            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)
        }
        else {
            this.parseMpegHeader(buf, off); // Conventional MPEG header
        }
        // D(16): Protection bit (if true 16-bit CRC follows header)
        this.isProtectedByCRC = !common.isBitSet(buf, off + 1, 7);
    }
    calcDuration(numFrames) {
        return numFrames * this.calcSamplesPerFrame() / this.samplingRate;
    }
    calcSamplesPerFrame() {
        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];
    }
    calculateSideInfoLength() {
        if (this.layer !== 3)
            return 2;
        if (this.channelModeIndex === 3) {
            // mono
            if (this.version === 1) {
                return 17;
            }
            else if (this.version === 2 || this.version === 2.5) {
                return 9;
            }
        }
        else {
            if (this.version === 1) {
                return 32;
            }
            else if (this.version === 2 || this.version === 2.5) {
                return 17;
            }
        }
    }
    calcSlotSize() {
        return [null, 4, 1, 1][this.layer];
    }
    parseMpegHeader(buf, off) {
        this.container = 'MPEG';
        // E(15,12): Bitrate index
        this.bitrateIndex = common.getBitAllignedNumber(buf, off + 2, 0, 4);
        // F(11,10): Sampling rate frequency index
        this.sampRateFreqIndex = common.getBitAllignedNumber(buf, off + 2, 4, 2);
        // G(9): Padding bit
        this.padding = common.isBitSet(buf, off + 2, 6);
        // H(8): Private bit
        this.privateBit = common.isBitSet(buf, off + 2, 7);
        // I(7,6): Channel Mode
        this.channelModeIndex = common.getBitAllignedNumber(buf, off + 3, 0, 2);
        // J(5,4): Mode extension (Only used in Joint stereo)
        this.modeExtension = common.getBitAllignedNumber(buf, off + 3, 2, 2);
        // K(3): Copyright
        this.isCopyrighted = common.isBitSet(buf, off + 3, 4);
        // L(2): Original
        this.isOriginalMedia = common.isBitSet(buf, off + 3, 5);
        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.
        this.emphasis = common.getBitAllignedNumber(buf, off + 3, 7, 2);
        this.version = MpegFrameHeader.VersionID[this.versionIndex];
        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];
        this.codec = `MPEG ${this.version} Layer ${this.layer}`;
        // Calculate bitrate
        const bitrateInKbps = this.calcBitrate();
        if (!bitrateInKbps) {
            throw new Error('Cannot determine bit-rate');
        }
        this.bitrate = bitrateInKbps * 1000;
        // Calculate sampling rate
        this.samplingRate = this.calcSamplingRate();
        if (this.samplingRate == null) {
            throw new Error('Cannot determine sampling-rate');
        }
    }
    parseAdtsHeader(buf, off) {
        debug$d(`layer=0 => ADTS`);
        this.version = this.versionIndex === 2 ? 4 : 2;
        this.container = 'ADTS/MPEG-' + this.version;
        const profileIndex = common.getBitAllignedNumber(buf, off + 2, 0, 2);
        this.codec = 'AAC';
        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];
        debug$d(`MPEG-4 audio-codec=${this.codec}`);
        const samplingFrequencyIndex = common.getBitAllignedNumber(buf, off + 2, 2, 4);
        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];
        debug$d(`sampling-rate=${this.samplingRate}`);
        const channelIndex = common.getBitAllignedNumber(buf, off + 2, 7, 3);
        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];
        debug$d(`channel-config=${this.mp4ChannelConfig.join('+')}`);
        this.frameLength = common.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;
    }
    calcBitrate() {
        if (this.bitrateIndex === 0x00 || // free
            this.bitrateIndex === 0x0F) { // reserved
            return;
        }
        const codecIndex = `${Math.floor(this.version)}${this.layer}`;
        return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];
    }
    calcSamplingRate() {
        if (this.sampRateFreqIndex === 0x03)
            return null; // 'reserved'
        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];
    }
}
MpegFrameHeader.SyncByte1 = 0xFF;
MpegFrameHeader.SyncByte2 = 0xE0;
MpegFrameHeader.VersionID = [2.5, null, 2, 1];
MpegFrameHeader.LayerDescription = [0, 3, 2, 1];
MpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];
MpegFrameHeader.bitrate_index = {
    0x01: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },
    0x02: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },
    0x03: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },
    0x04: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },
    0x05: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },
    0x06: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },
    0x07: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },
    0x08: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },
    0x09: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },
    0x0A: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },
    0x0B: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },
    0x0C: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },
    0x0D: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },
    0x0E: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }
};
MpegFrameHeader.sampling_rate_freq_index = {
    1: { 0x00: 44100, 0x01: 48000, 0x02: 32000 },
    2: { 0x00: 22050, 0x01: 24000, 0x02: 16000 },
    2.5: { 0x00: 11025, 0x01: 12000, 0x02: 8000 }
};
MpegFrameHeader.samplesInFrameTable = [
    /* Layer   I    II   III */
    [0, 384, 1152, 1152],
    [0, 384, 1152, 576] // MPEG-2(.5
];
/**
 * MPEG Audio Layer I/II/III
 */
const FrameHeader = {
    len: 4,
    get: (buf, off) => {
        return new MpegFrameHeader(buf, off);
    }
};
function getVbrCodecProfile(vbrScale) {
    return 'V' + Math.floor((100 - vbrScale) / 10);
}
class MpegParser extends AbstractID3Parser_1$2.AbstractID3Parser {
    constructor() {
        super(...arguments);
        this.frameCount = 0;
        this.syncFrameCount = -1;
        this.countSkipFrameData = 0;
        this.totalDataLength = 0;
        this.bitrates = [];
        this.calculateEofDuration = false;
        this.buf_frame_header = Buffer.alloc(4);
        this.syncPeek = {
            buf: Buffer.alloc(maxPeekLen),
            len: 0
        };
    }
    /**
     * Called after ID3 headers have been parsed
     */
    async postId3v2Parse() {
        this.metadata.setFormat('lossless', false);
        try {
            let quit = false;
            while (!quit) {
                await this.sync();
                quit = await this.parseCommonMpegHeader();
            }
        }
        catch (err) {
            if (err instanceof core_1$1.EndOfStreamError) {
                debug$d(`End-of-stream`);
                if (this.calculateEofDuration) {
                    const numberOfSamples = this.frameCount * this.samplesPerFrame;
                    this.metadata.setFormat('numberOfSamples', numberOfSamples);
                    const duration = numberOfSamples / this.metadata.format.sampleRate;
                    debug$d(`Calculate duration at EOF: ${duration} sec.`, duration);
                    this.metadata.setFormat('duration', duration);
                }
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length
     */
    finalize() {
        const format = this.metadata.format;
        const hasID3v1 = this.metadata.native.hasOwnProperty('ID3v1');
        if (format.duration && this.tokenizer.fileInfo.size) {
            const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);
            if (format.codecProfile && format.codecProfile[0] === 'V') {
                this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);
            }
        }
        else if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {
            const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);
            const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;
            this.metadata.setFormat('numberOfSamples', numberOfSamples);
            const duration = numberOfSamples / format.sampleRate;
            debug$d("Calculate CBR duration based on file size: %s", duration);
            this.metadata.setFormat('duration', duration);
        }
    }
    async sync() {
        let gotFirstSync = false;
        while (true) {
            let bo = 0;
            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });
            if (this.syncPeek.len <= 163) {
                throw new core_1$1.EndOfStreamError();
            }
            while (true) {
                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {
                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;
                    this.buf_frame_header[1] = this.syncPeek.buf[bo];
                    await this.tokenizer.ignore(bo);
                    debug$d(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);
                    if (this.syncFrameCount === this.frameCount) {
                        debug$d(`Re-synced MPEG stream, frameCount=${this.frameCount}`);
                        this.frameCount = 0;
                        this.frame_size = 0;
                    }
                    this.syncFrameCount = this.frameCount;
                    return; // sync
                }
                else {
                    gotFirstSync = false;
                    bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);
                    if (bo === -1) {
                        if (this.syncPeek.len < this.syncPeek.buf.length) {
                            throw new core_1$1.EndOfStreamError();
                        }
                        await this.tokenizer.ignore(this.syncPeek.len);
                        break; // continue with next buffer
                    }
                    else {
                        ++bo;
                        gotFirstSync = true;
                    }
                }
            }
        }
    }
    /**
     * Combined ADTS & MPEG (MP2 & MP3) header handling
     * @return {Promise<boolean>} true if parser should quit
     */
    async parseCommonMpegHeader() {
        if (this.frameCount === 0) {
            this.mpegOffset = this.tokenizer.position - 1;
        }
        await this.tokenizer.peekBuffer(this.buf_frame_header, { offset: 1, length: 3 });
        let header;
        try {
            header = FrameHeader.get(this.buf_frame_header, 0);
        }
        catch (err) {
            await this.tokenizer.ignore(1);
            this.metadata.addWarning('Parse error: ' + err.message);
            return false; // sync
        }
        await this.tokenizer.ignore(3);
        this.metadata.setFormat('container', header.container);
        this.metadata.setFormat('codec', header.codec);
        this.metadata.setFormat('lossless', false);
        this.metadata.setFormat('sampleRate', header.samplingRate);
        this.frameCount++;
        return header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);
    }
    /**
     * @return {Promise<boolean>} true if parser should quit
     */
    async parseAudioFrameHeader(header) {
        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);
        this.metadata.setFormat('bitrate', header.bitrate);
        if (this.frameCount < 20 * 10000) {
            debug$d('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);
        }
        const slot_size = header.calcSlotSize();
        if (slot_size === null) {
            throw new Error('invalid slot_size');
        }
        const samples_per_frame = header.calcSamplesPerFrame();
        debug$d(`samples_per_frame=${samples_per_frame}`);
        const bps = samples_per_frame / 8.0;
        const fsize = (bps * header.bitrate / header.samplingRate) +
            ((header.padding) ? slot_size : 0);
        this.frame_size = Math.floor(fsize);
        this.audioFrameHeader = header;
        this.bitrates.push(header.bitrate);
        // xtra header only exists in first frame
        if (this.frameCount === 1) {
            this.offset = FrameHeader.len;
            await this.skipSideInformation();
            return false;
        }
        if (this.frameCount === 3) {
            // the stream is CBR if the first 3 frame bitrates are the same
            if (this.areAllSame(this.bitrates)) {
                // Actual calculation will be done in finalize
                this.samplesPerFrame = samples_per_frame;
                this.metadata.setFormat('codecProfile', 'CBR');
                if (this.tokenizer.fileInfo.size)
                    return true; // Will calculate duration based on the file size
            }
            else if (this.metadata.format.duration) {
                return true; // We already got the duration, stop processing MPEG stream any further
            }
            if (!this.options.duration) {
                return true; // Enforce duration not enabled, stop processing entire stream
            }
        }
        // once we know the file is VBR attach listener to end of
        // stream so we can do the duration calculation when we
        // have counted all the frames
        if (this.options.duration && this.frameCount === 4) {
            this.samplesPerFrame = samples_per_frame;
            this.calculateEofDuration = true;
        }
        this.offset = 4;
        if (header.isProtectedByCRC) {
            await this.parseCrc();
            return false;
        }
        else {
            await this.skipSideInformation();
            return false;
        }
    }
    async parseAdts(header) {
        const buf = Buffer.alloc(3);
        await this.tokenizer.readBuffer(buf);
        header.frameLength += common.getBitAllignedNumber(buf, 0, 0, 11);
        this.totalDataLength += header.frameLength;
        this.samplesPerFrame = 1024;
        const framesPerSec = header.samplingRate / this.samplesPerFrame;
        const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;
        const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;
        this.metadata.setFormat('bitrate', bitrate);
        debug$d(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);
        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);
        // Consume remaining header and frame data
        if (this.frameCount === 3) {
            this.metadata.setFormat('codecProfile', header.codecProfile);
            if (header.mp4ChannelConfig) {
                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);
            }
            if (this.options.duration) {
                this.calculateEofDuration = true;
            }
            else {
                return true; // Stop parsing after the third frame
            }
        }
        return false;
    }
    async parseCrc() {
        this.crc = await this.tokenizer.readNumber(Token$g.INT16_BE);
        this.offset += 2;
        return this.skipSideInformation();
    }
    async skipSideInformation() {
        const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();
        // side information
        await this.tokenizer.readToken(new Token$g.Uint8ArrayType(sideinfo_length));
        this.offset += sideinfo_length;
        await this.readXtraInfoHeader();
        return;
    }
    async readXtraInfoHeader() {
        const headerTag = await this.tokenizer.readToken(XingTag_1.InfoTagHeaderTag);
        this.offset += XingTag_1.InfoTagHeaderTag.len; // 12
        switch (headerTag) {
            case 'Info':
                this.metadata.setFormat('codecProfile', 'CBR');
                return this.readXingInfoHeader();
            case 'Xing':
                const infoTag = await this.readXingInfoHeader();
                const codecProfile = getVbrCodecProfile(infoTag.vbrScale);
                this.metadata.setFormat('codecProfile', codecProfile);
                return null;
            case 'Xtra':
                // ToDo: ???
                break;
            case 'LAME':
                const version = await this.tokenizer.readToken(XingTag_1.LameEncoderVersion);
                if (this.frame_size >= this.offset + XingTag_1.LameEncoderVersion.len) {
                    this.offset += XingTag_1.LameEncoderVersion.len;
                    this.metadata.setFormat('tool', 'LAME ' + version);
                    await this.skipFrameData(this.frame_size - this.offset);
                    return null;
                }
                else {
                    this.metadata.addWarning('Corrupt LAME header');
                    break;
                }
            // ToDo: ???
        }
        // ToDo: promise duration???
        const frameDataLeft = this.frame_size - this.offset;
        if (frameDataLeft < 0) {
            this.metadata.addWarning('Frame ' + this.frameCount + 'corrupt: negative frameDataLeft');
        }
        else {
            await this.skipFrameData(frameDataLeft);
        }
        return null;
    }
    /**
     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html
     * @returns {Promise<string>}
     */
    async readXingInfoHeader() {
        const offset = this.tokenizer.position;
        const infoTag = await (0, XingTag_1.readXingHeader)(this.tokenizer);
        this.offset += this.tokenizer.position - offset;
        if (infoTag.lame) {
            this.metadata.setFormat('tool', 'LAME ' + common.stripNulls(infoTag.lame.version));
            if (infoTag.lame.extended) {
                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);
                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);
                if (infoTag.lame.extended.track_gain) {
                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);
                }
                if (infoTag.lame.extended.album_gain) {
                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);
                }
                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);
            }
        }
        if (infoTag.streamSize) {
            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);
            this.metadata.setFormat('duration', duration);
            debug$d('Get duration from Xing header: %s', this.metadata.format.duration);
            return infoTag;
        }
        // frames field is not present
        const frameDataLeft = this.frame_size - this.offset;
        await this.skipFrameData(frameDataLeft);
        return infoTag;
    }
    async skipFrameData(frameDataLeft) {
        if (frameDataLeft < 0)
            throw new Error('frame-data-left cannot be negative');
        await this.tokenizer.ignore(frameDataLeft);
        this.countSkipFrameData += frameDataLeft;
    }
    areAllSame(array) {
        const first = array[0];
        return array.every(element => {
            return element === first;
        });
    }
}
MpegParser$1.MpegParser = MpegParser;

var musepack = {};

var MpcSv8Parser$1 = {};

var StreamVersion8 = {};

Object.defineProperty(StreamVersion8, "__esModule", { value: true });
StreamVersion8.StreamReader = void 0;
const Token$f = lib$1;
const debug_1$c = browserExports;
const util$4 = Util;
const debug$c = (0, debug_1$c.default)('music-metadata:parser:musepack:sv8');
const PacketKey = new Token$f.StringType(2, 'binary');
/**
 * Stream Header Packet part 1
 * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket
 */
const SH_part1 = {
    len: 5,
    get: (buf, off) => {
        return {
            crc: Token$f.UINT32_LE.get(buf, off),
            streamVersion: Token$f.UINT8.get(buf, off + 4)
        };
    }
};
/**
 * Stream Header Packet part 3
 * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket
 */
const SH_part3 = {
    len: 2,
    get: (buf, off) => {
        return {
            sampleFrequency: [44100, 48000, 37800, 32000][util$4.getBitAllignedNumber(buf, off, 0, 3)],
            maxUsedBands: util$4.getBitAllignedNumber(buf, off, 3, 5),
            channelCount: util$4.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,
            msUsed: util$4.isBitSet(buf, off + 1, 4),
            audioBlockFrames: util$4.getBitAllignedNumber(buf, off + 1, 5, 3)
        };
    }
};
class StreamReader {
    constructor(tokenizer) {
        this.tokenizer = tokenizer;
    }
    async readPacketHeader() {
        const key = await this.tokenizer.readToken(PacketKey);
        const size = await this.readVariableSizeField();
        return {
            key,
            payloadLength: size.value - 2 - size.len
        };
    }
    async readStreamHeader(size) {
        const streamHeader = {};
        debug$c(`Reading SH at offset=${this.tokenizer.position}`);
        const part1 = await this.tokenizer.readToken(SH_part1);
        size -= SH_part1.len;
        Object.assign(streamHeader, part1);
        debug$c(`SH.streamVersion = ${part1.streamVersion}`);
        const sampleCount = await this.readVariableSizeField();
        size -= sampleCount.len;
        streamHeader.sampleCount = sampleCount.value;
        const bs = await this.readVariableSizeField();
        size -= bs.len;
        streamHeader.beginningOfSilence = bs.value;
        const part3 = await this.tokenizer.readToken(SH_part3);
        size -= SH_part3.len;
        Object.assign(streamHeader, part3);
        // assert.equal(size, 0);
        await this.tokenizer.ignore(size);
        return streamHeader;
    }
    async readVariableSizeField(len = 1, hb = 0) {
        let n = await this.tokenizer.readNumber(Token$f.UINT8);
        if ((n & 0x80) === 0) {
            return { len, value: hb + n };
        }
        n &= 0x7F;
        n += hb;
        return this.readVariableSizeField(len + 1, n << 7);
    }
}
StreamVersion8.StreamReader = StreamReader;

Object.defineProperty(MpcSv8Parser$1, "__esModule", { value: true });
MpcSv8Parser$1.MpcSv8Parser = void 0;
const debug_1$b = browserExports;
const BasicParser_1$6 = BasicParser$1;
const APEv2Parser_1$4 = APEv2Parser$1;
const FourCC_1$6 = FourCC;
const SV8 = StreamVersion8;
const debug$b = (0, debug_1$b.default)('music-metadata:parser:musepack');
class MpcSv8Parser extends BasicParser_1$6.BasicParser {
    constructor() {
        super(...arguments);
        this.audioLength = 0;
    }
    async parse() {
        const signature = await this.tokenizer.readToken(FourCC_1$6.FourCcToken);
        if (signature !== 'MPCK')
            throw new Error('Invalid Magic number');
        this.metadata.setFormat('container', 'Musepack, SV8');
        return this.parsePacket();
    }
    async parsePacket() {
        const sv8reader = new SV8.StreamReader(this.tokenizer);
        do {
            const header = await sv8reader.readPacketHeader();
            debug$b(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);
            switch (header.key) {
                case 'SH': // Stream Header
                    const sh = await sv8reader.readStreamHeader(header.payloadLength);
                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);
                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);
                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);
                    this.metadata.setFormat('numberOfChannels', sh.channelCount);
                    break;
                case 'AP': // Audio Packet
                    this.audioLength += header.payloadLength;
                    await this.tokenizer.ignore(header.payloadLength);
                    break;
                case 'RG': // Replaygain
                case 'EI': // Encoder Info
                case 'SO': // Seek Table Offset
                case 'ST': // Seek Table
                case 'CT': // Chapter-Tag
                    await this.tokenizer.ignore(header.payloadLength);
                    break;
                case 'SE': // Stream End
                    this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);
                    return APEv2Parser_1$4.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);
                default:
                    throw new Error(`Unexpected header: ${header.key}`);
            }
        } while (true);
    }
}
MpcSv8Parser$1.MpcSv8Parser = MpcSv8Parser;

var MpcSv7Parser$1 = {};

var BitReader$1 = {};

Object.defineProperty(BitReader$1, "__esModule", { value: true });
BitReader$1.BitReader = void 0;
const Token$e = lib$1;
class BitReader {
    constructor(tokenizer) {
        this.tokenizer = tokenizer;
        this.pos = 0;
        this.dword = undefined;
    }
    /**
     *
     * @param bits 1..30 bits
     */
    async read(bits) {
        while (this.dword === undefined) {
            this.dword = await this.tokenizer.readToken(Token$e.UINT32_LE);
        }
        let out = this.dword;
        this.pos += bits;
        if (this.pos < 32) {
            out >>>= (32 - this.pos);
            return out & ((1 << bits) - 1);
        }
        else {
            this.pos -= 32;
            if (this.pos === 0) {
                this.dword = undefined;
                return out & ((1 << bits) - 1);
            }
            else {
                this.dword = await this.tokenizer.readToken(Token$e.UINT32_LE);
                if (this.pos) {
                    out <<= this.pos;
                    out |= this.dword >>> (32 - this.pos);
                }
                return out & ((1 << bits) - 1);
            }
        }
    }
    async ignore(bits) {
        if (this.pos > 0) {
            const remaining = 32 - this.pos;
            this.dword = undefined;
            bits -= remaining;
            this.pos = 0;
        }
        const remainder = bits % 32;
        const numOfWords = (bits - remainder) / 32;
        await this.tokenizer.ignore(numOfWords * 4);
        return this.read(remainder);
    }
}
BitReader$1.BitReader = BitReader;

var StreamVersion7 = {};

Object.defineProperty(StreamVersion7, "__esModule", { value: true });
StreamVersion7.Header = void 0;
const Token$d = lib$1;
const util$3 = Util;
/**
 * BASIC STRUCTURE
 */
StreamVersion7.Header = {
    len: 6 * 4,
    get: (buf, off) => {
        const header = {
            // word 0
            signature: Buffer.from(buf).toString('latin1', off, off + 3),
            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)
            streamMinorVersion: util$3.getBitAllignedNumber(buf, off + 3, 0, 4),
            streamMajorVersion: util$3.getBitAllignedNumber(buf, off + 3, 4, 4),
            // word 1
            frameCount: Token$d.UINT32_LE.get(buf, off + 4),
            // word 2
            maxLevel: Token$d.UINT16_LE.get(buf, off + 8),
            sampleFrequency: [44100, 48000, 37800, 32000][util$3.getBitAllignedNumber(buf, off + 10, 0, 2)],
            link: util$3.getBitAllignedNumber(buf, off + 10, 2, 2),
            profile: util$3.getBitAllignedNumber(buf, off + 10, 4, 4),
            maxBand: util$3.getBitAllignedNumber(buf, off + 11, 0, 6),
            intensityStereo: util$3.isBitSet(buf, off + 11, 6),
            midSideStereo: util$3.isBitSet(buf, off + 11, 7),
            // word 3
            titlePeak: Token$d.UINT16_LE.get(buf, off + 12),
            titleGain: Token$d.UINT16_LE.get(buf, off + 14),
            // word 4
            albumPeak: Token$d.UINT16_LE.get(buf, off + 16),
            albumGain: Token$d.UINT16_LE.get(buf, off + 18),
            // word
            lastFrameLength: (Token$d.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,
            trueGapless: util$3.isBitSet(buf, off + 23, 0)
        };
        header.lastFrameLength = header.trueGapless ? (Token$d.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;
        return header;
    }
};

Object.defineProperty(MpcSv7Parser$1, "__esModule", { value: true });
MpcSv7Parser$1.MpcSv7Parser = void 0;
const debug_1$a = browserExports;
const BasicParser_1$5 = BasicParser$1;
const APEv2Parser_1$3 = APEv2Parser$1;
const BitReader_1 = BitReader$1;
const SV7 = StreamVersion7;
const debug$a = (0, debug_1$a.default)('music-metadata:parser:musepack');
class MpcSv7Parser extends BasicParser_1$5.BasicParser {
    constructor() {
        super(...arguments);
        this.audioLength = 0;
    }
    async parse() {
        const header = await this.tokenizer.readToken(SV7.Header);
        if (header.signature !== 'MP+')
            throw new Error('Unexpected magic number');
        debug$a(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);
        this.metadata.setFormat('container', 'Musepack, SV7');
        this.metadata.setFormat('sampleRate', header.sampleFrequency);
        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;
        this.metadata.setFormat('numberOfSamples', numberOfSamples);
        this.duration = numberOfSamples / header.sampleFrequency;
        this.metadata.setFormat('duration', this.duration);
        this.bitreader = new BitReader_1.BitReader(this.tokenizer);
        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);
        const version = await this.bitreader.read(8);
        this.metadata.setFormat('codec', (version / 100).toFixed(2));
        await this.skipAudioData(header.frameCount);
        debug$a(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);
        return APEv2Parser_1$3.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);
    }
    async skipAudioData(frameCount) {
        while (frameCount-- > 0) {
            const frameLength = await this.bitreader.read(20);
            this.audioLength += 20 + frameLength;
            await this.bitreader.ignore(frameLength);
        }
        // last frame
        const lastFrameLength = await this.bitreader.read(11);
        this.audioLength += lastFrameLength;
        this.metadata.setFormat('bitrate', this.audioLength / this.duration);
    }
}
MpcSv7Parser$1.MpcSv7Parser = MpcSv7Parser;

Object.defineProperty(musepack, "__esModule", { value: true });
const debug_1$9 = browserExports;
const Token$c = lib$1;
const AbstractID3Parser_1$1 = AbstractID3Parser$1;
const MpcSv8Parser_1 = MpcSv8Parser$1;
const MpcSv7Parser_1 = MpcSv7Parser$1;
const debug$9 = (0, debug_1$9.default)('music-metadata:parser:musepack');
class MusepackParser extends AbstractID3Parser_1$1.AbstractID3Parser {
    async postId3v2Parse() {
        const signature = await this.tokenizer.peekToken(new Token$c.StringType(3, 'binary'));
        let mpcParser;
        switch (signature) {
            case 'MP+': {
                debug$9('Musepack stream-version 7');
                mpcParser = new MpcSv7Parser_1.MpcSv7Parser();
                break;
            }
            case 'MPC': {
                debug$9('Musepack stream-version 8');
                mpcParser = new MpcSv8Parser_1.MpcSv8Parser();
                break;
            }
            default: {
                throw new Error('Invalid Musepack signature prefix');
            }
        }
        mpcParser.init(this.metadata, this.tokenizer, this.options);
        return mpcParser.parse();
    }
}
musepack.default = MusepackParser;

var OggParser$1 = {};

var OpusParser$1 = {};

var Opus$1 = {};

Object.defineProperty(Opus$1, "__esModule", { value: true });
Opus$1.IdHeader = void 0;
const Token$b = lib$1;
/**
 * Opus ID Header parser
 * Ref: https://wiki.xiph.org/OggOpus#ID_Header
 */
class IdHeader {
    constructor(len) {
        this.len = len;
        if (len < 19) {
            throw new Error("ID-header-page 0 should be at least 19 bytes long");
        }
    }
    get(buf, off) {
        return {
            magicSignature: new Token$b.StringType(8, 'ascii').get(buf, off + 0),
            version: buf.readUInt8(off + 8),
            channelCount: buf.readUInt8(off + 9),
            preSkip: buf.readInt16LE(off + 10),
            inputSampleRate: buf.readInt32LE(off + 12),
            outputGain: buf.readInt16LE(off + 16),
            channelMapping: buf.readUInt8(off + 18)
        };
    }
}
Opus$1.IdHeader = IdHeader;

Object.defineProperty(OpusParser$1, "__esModule", { value: true });
OpusParser$1.OpusParser = void 0;
const Token$a = lib$1;
const VorbisParser_1$2 = VorbisParser$1;
const Opus = Opus$1;
/**
 * Opus parser
 * Internet Engineering Task Force (IETF) - RFC 6716
 * Used by OggParser
 */
class OpusParser extends VorbisParser_1$2.VorbisParser {
    constructor(metadata, options, tokenizer) {
        super(metadata, options);
        this.tokenizer = tokenizer;
        this.lastPos = -1;
    }
    /**
     * Parse first Opus Ogg page
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */
    parseFirstPage(header, pageData) {
        this.metadata.setFormat('codec', 'Opus');
        // Parse Opus ID Header
        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);
        if (this.idHeader.magicSignature !== "OpusHead")
            throw new Error("Illegal ogg/Opus magic-signature");
        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);
        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);
    }
    parseFullPage(pageData) {
        const magicSignature = new Token$a.StringType(8, 'ascii').get(pageData, 0);
        switch (magicSignature) {
            case 'OpusTags':
                this.parseUserCommentList(pageData, 8);
                this.lastPos = this.tokenizer.position - pageData.length;
                break;
        }
    }
    calculateDuration(header) {
        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {
            // Calculate duration
            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;
            this.metadata.setFormat('numberOfSamples', pos_48bit);
            this.metadata.setFormat('duration', pos_48bit / 48000);
            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {
                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;
                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);
            }
        }
    }
}
OpusParser$1.OpusParser = OpusParser;

var SpeexParser$1 = {};

var Speex$1 = {};

Object.defineProperty(Speex$1, "__esModule", { value: true });
Speex$1.Header = void 0;
const Token$9 = lib$1;
const util$2 = Util;
/**
 * Speex Header Packet
 * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000
 */
Speex$1.Header = {
    len: 80,
    get: (buf, off) => {
        return {
            speex: new Token$9.StringType(8, 'ascii').get(buf, off + 0),
            version: util$2.trimRightNull(new Token$9.StringType(20, 'ascii').get(buf, off + 8)),
            version_id: buf.readInt32LE(off + 28),
            header_size: buf.readInt32LE(off + 32),
            rate: buf.readInt32LE(off + 36),
            mode: buf.readInt32LE(off + 40),
            mode_bitstream_version: buf.readInt32LE(off + 44),
            nb_channels: buf.readInt32LE(off + 48),
            bitrate: buf.readInt32LE(off + 52),
            frame_size: buf.readInt32LE(off + 56),
            vbr: buf.readInt32LE(off + 60),
            frames_per_packet: buf.readInt32LE(off + 64),
            extra_headers: buf.readInt32LE(off + 68),
            reserved1: buf.readInt32LE(off + 72),
            reserved2: buf.readInt32LE(off + 76)
        };
    }
};

Object.defineProperty(SpeexParser$1, "__esModule", { value: true });
SpeexParser$1.SpeexParser = void 0;
const debug_1$8 = browserExports;
const VorbisParser_1$1 = VorbisParser$1;
const Speex = Speex$1;
const debug$8 = (0, debug_1$8.default)('music-metadata:parser:ogg:speex');
/**
 * Speex, RFC 5574
 * Ref:
 * - https://www.speex.org/docs/manual/speex-manual/
 * - https://tools.ietf.org/html/rfc5574
 */
class SpeexParser extends VorbisParser_1$1.VorbisParser {
    constructor(metadata, options, tokenizer) {
        super(metadata, options);
        this.tokenizer = tokenizer;
    }
    /**
     * Parse first Speex Ogg page
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */
    parseFirstPage(header, pageData) {
        debug$8('First Ogg/Speex page');
        const speexHeader = Speex.Header.get(pageData, 0);
        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);
        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);
        this.metadata.setFormat('sampleRate', speexHeader.rate);
        if (speexHeader.bitrate !== -1) {
            this.metadata.setFormat('bitrate', speexHeader.bitrate);
        }
    }
}
SpeexParser$1.SpeexParser = SpeexParser;

var TheoraParser$1 = {};

var Theora = {};

Object.defineProperty(Theora, "__esModule", { value: true });
Theora.IdentificationHeader = void 0;
const Token$8 = lib$1;
/**
 * 6.2 Identification Header
 * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode
 */
Theora.IdentificationHeader = {
    len: 42,
    get: (buf, off) => {
        return {
            id: new Token$8.StringType(7, 'ascii').get(buf, off),
            vmaj: buf.readUInt8(off + 7),
            vmin: buf.readUInt8(off + 8),
            vrev: buf.readUInt8(off + 9),
            vmbw: buf.readUInt16BE(off + 10),
            vmbh: buf.readUInt16BE(off + 17),
            nombr: Token$8.UINT24_BE.get(buf, off + 37),
            nqual: buf.readUInt8(off + 40)
        };
    }
};

Object.defineProperty(TheoraParser$1, "__esModule", { value: true });
TheoraParser$1.TheoraParser = void 0;
const debug_1$7 = browserExports;
const Theora_1 = Theora;
const debug$7 = (0, debug_1$7.default)('music-metadata:parser:ogg:theora');
/**
 * Ref:
 * - https://theora.org/doc/Theora.pdf
 */
class TheoraParser {
    constructor(metadata, options, tokenizer) {
        this.metadata = metadata;
        this.tokenizer = tokenizer;
    }
    /**
     * Vorbis 1 parser
     * @param header Ogg Page Header
     * @param pageData Page data
     */
    parsePage(header, pageData) {
        if (header.headerType.firstPage) {
            this.parseFirstPage(header, pageData);
        }
    }
    flush() {
        debug$7('flush');
    }
    calculateDuration(header) {
        debug$7('duration calculation not implemented');
    }
    /**
     * Parse first Theora Ogg page. the initial identification header packet
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */
    parseFirstPage(header, pageData) {
        debug$7('First Ogg/Theora page');
        this.metadata.setFormat('codec', 'Theora');
        const idHeader = Theora_1.IdentificationHeader.get(pageData, 0);
        this.metadata.setFormat('bitrate', idHeader.nombr);
    }
}
TheoraParser$1.TheoraParser = TheoraParser;

Object.defineProperty(OggParser$1, "__esModule", { value: true });
OggParser$1.OggParser = OggParser$1.SegmentTable = void 0;
const Token$7 = lib$1;
const core_1 = core$1;
const debug_1$6 = browserExports;
const util$1 = Util;
const FourCC_1$5 = FourCC;
const BasicParser_1$4 = BasicParser$1;
const VorbisParser_1 = VorbisParser$1;
const OpusParser_1 = OpusParser$1;
const SpeexParser_1 = SpeexParser$1;
const TheoraParser_1 = TheoraParser$1;
const debug$6 = (0, debug_1$6.default)('music-metadata:parser:ogg');
class SegmentTable {
    static sum(buf, off, len) {
        let s = 0;
        for (let i = off; i < off + len; ++i) {
            s += buf[i];
        }
        return s;
    }
    constructor(header) {
        this.len = header.page_segments;
    }
    get(buf, off) {
        return {
            totalPageSize: SegmentTable.sum(buf, off, this.len)
        };
    }
}
OggParser$1.SegmentTable = SegmentTable;
/**
 * Parser for Ogg logical bitstream framing
 */
class OggParser extends BasicParser_1$4.BasicParser {
    /**
     * Parse page
     * @returns {Promise<void>}
     */
    async parse() {
        debug$6('pos=%s, parsePage()', this.tokenizer.position);
        try {
            let header;
            do {
                header = await this.tokenizer.readToken(OggParser.Header);
                if (header.capturePattern !== 'OggS')
                    throw new Error('Invalid Ogg capture pattern');
                this.metadata.setFormat('container', 'Ogg');
                this.header = header;
                this.pageNumber = header.pageSequenceNo;
                debug$6('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);
                const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));
                debug$6('totalPageSize=%s', segmentTable.totalPageSize);
                const pageData = await this.tokenizer.readToken(new Token$7.Uint8ArrayType(segmentTable.totalPageSize));
                debug$6('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);
                if (header.headerType.firstPage) {
                    const id = new Token$7.StringType(7, 'ascii').get(Buffer.from(pageData), 0);
                    switch (id) {
                        case '\x01vorbis': // Ogg/Vorbis
                            debug$6('Set page consumer to Ogg/Vorbis');
                            this.pageConsumer = new VorbisParser_1.VorbisParser(this.metadata, this.options);
                            break;
                        case 'OpusHea': // Ogg/Opus
                            debug$6('Set page consumer to Ogg/Opus');
                            this.pageConsumer = new OpusParser_1.OpusParser(this.metadata, this.options, this.tokenizer);
                            break;
                        case 'Speex  ': // Ogg/Speex
                            debug$6('Set page consumer to Ogg/Speex');
                            this.pageConsumer = new SpeexParser_1.SpeexParser(this.metadata, this.options, this.tokenizer);
                            break;
                        case 'fishead':
                        case '\x00theora': // Ogg/Theora
                            debug$6('Set page consumer to Ogg/Theora');
                            this.pageConsumer = new TheoraParser_1.TheoraParser(this.metadata, this.options, this.tokenizer);
                            break;
                        default:
                            throw new Error('gg audio-codec not recognized (id=' + id + ')');
                    }
                }
                this.pageConsumer.parsePage(header, pageData);
            } while (!header.headerType.lastPage);
        }
        catch (err) {
            if (err instanceof core_1.EndOfStreamError) {
                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');
                debug$6(`End-of-stream`);
                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');
                if (this.header) {
                    this.pageConsumer.calculateDuration(this.header);
                }
            }
            else if (err.message.startsWith('FourCC')) {
                if (this.pageNumber > 0) {
                    // ignore this error: work-around if last OGG-page is not marked with last-page flag
                    this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');
                    this.pageConsumer.flush();
                }
            }
            else {
                throw err;
            }
        }
    }
}
OggParser.Header = {
    len: 27,
    get: (buf, off) => {
        return {
            capturePattern: FourCC_1$5.FourCcToken.get(buf, off),
            version: Token$7.UINT8.get(buf, off + 4),
            headerType: {
                continued: util$1.getBit(buf, off + 5, 0),
                firstPage: util$1.getBit(buf, off + 5, 1),
                lastPage: util$1.getBit(buf, off + 5, 2)
            },
            // packet_flag: buf.readUInt8(off + 5),
            absoluteGranulePosition: Number(Token$7.UINT64_LE.get(buf, off + 6)),
            streamSerialNumber: Token$7.UINT32_LE.get(buf, off + 14),
            pageSequenceNo: Token$7.UINT32_LE.get(buf, off + 18),
            pageChecksum: Token$7.UINT32_LE.get(buf, off + 22),
            page_segments: Token$7.UINT8.get(buf, off + 26)
        };
    }
};
OggParser$1.OggParser = OggParser;

var WaveParser$1 = {};

var RiffChunk = {};

Object.defineProperty(RiffChunk, "__esModule", { value: true });
RiffChunk.ListInfoTagValue = RiffChunk.Header = void 0;
const Token$6 = lib$1;
/**
 * Common RIFF chunk header
 */
RiffChunk.Header = {
    len: 8,
    get: (buf, off) => {
        return {
            // Group-ID
            chunkID: buf.toString('binary', off, off + 4),
            // Size
            chunkSize: Token$6.UINT32_LE.get(buf, 4)
        };
    }
};
/**
 * Token to parse RIFF-INFO tag value
 */
class ListInfoTagValue {
    constructor(tagHeader) {
        this.tagHeader = tagHeader;
        this.len = tagHeader.chunkSize;
        this.len += this.len & 1; // if it is an odd length, round up to even
    }
    get(buf, off) {
        return new Token$6.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);
    }
}
RiffChunk.ListInfoTagValue = ListInfoTagValue;

var WaveChunk$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FactChunk = exports.Format = exports.WaveFormat = void 0;
	(function (WaveFormat) {
	    WaveFormat[WaveFormat["PCM"] = 1] = "PCM";
	    // MPEG-4 and AAC Audio Types
	    WaveFormat[WaveFormat["ADPCM"] = 2] = "ADPCM";
	    WaveFormat[WaveFormat["IEEE_FLOAT"] = 3] = "IEEE_FLOAT";
	    WaveFormat[WaveFormat["MPEG_ADTS_AAC"] = 5632] = "MPEG_ADTS_AAC";
	    WaveFormat[WaveFormat["MPEG_LOAS"] = 5634] = "MPEG_LOAS";
	    WaveFormat[WaveFormat["RAW_AAC1"] = 255] = "RAW_AAC1";
	    // Dolby Audio Types
	    WaveFormat[WaveFormat["DOLBY_AC3_SPDIF"] = 146] = "DOLBY_AC3_SPDIF";
	    WaveFormat[WaveFormat["DVM"] = 8192] = "DVM";
	    WaveFormat[WaveFormat["RAW_SPORT"] = 576] = "RAW_SPORT";
	    WaveFormat[WaveFormat["ESST_AC3"] = 577] = "ESST_AC3";
	    WaveFormat[WaveFormat["DRM"] = 9] = "DRM";
	    WaveFormat[WaveFormat["DTS2"] = 8193] = "DTS2";
	    WaveFormat[WaveFormat["MPEG"] = 80] = "MPEG";
	})(exports.WaveFormat || (exports.WaveFormat = {}));
	/**
	 * format chunk; chunk-id is "fmt "
	 * http://soundfile.sapp.org/doc/WaveFormat/
	 */
	class Format {
	    constructor(header) {
	        if (header.chunkSize < 16)
	            throw new Error('Invalid chunk size');
	        this.len = header.chunkSize;
	    }
	    get(buf, off) {
	        return {
	            wFormatTag: buf.readUInt16LE(off),
	            nChannels: buf.readUInt16LE(off + 2),
	            nSamplesPerSec: buf.readUInt32LE(off + 4),
	            nAvgBytesPerSec: buf.readUInt32LE(off + 8),
	            nBlockAlign: buf.readUInt16LE(off + 12),
	            wBitsPerSample: buf.readUInt16LE(off + 14)
	        };
	    }
	}
	exports.Format = Format;
	/**
	 * Fact chunk; chunk-id is "fact"
	 * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html
	 * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file
	 */
	class FactChunk {
	    constructor(header) {
	        if (header.chunkSize < 4) {
	            throw new Error('Invalid fact chunk size.');
	        }
	        this.len = header.chunkSize;
	    }
	    get(buf, off) {
	        return {
	            dwSampleLength: buf.readUInt32LE(off)
	        };
	    }
	}
	exports.FactChunk = FactChunk; 
} (WaveChunk$1));

var BwfChunk = {};

Object.defineProperty(BwfChunk, "__esModule", { value: true });
BwfChunk.BroadcastAudioExtensionChunk = void 0;
const Token$5 = lib$1;
const Util_1 = Util;
/**
 * Broadcast Audio Extension Chunk
 * Ref: https://tech.ebu.ch/docs/tech/tech3285.pdf
 */
BwfChunk.BroadcastAudioExtensionChunk = {
    len: 420,
    get: (uint8array, off) => {
        return {
            description: (0, Util_1.stripNulls)(new Token$5.StringType(256, 'ascii').get(uint8array, off)).trim(),
            originator: (0, Util_1.stripNulls)(new Token$5.StringType(32, 'ascii').get(uint8array, off + 256)).trim(),
            originatorReference: (0, Util_1.stripNulls)(new Token$5.StringType(32, 'ascii').get(uint8array, off + 288)).trim(),
            originationDate: (0, Util_1.stripNulls)(new Token$5.StringType(10, 'ascii').get(uint8array, off + 320)).trim(),
            originationTime: (0, Util_1.stripNulls)(new Token$5.StringType(8, 'ascii').get(uint8array, off + 330)).trim(),
            timeReferenceLow: Token$5.UINT32_LE.get(uint8array, off + 338),
            timeReferenceHigh: Token$5.UINT32_LE.get(uint8array, off + 342),
            version: Token$5.UINT16_LE.get(uint8array, off + 346),
            umid: new Token$5.Uint8ArrayType(64).get(uint8array, off + 348),
            loudnessValue: Token$5.UINT16_LE.get(uint8array, off + 412),
            maxTruePeakLevel: Token$5.UINT16_LE.get(uint8array, off + 414),
            maxMomentaryLoudness: Token$5.UINT16_LE.get(uint8array, off + 416),
            maxShortTermLoudness: Token$5.UINT16_LE.get(uint8array, off + 418)
        };
    }
};

Object.defineProperty(WaveParser$1, "__esModule", { value: true });
WaveParser$1.WaveParser = void 0;
const strtok3$2 = core$1;
const Token$4 = lib$1;
const debug_1$5 = browserExports;
const riff = RiffChunk;
const WaveChunk = WaveChunk$1;
const ID3v2Parser_1$2 = ID3v2Parser$1;
const util = Util;
const FourCC_1$4 = FourCC;
const BasicParser_1$3 = BasicParser$1;
const BwfChunk_1 = BwfChunk;
const debug$5 = (0, debug_1$5.default)('music-metadata:parser:RIFF');
/**
 * Resource Interchange File Format (RIFF) Parser
 *
 * WAVE PCM soundfile format
 *
 * Ref:
 * - http://www.johnloomis.org/cpe102/asgn/asgn1/riff.html
 * - http://soundfile.sapp.org/doc/WaveFormat
 *
 * ToDo: Split WAVE part from RIFF parser
 */
class WaveParser extends BasicParser_1$3.BasicParser {
    async parse() {
        const riffHeader = await this.tokenizer.readToken(riff.Header);
        debug$5(`pos=${this.tokenizer.position}, parse: chunkID=${riffHeader.chunkID}`);
        if (riffHeader.chunkID !== 'RIFF')
            return; // Not RIFF format
        return this.parseRiffChunk(riffHeader.chunkSize).catch(err => {
            if (!(err instanceof strtok3$2.EndOfStreamError)) {
                throw err;
            }
        });
    }
    async parseRiffChunk(chunkSize) {
        const type = await this.tokenizer.readToken(FourCC_1$4.FourCcToken);
        this.metadata.setFormat('container', type);
        switch (type) {
            case 'WAVE':
                return this.readWaveChunk(chunkSize - FourCC_1$4.FourCcToken.len);
            default:
                throw new Error(`Unsupported RIFF format: RIFF/${type}`);
        }
    }
    async readWaveChunk(remaining) {
        while (remaining >= riff.Header.len) {
            const header = await this.tokenizer.readToken(riff.Header);
            remaining -= riff.Header.len + header.chunkSize;
            if (header.chunkSize > remaining) {
                this.metadata.addWarning('Data chunk size exceeds file size');
            }
            this.header = header;
            debug$5(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${header.chunkID}`);
            switch (header.chunkID) {
                case 'LIST':
                    await this.parseListTag(header);
                    break;
                case 'fact': // extended Format chunk,
                    this.metadata.setFormat('lossless', false);
                    this.fact = await this.tokenizer.readToken(new WaveChunk.FactChunk(header));
                    break;
                case 'fmt ': // The Util Chunk, non-PCM Formats
                    const fmt = await this.tokenizer.readToken(new WaveChunk.Format(header));
                    let subFormat = WaveChunk.WaveFormat[fmt.wFormatTag];
                    if (!subFormat) {
                        debug$5('WAVE/non-PCM format=' + fmt.wFormatTag);
                        subFormat = 'non-PCM (' + fmt.wFormatTag + ')';
                    }
                    this.metadata.setFormat('codec', subFormat);
                    this.metadata.setFormat('bitsPerSample', fmt.wBitsPerSample);
                    this.metadata.setFormat('sampleRate', fmt.nSamplesPerSec);
                    this.metadata.setFormat('numberOfChannels', fmt.nChannels);
                    this.metadata.setFormat('bitrate', fmt.nBlockAlign * fmt.nSamplesPerSec * 8);
                    this.blockAlign = fmt.nBlockAlign;
                    break;
                case 'id3 ': // The way Picard, FooBar currently stores, ID3 meta-data
                case 'ID3 ': // The way Mp3Tags stores ID3 meta-data
                    const id3_data = await this.tokenizer.readToken(new Token$4.Uint8ArrayType(header.chunkSize));
                    const rst = strtok3$2.fromBuffer(id3_data);
                    await new ID3v2Parser_1$2.ID3v2Parser().parse(this.metadata, rst, this.options);
                    break;
                case 'data': // PCM-data
                    if (this.metadata.format.lossless !== false) {
                        this.metadata.setFormat('lossless', true);
                    }
                    let chunkSize = header.chunkSize;
                    if (this.tokenizer.fileInfo.size) {
                        const calcRemaining = this.tokenizer.fileInfo.size - this.tokenizer.position;
                        if (calcRemaining < chunkSize) {
                            this.metadata.addWarning('data chunk length exceeding file length');
                            chunkSize = calcRemaining;
                        }
                    }
                    const numberOfSamples = this.fact ? this.fact.dwSampleLength : (chunkSize === 0xffffffff ? undefined : chunkSize / this.blockAlign);
                    if (numberOfSamples) {
                        this.metadata.setFormat('numberOfSamples', numberOfSamples);
                        this.metadata.setFormat('duration', numberOfSamples / this.metadata.format.sampleRate);
                    }
                    if (this.metadata.format.codec === 'ADPCM') { // ADPCM is 4 bits lossy encoding resulting in 352kbps
                        this.metadata.setFormat('bitrate', 352000);
                    }
                    else {
                        this.metadata.setFormat('bitrate', this.blockAlign * this.metadata.format.sampleRate * 8);
                    }
                    await this.tokenizer.ignore(header.chunkSize);
                    break;
                case 'bext': // Broadcast Audio Extension chunk	https://tech.ebu.ch/docs/tech/tech3285.pdf
                    const bext = await this.tokenizer.readToken(BwfChunk_1.BroadcastAudioExtensionChunk);
                    Object.keys(bext).forEach(key => {
                        this.metadata.addTag('exif', 'bext.' + key, bext[key]);
                    });
                    const bextRemaining = header.chunkSize - BwfChunk_1.BroadcastAudioExtensionChunk.len;
                    await this.tokenizer.ignore(bextRemaining);
                    break;
                case '\x00\x00\x00\x00': // padding ??
                    debug$5(`Ignore padding chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);
                    this.metadata.addWarning('Ignore chunk: RIFF/' + header.chunkID);
                    await this.tokenizer.ignore(header.chunkSize);
                    break;
                default:
                    debug$5(`Ignore chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);
                    this.metadata.addWarning('Ignore chunk: RIFF/' + header.chunkID);
                    await this.tokenizer.ignore(header.chunkSize);
            }
            if (this.header.chunkSize % 2 === 1) {
                debug$5('Read odd padding byte'); // https://wiki.multimedia.cx/index.php/RIFF
                await this.tokenizer.ignore(1);
            }
        }
    }
    async parseListTag(listHeader) {
        const listType = await this.tokenizer.readToken(new Token$4.StringType(4, 'binary'));
        debug$5('pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s', this.tokenizer.position, listType);
        switch (listType) {
            case 'INFO':
                return this.parseRiffInfoTags(listHeader.chunkSize - 4);
            case 'adtl':
            default:
                this.metadata.addWarning('Ignore chunk: RIFF/WAVE/LIST/' + listType);
                debug$5('Ignoring chunkID=RIFF/WAVE/LIST/' + listType);
                return this.tokenizer.ignore(listHeader.chunkSize - 4).then();
        }
    }
    async parseRiffInfoTags(chunkSize) {
        while (chunkSize >= 8) {
            const header = await this.tokenizer.readToken(riff.Header);
            const valueToken = new riff.ListInfoTagValue(header);
            const value = await this.tokenizer.readToken(valueToken);
            this.addTag(header.chunkID, util.stripNulls(value));
            chunkSize -= (8 + valueToken.len);
        }
        if (chunkSize !== 0) {
            throw Error('Illegal remaining size: ' + chunkSize);
        }
    }
    addTag(id, value) {
        this.metadata.addTag('exif', id, value);
    }
}
WaveParser$1.WaveParser = WaveParser;

var WavPackParser$1 = {};

var WavPackToken = {};

Object.defineProperty(WavPackToken, "__esModule", { value: true });
WavPackToken.WavPack = void 0;
const Token$3 = lib$1;
const FourCC_1$3 = FourCC;
const SampleRates = [6000, 8000, 9600, 11025, 12000, 16000, 22050, 24000, 32000, 44100,
    48000, 64000, 88200, 96000, 192000, -1];
class WavPack {
    static isBitSet(flags, bitOffset) {
        return WavPack.getBitAllignedNumber(flags, bitOffset, 1) === 1;
    }
    static getBitAllignedNumber(flags, bitOffset, len) {
        return (flags >>> bitOffset) & (0xffffffff >>> (32 - len));
    }
}
/**
 * WavPack Block Header
 *
 * 32-byte little-endian header at the front of every WavPack block
 *
 * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 "Block Header")
 */
WavPack.BlockHeaderToken = {
    len: 32,
    get: (buf, off) => {
        const flags = Token$3.UINT32_LE.get(buf, off + 24);
        const res = {
            // should equal 'wvpk'
            BlockID: FourCC_1$3.FourCcToken.get(buf, off),
            //  0x402 to 0x410 are valid for decode
            blockSize: Token$3.UINT32_LE.get(buf, off + 4),
            //  0x402 (1026) to 0x410 are valid for decode
            version: Token$3.UINT16_LE.get(buf, off + 8),
            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)
            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ Token$3.UINT32_LE.get(buf, off + 12),
            // 40-bit block_index
            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ Token$3.UINT32_LE.get(buf, off + 16),
            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)
            blockSamples: Token$3.UINT32_LE.get(buf, off + 20),
            // various flags for id and decoding
            flags: {
                bitsPerSample: (1 + WavPack.getBitAllignedNumber(flags, 0, 2)) * 8,
                isMono: WavPack.isBitSet(flags, 2),
                isHybrid: WavPack.isBitSet(flags, 3),
                isJointStereo: WavPack.isBitSet(flags, 4),
                crossChannel: WavPack.isBitSet(flags, 5),
                hybridNoiseShaping: WavPack.isBitSet(flags, 6),
                floatingPoint: WavPack.isBitSet(flags, 7),
                samplingRate: SampleRates[WavPack.getBitAllignedNumber(flags, 23, 4)],
                isDSD: WavPack.isBitSet(flags, 31)
            },
            // crc for actual decoded data
            crc: new Token$3.Uint8ArrayType(4).get(buf, off + 28)
        };
        if (res.flags.isDSD) {
            res.totalSamples *= 8;
        }
        return res;
    }
};
/**
 * 3.0 Metadata Sub-Blocks
 * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 "Metadata Sub-Block")
 */
WavPack.MetadataIdToken = {
    len: 1,
    get: (buf, off) => {
        return {
            functionId: WavPack.getBitAllignedNumber(buf[off], 0, 6),
            isOptional: WavPack.isBitSet(buf[off], 5),
            isOddSize: WavPack.isBitSet(buf[off], 6),
            largeBlock: WavPack.isBitSet(buf[off], 7)
        };
    }
};
WavPackToken.WavPack = WavPack;

Object.defineProperty(WavPackParser$1, "__esModule", { value: true });
WavPackParser$1.WavPackParser = void 0;
const Token$2 = lib$1;
const APEv2Parser_1$2 = APEv2Parser$1;
const FourCC_1$2 = FourCC;
const BasicParser_1$2 = BasicParser$1;
const WavPackToken_1 = WavPackToken;
const debug_1$4 = browserExports;
const debug$4 = (0, debug_1$4.default)('music-metadata:parser:WavPack');
/**
 * WavPack Parser
 */
class WavPackParser extends BasicParser_1$2.BasicParser {
    async parse() {
        this.audioDataSize = 0;
        // First parse all WavPack blocks
        await this.parseWavPackBlocks();
        // try to parse APEv2 header
        return APEv2Parser_1$2.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);
    }
    async parseWavPackBlocks() {
        do {
            const blockId = await this.tokenizer.peekToken(FourCC_1$2.FourCcToken);
            if (blockId !== 'wvpk')
                break;
            const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);
            if (header.BlockID !== 'wvpk')
                throw new Error('Invalid WavPack Block-ID');
            debug$4(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);
            if (header.blockIndex === 0 && !this.metadata.format.container) {
                this.metadata.setFormat('container', 'WavPack');
                this.metadata.setFormat('lossless', !header.flags.isHybrid);
                // tagTypes: this.type,
                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);
                if (!header.flags.isDSD) {
                    // In case isDSD, these values will ne set in ID_DSD_BLOCK
                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);
                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);
                }
                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);
                this.metadata.setFormat('numberOfSamples', header.totalSamples);
                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');
            }
            const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);
            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));
            if (header.blockSamples > 0) {
                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation
            }
        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);
        this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);
    }
    /**
     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks
     * @param remainingLength
     */
    async parseMetadataSubBlock(header, remainingLength) {
        while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {
            const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);
            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token$2.UINT24_LE : Token$2.UINT8);
            const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));
            await this.tokenizer.readBuffer(data);
            debug$4(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);
            switch (id.functionId) {
                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks
                    break;
                case 0xe: // ID_DSD_BLOCK
                    debug$4('ID_DSD_BLOCK');
                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813
                    const mp = 1 << data.readUInt8(0);
                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813
                    if (!header.flags.isDSD)
                        throw new Error('Only expect DSD block if DSD-flag is set');
                    this.metadata.setFormat('sampleRate', samplingRate);
                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);
                    break;
                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header
                    debug$4('ID_ALT_TRAILER: trailer for non-wav files');
                    break;
                case 0x26: // ID_MD5_CHECKSUM
                    this.metadata.setFormat('audioMD5', data);
                    break;
                case 0x2f: // ID_BLOCK_CHECKSUM
                    debug$4(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);
                    break;
                default:
                    debug$4(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);
                    break;
            }
            remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token$2.UINT24_LE.len : Token$2.UINT8.len) + dataSizeInWords * 2;
            debug$4(`remainingLength=${remainingLength}`);
            if (id.isOddSize)
                this.tokenizer.ignore(1);
        }
        if (remainingLength !== 0)
            throw new Error('metadata-sub-block should fit it remaining length');
    }
}
WavPackParser$1.WavPackParser = WavPackParser;

var DsfParser$1 = {};

var DsfChunk = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FormatChunk = exports.ChannelType = exports.DsdChunk = exports.ChunkHeader = void 0;
	const Token = lib$1;
	const FourCC_1 = FourCC;
	/**
	 * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size
	 */
	exports.ChunkHeader = {
	    len: 12,
	    get: (buf, off) => {
	        return { id: FourCC_1.FourCcToken.get(buf, off), size: Token.UINT64_LE.get(buf, off + 4) };
	    }
	};
	/**
	 * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size
	 */
	exports.DsdChunk = {
	    len: 16,
	    get: (buf, off) => {
	        return {
	            fileSize: Token.INT64_LE.get(buf, off),
	            metadataPointer: Token.INT64_LE.get(buf, off + 8)
	        };
	    }
	};
	(function (ChannelType) {
	    ChannelType[ChannelType["mono"] = 1] = "mono";
	    ChannelType[ChannelType["stereo"] = 2] = "stereo";
	    ChannelType[ChannelType["channels"] = 3] = "channels";
	    ChannelType[ChannelType["quad"] = 4] = "quad";
	    ChannelType[ChannelType["4 channels"] = 5] = "4 channels";
	    ChannelType[ChannelType["5 channels"] = 6] = "5 channels";
	    ChannelType[ChannelType["5.1 channels"] = 7] = "5.1 channels";
	})(exports.ChannelType || (exports.ChannelType = {}));
	/**
	 * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size
	 */
	exports.FormatChunk = {
	    len: 40,
	    get: (buf, off) => {
	        return {
	            formatVersion: Token.INT32_LE.get(buf, off),
	            formatID: Token.INT32_LE.get(buf, off + 4),
	            channelType: Token.INT32_LE.get(buf, off + 8),
	            channelNum: Token.INT32_LE.get(buf, off + 12),
	            samplingFrequency: Token.INT32_LE.get(buf, off + 16),
	            bitsPerSample: Token.INT32_LE.get(buf, off + 20),
	            sampleCount: Token.INT64_LE.get(buf, off + 24),
	            blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)
	        };
	    }
	}; 
} (DsfChunk));

Object.defineProperty(DsfParser$1, "__esModule", { value: true });
DsfParser$1.DsfParser = void 0;
const debug_1$3 = browserExports;
const AbstractID3Parser_1 = AbstractID3Parser$1;
const DsfChunk_1 = DsfChunk;
const ID3v2Parser_1$1 = ID3v2Parser$1;
const debug$3 = (0, debug_1$3.default)('music-metadata:parser:DSF');
/**
 * DSF (dsd stream file) File Parser
 * Ref: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf
 */
class DsfParser extends AbstractID3Parser_1.AbstractID3Parser {
    async postId3v2Parse() {
        const p0 = this.tokenizer.position; // mark start position, normally 0
        const chunkHeader = await this.tokenizer.readToken(DsfChunk_1.ChunkHeader);
        if (chunkHeader.id !== 'DSD ')
            throw new Error('Invalid chunk signature');
        this.metadata.setFormat('container', 'DSF');
        this.metadata.setFormat('lossless', true);
        const dsdChunk = await this.tokenizer.readToken(DsfChunk_1.DsdChunk);
        if (dsdChunk.metadataPointer === BigInt(0)) {
            debug$3(`No ID3v2 tag present`);
        }
        else {
            debug$3(`expect ID3v2 at offset=${dsdChunk.metadataPointer}`);
            await this.parseChunks(dsdChunk.fileSize - chunkHeader.size);
            // Jump to ID3 header
            await this.tokenizer.ignore(Number(dsdChunk.metadataPointer) - this.tokenizer.position - p0);
            return new ID3v2Parser_1$1.ID3v2Parser().parse(this.metadata, this.tokenizer, this.options);
        }
    }
    async parseChunks(bytesRemaining) {
        while (bytesRemaining >= DsfChunk_1.ChunkHeader.len) {
            const chunkHeader = await this.tokenizer.readToken(DsfChunk_1.ChunkHeader);
            debug$3(`Parsing chunk name=${chunkHeader.id} size=${chunkHeader.size}`);
            switch (chunkHeader.id) {
                case 'fmt ':
                    const formatChunk = await this.tokenizer.readToken(DsfChunk_1.FormatChunk);
                    this.metadata.setFormat('numberOfChannels', formatChunk.channelNum);
                    this.metadata.setFormat('sampleRate', formatChunk.samplingFrequency);
                    this.metadata.setFormat('bitsPerSample', formatChunk.bitsPerSample);
                    this.metadata.setFormat('numberOfSamples', formatChunk.sampleCount);
                    this.metadata.setFormat('duration', Number(formatChunk.sampleCount) / formatChunk.samplingFrequency);
                    const bitrate = formatChunk.bitsPerSample * formatChunk.samplingFrequency * formatChunk.channelNum;
                    this.metadata.setFormat('bitrate', bitrate);
                    return; // We got what we want, stop further processing of chunks
                default:
                    this.tokenizer.ignore(Number(chunkHeader.size) - DsfChunk_1.ChunkHeader.len);
                    break;
            }
            bytesRemaining -= chunkHeader.size;
        }
    }
}
DsfParser$1.DsfParser = DsfParser;

var DsdiffParser$1 = {};

var DsdiffToken = {};

Object.defineProperty(DsdiffToken, "__esModule", { value: true });
DsdiffToken.ChunkHeader64 = void 0;
const Token$1 = lib$1;
const FourCC_1$1 = FourCC;
/**
 * DSDIFF chunk header
 * The data-size encoding is deviating from EA-IFF 85
 * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf
 */
DsdiffToken.ChunkHeader64 = {
    len: 12,
    get: (buf, off) => {
        return {
            // Group-ID
            chunkID: FourCC_1$1.FourCcToken.get(buf, off),
            // Size
            chunkSize: Token$1.INT64_BE.get(buf, off + 4)
        };
    }
};

Object.defineProperty(DsdiffParser$1, "__esModule", { value: true });
DsdiffParser$1.DsdiffParser = void 0;
const Token = lib$1;
const debug_1$2 = browserExports;
const strtok3$1 = core$1;
const FourCC_1 = FourCC;
const BasicParser_1$1 = BasicParser$1;
const ID3v2Parser_1 = ID3v2Parser$1;
const DsdiffToken_1 = DsdiffToken;
const debug$2 = (0, debug_1$2.default)('music-metadata:parser:aiff');
/**
 * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)
 *
 * Ref:
 * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf
 */
class DsdiffParser extends BasicParser_1$1.BasicParser {
    async parse() {
        const header = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);
        if (header.chunkID !== 'FRM8')
            throw new Error('Unexpected chunk-ID');
        const type = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();
        switch (type) {
            case 'DSD':
                this.metadata.setFormat('container', `DSDIFF/${type}`);
                this.metadata.setFormat('lossless', true);
                return this.readFmt8Chunks(header.chunkSize - BigInt(FourCC_1.FourCcToken.len));
            default:
                throw Error(`Unsupported DSDIFF type: ${type}`);
        }
    }
    async readFmt8Chunks(remainingSize) {
        while (remainingSize >= DsdiffToken_1.ChunkHeader64.len) {
            const chunkHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);
            //  If the data is an odd number of bytes in length, a pad byte must be added at the end
            debug$2(`Chunk id=${chunkHeader.chunkID}`);
            await this.readData(chunkHeader);
            remainingSize -= (BigInt(DsdiffToken_1.ChunkHeader64.len) + chunkHeader.chunkSize);
        }
    }
    async readData(header) {
        debug$2(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);
        const p0 = this.tokenizer.position;
        switch (header.chunkID.trim()) {
            case 'FVER': // 3.1 FORMAT VERSION CHUNK
                const version = await this.tokenizer.readToken(Token.UINT32_LE);
                debug$2(`DSDIFF version=${version}`);
                break;
            case 'PROP': // 3.2 PROPERTY CHUNK
                const propType = await this.tokenizer.readToken(FourCC_1.FourCcToken);
                if (propType !== 'SND ')
                    throw new Error('Unexpected PROP-chunk ID');
                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(FourCC_1.FourCcToken.len));
                break;
            case 'ID3': // Unofficial ID3 tag support
                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(Number(header.chunkSize)));
                const rst = strtok3$1.fromBuffer(id3_data);
                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);
                break;
            default:
                debug$2(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);
                break;
            case 'DSD':
                this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));
                this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);
                break;
        }
        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);
        if (remaining > 0) {
            debug$2(`After Parsing chunk, remaining ${remaining} bytes`);
            await this.tokenizer.ignore(Number(remaining));
        }
    }
    async handleSoundPropertyChunks(remainingSize) {
        debug$2(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);
        while (remainingSize > 0) {
            const sndPropHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);
            debug$2(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);
            const p0 = this.tokenizer.position;
            switch (sndPropHeader.chunkID.trim()) {
                case 'FS': // 3.2.1 Sample Rate Chunk
                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);
                    this.metadata.setFormat('sampleRate', sampleRate);
                    break;
                case 'CHNL': // 3.2.2 Channels Chunk
                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);
                    this.metadata.setFormat('numberOfChannels', numChannels);
                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(Token.UINT16_BE.len));
                    break;
                case 'CMPR': // 3.2.3 Compression Type Chunk
                    const compressionIdCode = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();
                    const count = await this.tokenizer.readToken(Token.UINT8);
                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));
                    if (compressionIdCode === 'DSD') {
                        this.metadata.setFormat('lossless', true);
                        this.metadata.setFormat('bitsPerSample', 1);
                    }
                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);
                    break;
                case 'ABSS': // 3.2.4 Absolute Start Time Chunk
                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);
                    const minutes = await this.tokenizer.readToken(Token.UINT8);
                    const seconds = await this.tokenizer.readToken(Token.UINT8);
                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);
                    debug$2(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);
                    break;
                case 'LSCO': // 3.2.5 Loudspeaker Configuration Chunk
                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);
                    debug$2(`LSCO lsConfig=${lsConfig}`);
                    break;
                case 'COMT':
                default:
                    debug$2(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);
                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));
            }
            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);
            if (remaining > 0) {
                debug$2(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);
                await this.tokenizer.ignore(Number(remaining));
            }
            remainingSize -= BigInt(DsdiffToken_1.ChunkHeader64.len) + sndPropHeader.chunkSize;
            debug$2(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);
        }
        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {
            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;
            this.metadata.setFormat('bitrate', bitrate);
        }
    }
    async handleChannelChunks(remainingSize) {
        debug$2(`Parsing channel-chunks, remainingSize=${remainingSize}`);
        const channels = [];
        while (remainingSize >= FourCC_1.FourCcToken.len) {
            const channelId = await this.tokenizer.readToken(FourCC_1.FourCcToken);
            debug$2(`Channel[ID=${channelId}]`);
            channels.push(channelId);
            remainingSize -= BigInt(FourCC_1.FourCcToken.len);
        }
        debug$2(`Channels: ${channels.join(', ')}`);
        return channels;
    }
}
DsdiffParser$1.DsdiffParser = DsdiffParser;

var MatroskaParser$1 = {};

var MatroskaDtd = {};

Object.defineProperty(MatroskaDtd, "__esModule", { value: true });
MatroskaDtd.elements = void 0;
const types_1$1 = types;
/**
 * Elements of document type description
 * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd
 * Extended with:
 * - https://www.matroska.org/technical/specs/index.html
 */
MatroskaDtd.elements = {
    0x1a45dfa3: {
        name: 'ebml',
        container: {
            0x4286: { name: 'ebmlVersion', value: types_1$1.DataType.uint },
            0x42f7: { name: 'ebmlReadVersion', value: types_1$1.DataType.uint },
            0x42f2: { name: 'ebmlMaxIDWidth', value: types_1$1.DataType.uint },
            0x42f3: { name: 'ebmlMaxSizeWidth', value: types_1$1.DataType.uint },
            0x4282: { name: 'docType', value: types_1$1.DataType.string },
            0x4287: { name: 'docTypeVersion', value: types_1$1.DataType.uint },
            0x4285: { name: 'docTypeReadVersion', value: types_1$1.DataType.uint } // 5.1.7
        }
    },
    // Matroska segments
    0x18538067: {
        name: 'segment',
        container: {
            // Meta Seek Information
            0x114d9b74: {
                name: 'seekHead',
                container: {
                    0x4dbb: {
                        name: 'seek',
                        container: {
                            0x53ab: { name: 'seekId', value: types_1$1.DataType.binary },
                            0x53ac: { name: 'seekPosition', value: types_1$1.DataType.uint }
                        }
                    }
                }
            },
            // Segment Information
            0x1549a966: {
                name: 'info',
                container: {
                    0x73a4: { name: 'uid', value: types_1$1.DataType.uid },
                    0x7384: { name: 'filename', value: types_1$1.DataType.string },
                    0x3cb923: { name: 'prevUID', value: types_1$1.DataType.uid },
                    0x3c83ab: { name: 'prevFilename', value: types_1$1.DataType.string },
                    0x3eb923: { name: 'nextUID', value: types_1$1.DataType.uid },
                    0x3e83bb: { name: 'nextFilename', value: types_1$1.DataType.string },
                    0x2ad7b1: { name: 'timecodeScale', value: types_1$1.DataType.uint },
                    0x4489: { name: 'duration', value: types_1$1.DataType.float },
                    0x4461: { name: 'dateUTC', value: types_1$1.DataType.uint },
                    0x7ba9: { name: 'title', value: types_1$1.DataType.string },
                    0x4d80: { name: 'muxingApp', value: types_1$1.DataType.string },
                    0x5741: { name: 'writingApp', value: types_1$1.DataType.string }
                }
            },
            // Cluster
            0x1f43b675: {
                name: 'cluster',
                multiple: true,
                container: {
                    0xe7: { name: 'timecode', value: types_1$1.DataType.uid },
                    0xa3: { name: 'unknown', value: types_1$1.DataType.binary },
                    0xa7: { name: 'position', value: types_1$1.DataType.uid },
                    0xab: { name: 'prevSize', value: types_1$1.DataType.uid }
                }
            },
            // Track
            0x1654ae6b: {
                name: 'tracks',
                container: {
                    0xae: {
                        name: 'entries',
                        multiple: true,
                        container: {
                            0xd7: { name: 'trackNumber', value: types_1$1.DataType.uint },
                            0x73c5: { name: 'uid', value: types_1$1.DataType.uid },
                            0x83: { name: 'trackType', value: types_1$1.DataType.uint },
                            0xb9: { name: 'flagEnabled', value: types_1$1.DataType.bool },
                            0x88: { name: 'flagDefault', value: types_1$1.DataType.bool },
                            0x55aa: { name: 'flagForced', value: types_1$1.DataType.bool },
                            0x9c: { name: 'flagLacing', value: types_1$1.DataType.bool },
                            0x6de7: { name: 'minCache', value: types_1$1.DataType.uint },
                            0x6de8: { name: 'maxCache', value: types_1$1.DataType.uint },
                            0x23e383: { name: 'defaultDuration', value: types_1$1.DataType.uint },
                            0x23314f: { name: 'timecodeScale', value: types_1$1.DataType.float },
                            0x536e: { name: 'name', value: types_1$1.DataType.string },
                            0x22b59c: { name: 'language', value: types_1$1.DataType.string },
                            0x86: { name: 'codecID', value: types_1$1.DataType.string },
                            0x63a2: { name: 'codecPrivate', value: types_1$1.DataType.binary },
                            0x258688: { name: 'codecName', value: types_1$1.DataType.string },
                            0x3a9697: { name: 'codecSettings', value: types_1$1.DataType.string },
                            0x3b4040: { name: 'codecInfoUrl', value: types_1$1.DataType.string },
                            0x26b240: { name: 'codecDownloadUrl', value: types_1$1.DataType.string },
                            0xaa: { name: 'codecDecodeAll', value: types_1$1.DataType.bool },
                            0x6fab: { name: 'trackOverlay', value: types_1$1.DataType.uint },
                            // Video
                            0xe0: {
                                name: 'video',
                                container: {
                                    0x9a: { name: 'flagInterlaced', value: types_1$1.DataType.bool },
                                    0x53b8: { name: 'stereoMode', value: types_1$1.DataType.uint },
                                    0xb0: { name: 'pixelWidth', value: types_1$1.DataType.uint },
                                    0xba: { name: 'pixelHeight', value: types_1$1.DataType.uint },
                                    0x54b0: { name: 'displayWidth', value: types_1$1.DataType.uint },
                                    0x54ba: { name: 'displayHeight', value: types_1$1.DataType.uint },
                                    0x54b3: { name: 'aspectRatioType', value: types_1$1.DataType.uint },
                                    0x2eb524: { name: 'colourSpace', value: types_1$1.DataType.uint },
                                    0x2fb523: { name: 'gammaValue', value: types_1$1.DataType.float }
                                }
                            },
                            // Audio
                            0xe1: {
                                name: 'audio',
                                container: {
                                    0xb5: { name: 'samplingFrequency', value: types_1$1.DataType.float },
                                    0x78b5: { name: 'outputSamplingFrequency', value: types_1$1.DataType.float },
                                    0x9f: { name: 'channels', value: types_1$1.DataType.uint },
                                    0x94: { name: 'channels', value: types_1$1.DataType.uint },
                                    0x7d7b: { name: 'channelPositions', value: types_1$1.DataType.binary },
                                    0x6264: { name: 'bitDepth', value: types_1$1.DataType.uint }
                                }
                            },
                            // Content Encoding
                            0x6d80: {
                                name: 'contentEncodings',
                                container: {
                                    0x6240: {
                                        name: 'contentEncoding',
                                        container: {
                                            0x5031: { name: 'order', value: types_1$1.DataType.uint },
                                            0x5032: { name: 'scope', value: types_1$1.DataType.bool },
                                            0x5033: { name: 'type', value: types_1$1.DataType.uint },
                                            0x5034: {
                                                name: 'contentEncoding',
                                                container: {
                                                    0x4254: { name: 'contentCompAlgo', value: types_1$1.DataType.uint },
                                                    0x4255: { name: 'contentCompSettings', value: types_1$1.DataType.binary }
                                                }
                                            },
                                            0x5035: {
                                                name: 'contentEncoding',
                                                container: {
                                                    0x47e1: { name: 'contentEncAlgo', value: types_1$1.DataType.uint },
                                                    0x47e2: { name: 'contentEncKeyID', value: types_1$1.DataType.binary },
                                                    0x47e3: { name: 'contentSignature ', value: types_1$1.DataType.binary },
                                                    0x47e4: { name: 'ContentSigKeyID  ', value: types_1$1.DataType.binary },
                                                    0x47e5: { name: 'contentSigAlgo ', value: types_1$1.DataType.uint },
                                                    0x47e6: { name: 'contentSigHashAlgo ', value: types_1$1.DataType.uint }
                                                }
                                            },
                                            0x6264: { name: 'bitDepth', value: types_1$1.DataType.uint }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            // Cueing Data
            0x1c53bb6b: {
                name: 'cues',
                container: {
                    0xbb: {
                        name: 'cuePoint',
                        container: {
                            0xb3: { name: 'cueTime', value: types_1$1.DataType.uid },
                            0xb7: {
                                name: 'positions',
                                container: {
                                    0xf7: { name: 'track', value: types_1$1.DataType.uint },
                                    0xf1: { name: 'clusterPosition', value: types_1$1.DataType.uint },
                                    0x5378: { name: 'blockNumber', value: types_1$1.DataType.uint },
                                    0xea: { name: 'codecState', value: types_1$1.DataType.uint },
                                    0xdb: {
                                        name: 'reference', container: {
                                            0x96: { name: 'time', value: types_1$1.DataType.uint },
                                            0x97: { name: 'cluster', value: types_1$1.DataType.uint },
                                            0x535f: { name: 'number', value: types_1$1.DataType.uint },
                                            0xeb: { name: 'codecState', value: types_1$1.DataType.uint }
                                        }
                                    },
                                    0xf0: { name: 'relativePosition', value: types_1$1.DataType.uint } // extended
                                }
                            }
                        }
                    }
                }
            },
            // Attachment
            0x1941a469: {
                name: 'attachments',
                container: {
                    0x61a7: {
                        name: 'attachedFiles',
                        multiple: true,
                        container: {
                            0x467e: { name: 'description', value: types_1$1.DataType.string },
                            0x466e: { name: 'name', value: types_1$1.DataType.string },
                            0x4660: { name: 'mimeType', value: types_1$1.DataType.string },
                            0x465c: { name: 'data', value: types_1$1.DataType.binary },
                            0x46ae: { name: 'uid', value: types_1$1.DataType.uid }
                        }
                    }
                }
            },
            // Chapters
            0x1043a770: {
                name: 'chapters',
                container: {
                    0x45b9: {
                        name: 'editionEntry',
                        container: {
                            0xb6: {
                                name: 'chapterAtom',
                                container: {
                                    0x73c4: { name: 'uid', value: types_1$1.DataType.uid },
                                    0x91: { name: 'timeStart', value: types_1$1.DataType.uint },
                                    0x92: { name: 'timeEnd', value: types_1$1.DataType.uid },
                                    0x98: { name: 'hidden', value: types_1$1.DataType.bool },
                                    0x4598: { name: 'enabled', value: types_1$1.DataType.uid },
                                    0x8f: { name: 'track', container: {
                                            0x89: { name: 'trackNumber', value: types_1$1.DataType.uid },
                                            0x80: {
                                                name: 'display', container: {
                                                    0x85: { name: 'string', value: types_1$1.DataType.string },
                                                    0x437c: { name: 'language ', value: types_1$1.DataType.string },
                                                    0x437e: { name: 'country ', value: types_1$1.DataType.string }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            // Tagging
            0x1254c367: {
                name: 'tags',
                container: {
                    0x7373: {
                        name: 'tag',
                        multiple: true,
                        container: {
                            0x63c0: {
                                name: 'target',
                                container: {
                                    0x63c5: { name: 'tagTrackUID', value: types_1$1.DataType.uid },
                                    0x63c4: { name: 'tagChapterUID', value: types_1$1.DataType.uint },
                                    0x63c6: { name: 'tagAttachmentUID', value: types_1$1.DataType.uid },
                                    0x63ca: { name: 'targetType', value: types_1$1.DataType.string },
                                    0x68ca: { name: 'targetTypeValue', value: types_1$1.DataType.uint },
                                    0x63c9: { name: 'tagEditionUID', value: types_1$1.DataType.uid } // extended
                                }
                            },
                            0x67c8: {
                                name: 'simpleTags',
                                multiple: true,
                                container: {
                                    0x45a3: { name: 'name', value: types_1$1.DataType.string },
                                    0x4487: { name: 'string', value: types_1$1.DataType.string },
                                    0x4485: { name: 'binary', value: types_1$1.DataType.binary },
                                    0x447a: { name: 'language', value: types_1$1.DataType.string },
                                    0x447b: { name: 'languageIETF', value: types_1$1.DataType.string },
                                    0x4484: { name: 'default', value: types_1$1.DataType.bool } // extended
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};

Object.defineProperty(MatroskaParser$1, "__esModule", { value: true });
MatroskaParser$1.MatroskaParser = void 0;
const token_types_1 = lib$1;
const debug_1$1 = browserExports;
const BasicParser_1 = BasicParser$1;
const types_1 = types;
const matroskaDtd = MatroskaDtd;
const debug$1 = (0, debug_1$1.default)('music-metadata:parser:matroska');
/**
 * Extensible Binary Meta Language (EBML) parser
 * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language
 * http://matroska.sourceforge.net/technical/specs/rfc/index.html
 *
 * WEBM VP8 AUDIO FILE
 */
class MatroskaParser extends BasicParser_1.BasicParser {
    constructor() {
        super();
        this.padding = 0;
        this.parserMap = new Map();
        this.ebmlMaxIDLength = 4;
        this.ebmlMaxSizeLength = 8;
        this.parserMap.set(types_1.DataType.uint, e => this.readUint(e));
        this.parserMap.set(types_1.DataType.string, e => this.readString(e));
        this.parserMap.set(types_1.DataType.binary, e => this.readBuffer(e));
        this.parserMap.set(types_1.DataType.uid, async (e) => await this.readUint(e) === 1);
        this.parserMap.set(types_1.DataType.bool, e => this.readFlag(e));
        this.parserMap.set(types_1.DataType.float, e => this.readFloat(e));
    }
    /**
     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).
     * @param {INativeMetadataCollector} metadata Output
     * @param {ITokenizer} tokenizer Input
     * @param {IOptions} options Parsing options
     */
    init(metadata, tokenizer, options) {
        super.init(metadata, tokenizer, options);
        return this;
    }
    async parse() {
        const matroska = await this.parseContainer(matroskaDtd.elements, this.tokenizer.fileInfo.size, []);
        this.metadata.setFormat('container', `EBML/${matroska.ebml.docType}`);
        if (matroska.segment) {
            const info = matroska.segment.info;
            if (info) {
                const timecodeScale = info.timecodeScale ? info.timecodeScale : 1000000;
                if (typeof info.duration === 'number') {
                    const duration = info.duration * timecodeScale / 1000000000;
                    this.addTag('segment:title', info.title);
                    this.metadata.setFormat('duration', duration);
                }
            }
            const audioTracks = matroska.segment.tracks;
            if (audioTracks && audioTracks.entries) {
                audioTracks.entries.forEach(entry => {
                    const stream = {
                        codecName: entry.codecID.replace('A_', '').replace('V_', ''),
                        codecSettings: entry.codecSettings,
                        flagDefault: entry.flagDefault,
                        flagLacing: entry.flagLacing,
                        flagEnabled: entry.flagEnabled,
                        language: entry.language,
                        name: entry.name,
                        type: entry.trackType,
                        audio: entry.audio,
                        video: entry.video
                    };
                    this.metadata.addStreamInfo(stream);
                });
                const audioTrack = audioTracks.entries
                    .filter(entry => {
                    return entry.trackType === types_1.TrackType.audio.valueOf();
                })
                    .reduce((acc, cur) => {
                    if (!acc) {
                        return cur;
                    }
                    if (!acc.flagDefault && cur.flagDefault) {
                        return cur;
                    }
                    if (cur.trackNumber && cur.trackNumber < acc.trackNumber) {
                        return cur;
                    }
                    return acc;
                }, null);
                if (audioTrack) {
                    this.metadata.setFormat('codec', audioTrack.codecID.replace('A_', ''));
                    this.metadata.setFormat('sampleRate', audioTrack.audio.samplingFrequency);
                    this.metadata.setFormat('numberOfChannels', audioTrack.audio.channels);
                }
                if (matroska.segment.tags) {
                    matroska.segment.tags.tag.forEach(tag => {
                        const target = tag.target;
                        const targetType = (target === null || target === void 0 ? void 0 : target.targetTypeValue) ? types_1.TargetType[target.targetTypeValue] : ((target === null || target === void 0 ? void 0 : target.targetType) ? target.targetType : 'track');
                        tag.simpleTags.forEach(simpleTag => {
                            const value = simpleTag.string ? simpleTag.string : simpleTag.binary;
                            this.addTag(`${targetType}:${simpleTag.name}`, value);
                        });
                    });
                }
                if (matroska.segment.attachments) {
                    matroska.segment.attachments.attachedFiles
                        .filter(file => file.mimeType.startsWith('image/'))
                        .map(file => {
                        return {
                            data: file.data,
                            format: file.mimeType,
                            description: file.description,
                            name: file.name
                        };
                    }).forEach(picture => {
                        this.addTag('picture', picture);
                    });
                }
            }
        }
    }
    async parseContainer(container, posDone, path) {
        const tree = {};
        while (this.tokenizer.position < posDone) {
            let element;
            try {
                element = await this.readElement();
            }
            catch (error) {
                if (error.message === 'End-Of-Stream') {
                    break;
                }
                throw error;
            }
            const type = container[element.id];
            if (type) {
                debug$1(`Element: name=${type.name}, container=${!!type.container}`);
                if (type.container) {
                    const res = await this.parseContainer(type.container, element.len >= 0 ? this.tokenizer.position + element.len : -1, path.concat([type.name]));
                    if (type.multiple) {
                        if (!tree[type.name]) {
                            tree[type.name] = [];
                        }
                        tree[type.name].push(res);
                    }
                    else {
                        tree[type.name] = res;
                    }
                }
                else {
                    tree[type.name] = await this.parserMap.get(type.value)(element);
                }
            }
            else {
                switch (element.id) {
                    case 0xec: // void
                        this.padding += element.len;
                        await this.tokenizer.ignore(element.len);
                        break;
                    default:
                        debug$1(`parseEbml: path=${path.join('/')}, unknown element: id=${element.id.toString(16)}`);
                        this.padding += element.len;
                        await this.tokenizer.ignore(element.len);
                }
            }
        }
        return tree;
    }
    async readVintData(maxLength) {
        const msb = await this.tokenizer.peekNumber(token_types_1.UINT8);
        let mask = 0x80;
        let oc = 1;
        // Calculate VINT_WIDTH
        while ((msb & mask) === 0) {
            if (oc > maxLength) {
                throw new Error('VINT value exceeding maximum size');
            }
            ++oc;
            mask >>= 1;
        }
        const id = Buffer.alloc(oc);
        await this.tokenizer.readBuffer(id);
        return id;
    }
    async readElement() {
        const id = await this.readVintData(this.ebmlMaxIDLength);
        const lenField = await this.readVintData(this.ebmlMaxSizeLength);
        lenField[0] ^= 0x80 >> (lenField.length - 1);
        const nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer
        return {
            id: id.readUIntBE(0, id.length),
            len: lenField.readUIntBE(lenField.length - nrLen, nrLen)
        };
    }
    isMaxValue(vintData) {
        if (vintData.length === this.ebmlMaxSizeLength) {
            for (let n = 1; n < this.ebmlMaxSizeLength; ++n) {
                if (vintData[n] !== 0xff)
                    return false;
            }
            return true;
        }
        return false;
    }
    async readFloat(e) {
        switch (e.len) {
            case 0:
                return 0.0;
            case 4:
                return this.tokenizer.readNumber(token_types_1.Float32_BE);
            case 8:
                return this.tokenizer.readNumber(token_types_1.Float64_BE);
            case 10:
                return this.tokenizer.readNumber(token_types_1.Float64_BE);
            default:
                throw new Error(`Invalid IEEE-754 float length: ${e.len}`);
        }
    }
    async readFlag(e) {
        return (await this.readUint(e)) === 1;
    }
    async readUint(e) {
        const buf = await this.readBuffer(e);
        const nrLen = Math.min(6, e.len); // JavaScript can max read 6 bytes integer
        return buf.readUIntBE(e.len - nrLen, nrLen);
    }
    async readString(e) {
        const rawString = await this.tokenizer.readToken(new token_types_1.StringType(e.len, 'utf-8'));
        return rawString.replace(/\00.*$/g, '');
    }
    async readBuffer(e) {
        const buf = Buffer.alloc(e.len);
        await this.tokenizer.readBuffer(buf);
        return buf;
    }
    addTag(tagId, value) {
        this.metadata.addTag('matroska', tagId, value);
    }
}
MatroskaParser$1.MatroskaParser = MatroskaParser;

Object.defineProperty(ParserFactory$1, "__esModule", { value: true });
ParserFactory$1.ParserFactory = ParserFactory$1.parseHttpContentType = void 0;
const FileType = core;
const ContentType = contentType;
const MimeType = mediaTyper;
const debug_1 = browserExports;
const MetadataCollector_1 = MetadataCollector$1;
const AiffParser_1 = AiffParser;
const APEv2Parser_1$1 = APEv2Parser$1;
const AsfParser_1 = AsfParser$1;
const FlacParser_1 = FlacParser$1;
const MP4Parser_1 = MP4Parser$1;
const MpegParser_1 = MpegParser$1;
const musepack_1 = musepack;
const OggParser_1 = OggParser$1;
const WaveParser_1 = WaveParser$1;
const WavPackParser_1 = WavPackParser$1;
const DsfParser_1 = DsfParser$1;
const DsdiffParser_1 = DsdiffParser$1;
const MatroskaParser_1 = MatroskaParser$1;
const debug = (0, debug_1.default)('music-metadata:parser:factory');
function parseHttpContentType(contentType) {
    const type = ContentType.parse(contentType);
    const mime = MimeType.parse(type.type);
    return {
        type: mime.type,
        subtype: mime.subtype,
        suffix: mime.suffix,
        parameters: type.parameters
    };
}
ParserFactory$1.parseHttpContentType = parseHttpContentType;
async function parse(tokenizer, parserId, opts = {}) {
    // Parser found, execute parser
    const parser = await ParserFactory.loadParser(parserId);
    const metadata = new MetadataCollector_1.MetadataCollector(opts);
    await parser.init(metadata, tokenizer, opts).parse();
    return metadata.toCommonMetadata();
}
class ParserFactory {
    /**
     * Parse metadata from tokenizer
     * @param tokenizer - Tokenizer
     * @param opts - Options
     * @returns Native metadata
     */
    static async parseOnContentType(tokenizer, opts) {
        const { mimeType, path, url } = await tokenizer.fileInfo;
        // Resolve parser based on MIME-type or file extension
        const parserId = ParserFactory.getParserIdForMimeType(mimeType) || ParserFactory.getParserIdForExtension(path) || ParserFactory.getParserIdForExtension(url);
        if (!parserId) {
            debug('No parser found for MIME-type / extension: ' + mimeType);
        }
        return this.parse(tokenizer, parserId, opts);
    }
    static async parse(tokenizer, parserId, opts) {
        if (!parserId) {
            // Parser could not be determined on MIME-type or extension
            debug('Guess parser on content...');
            const buf = Buffer.alloc(4100);
            await tokenizer.peekBuffer(buf, { mayBeLess: true });
            if (tokenizer.fileInfo.path) {
                parserId = this.getParserIdForExtension(tokenizer.fileInfo.path);
            }
            if (!parserId) {
                const guessedType = await FileType.fromBuffer(buf);
                if (!guessedType) {
                    throw new Error('Failed to determine audio format');
                }
                debug(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);
                parserId = ParserFactory.getParserIdForMimeType(guessedType.mime);
                if (!parserId) {
                    throw new Error('Guessed MIME-type not supported: ' + guessedType.mime);
                }
            }
        }
        // Parser found, execute parser
        return parse(tokenizer, parserId, opts);
    }
    /**
     * @param filePath - Path, filename or extension to audio file
     * @return Parser sub-module name
     */
    static getParserIdForExtension(filePath) {
        if (!filePath)
            return;
        const extension = this.getExtension(filePath).toLocaleLowerCase() || filePath;
        switch (extension) {
            case '.mp2':
            case '.mp3':
            case '.m2a':
            case '.aac': // Assume it is ADTS-container
                return 'mpeg';
            case '.ape':
                return 'apev2';
            case '.mp4':
            case '.m4a':
            case '.m4b':
            case '.m4pa':
            case '.m4v':
            case '.m4r':
            case '.3gp':
                return 'mp4';
            case '.wma':
            case '.wmv':
            case '.asf':
                return 'asf';
            case '.flac':
                return 'flac';
            case '.ogg':
            case '.ogv':
            case '.oga':
            case '.ogm':
            case '.ogx':
            case '.opus': // recommended filename extension for Ogg Opus
            case '.spx': // recommended filename extension for Ogg Speex
                return 'ogg';
            case '.aif':
            case '.aiff':
            case '.aifc':
                return 'aiff';
            case '.wav':
            case '.bwf': // Broadcast Wave Format
                return 'riff';
            case '.wv':
            case '.wvp':
                return 'wavpack';
            case '.mpc':
                return 'musepack';
            case '.dsf':
                return 'dsf';
            case '.dff':
                return 'dsdiff';
            case '.mka':
            case '.mkv':
            case '.mk3d':
            case '.mks':
            case '.webm':
                return 'matroska';
        }
    }
    static async loadParser(moduleName) {
        switch (moduleName) {
            case 'aiff': return new AiffParser_1.AIFFParser();
            case 'adts':
            case 'mpeg':
                return new MpegParser_1.MpegParser();
            case 'apev2': return new APEv2Parser_1$1.APEv2Parser();
            case 'asf': return new AsfParser_1.AsfParser();
            case 'dsf': return new DsfParser_1.DsfParser();
            case 'dsdiff': return new DsdiffParser_1.DsdiffParser();
            case 'flac': return new FlacParser_1.FlacParser();
            case 'mp4': return new MP4Parser_1.MP4Parser();
            case 'musepack': return new musepack_1.default();
            case 'ogg': return new OggParser_1.OggParser();
            case 'riff': return new WaveParser_1.WaveParser();
            case 'wavpack': return new WavPackParser_1.WavPackParser();
            case 'matroska': return new MatroskaParser_1.MatroskaParser();
            default:
                throw new Error(`Unknown parser type: ${moduleName}`);
        }
    }
    static getExtension(fname) {
        const i = fname.lastIndexOf('.');
        return i === -1 ? '' : fname.slice(i);
    }
    /**
     * @param httpContentType - HTTP Content-Type, extension, path or filename
     * @returns Parser sub-module name
     */
    static getParserIdForMimeType(httpContentType) {
        let mime;
        try {
            mime = parseHttpContentType(httpContentType);
        }
        catch (err) {
            debug(`Invalid HTTP Content-Type header value: ${httpContentType}`);
            return;
        }
        const subType = mime.subtype.indexOf('x-') === 0 ? mime.subtype.substring(2) : mime.subtype;
        switch (mime.type) {
            case 'audio':
                switch (subType) {
                    case 'mp3': // Incorrect MIME-type, Chrome, in Web API File object
                    case 'mpeg':
                        return 'mpeg';
                    case 'aac':
                    case 'aacp':
                        return 'adts';
                    case 'flac':
                        return 'flac';
                    case 'ape':
                    case 'monkeys-audio':
                        return 'apev2';
                    case 'mp4':
                    case 'm4a':
                        return 'mp4';
                    case 'ogg': // RFC 7845
                    case 'opus': // RFC 6716
                    case 'speex': // RFC 5574
                        return 'ogg';
                    case 'ms-wma':
                    case 'ms-wmv':
                    case 'ms-asf':
                        return 'asf';
                    case 'aiff':
                    case 'aif':
                    case 'aifc':
                        return 'aiff';
                    case 'vnd.wave':
                    case 'wav':
                    case 'wave':
                        return 'riff';
                    case 'wavpack':
                        return 'wavpack';
                    case 'musepack':
                        return 'musepack';
                    case 'matroska':
                    case 'webm':
                        return 'matroska';
                    case 'dsf':
                        return 'dsf';
                }
                break;
            case 'video':
                switch (subType) {
                    case 'ms-asf':
                    case 'ms-wmv':
                        return 'asf';
                    case 'm4v':
                    case 'mp4':
                        return 'mp4';
                    case 'ogg':
                        return 'ogg';
                    case 'matroska':
                    case 'webm':
                        return 'matroska';
                }
                break;
            case 'application':
                switch (subType) {
                    case 'vnd.ms-asf':
                        return 'asf';
                    case 'ogg':
                        return 'ogg';
                }
                break;
        }
    }
}
ParserFactory$1.ParserFactory = ParserFactory;

var RandomUint8ArrayReader$1 = {};

Object.defineProperty(RandomUint8ArrayReader$1, "__esModule", { value: true });
RandomUint8ArrayReader$1.RandomUint8ArrayReader = void 0;
/**
 * Provides abstract Uint8Array access via the IRandomRead interface
 */
class RandomUint8ArrayReader {
    constructor(uint8Array) {
        this.uint8Array = uint8Array;
        this.fileSize = uint8Array.length;
    }
    /**
     * Read from a given position of an abstracted file or buffer.
     * @param uint8Array - Uint8Array that the data will be written to.
     * @param offset - Offset in the buffer to start writing at.
     * @param length - Integer specifying the number of bytes to read.
     * @param position - Specifies where to begin reading from in the file.
     * @return Promise providing bytes read
     */
    async randomRead(uint8Array, offset, length, position) {
        uint8Array.set(this.uint8Array.subarray(position, position + length), offset);
        return length;
    }
}
RandomUint8ArrayReader$1.RandomUint8ArrayReader = RandomUint8ArrayReader;

var Lyrics3 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getLyricsHeaderLength = exports.endTag2 = void 0;
	exports.endTag2 = 'LYRICS200';
	async function getLyricsHeaderLength(reader) {
	    if (reader.fileSize >= 143) {
	        const buf = Buffer.alloc(15);
	        await reader.randomRead(buf, 0, buf.length, reader.fileSize - 143);
	        const txt = buf.toString('binary');
	        const tag = txt.substr(6);
	        if (tag === exports.endTag2) {
	            return parseInt(txt.substr(0, 6), 10) + 15;
	        }
	    }
	    return 0;
	}
	exports.getLyricsHeaderLength = getLyricsHeaderLength; 
} (Lyrics3));

Object.defineProperty(core$2, "__esModule", { value: true });
core$2.scanAppendingHeaders = core$2.selectCover = core$2.ratingToStars = core$2.orderTags = core$2.parseFromTokenizer = core$2.parseBuffer = core$2.parseStream = void 0;
const strtok3 = core$1;
const ParserFactory_1 = ParserFactory$1;
const RandomUint8ArrayReader_1 = RandomUint8ArrayReader$1;
const APEv2Parser_1 = APEv2Parser$1;
const ID3v1Parser_1 = ID3v1Parser;
const Lyrics3_1 = Lyrics3;
/**
 * Parse audio from Node Stream.Readable
 * @param stream - Stream to read the audio track from
 * @param options - Parsing options
 * @param fileInfo - File information object or MIME-type string
 * @returns Metadata
 */
function parseStream(stream, fileInfo, options = {}) {
    return parseFromTokenizer(strtok3.fromStream(stream, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo), options);
}
core$2.parseStream = parseStream;
/**
 * Parse audio from Node Buffer
 * @param uint8Array - Uint8Array holding audio data
 * @param fileInfo - File information object or MIME-type string
 * @param options - Parsing options
 * @returns Metadata
 * Ref: https://github.com/Borewit/strtok3/blob/e6938c81ff685074d5eb3064a11c0b03ca934c1d/src/index.ts#L15
 */
async function parseBuffer(uint8Array, fileInfo, options = {}) {
    const bufferReader = new RandomUint8ArrayReader_1.RandomUint8ArrayReader(uint8Array);
    await scanAppendingHeaders(bufferReader, options);
    const tokenizer = strtok3.fromBuffer(uint8Array, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo);
    return parseFromTokenizer(tokenizer, options);
}
core$2.parseBuffer = parseBuffer;
/**
 * Parse audio from ITokenizer source
 * @param tokenizer - Audio source implementing the tokenizer interface
 * @param options - Parsing options
 * @returns Metadata
 */
function parseFromTokenizer(tokenizer, options) {
    return ParserFactory_1.ParserFactory.parseOnContentType(tokenizer, options);
}
core$2.parseFromTokenizer = parseFromTokenizer;
/**
 * Create a dictionary ordered by their tag id (key)
 * @param nativeTags list of tags
 * @returns tags indexed by id
 */
function orderTags(nativeTags) {
    const tags = {};
    for (const tag of nativeTags) {
        (tags[tag.id] = (tags[tag.id] || [])).push(tag.value);
    }
    return tags;
}
core$2.orderTags = orderTags;
/**
 * Convert rating to 1-5 star rating
 * @param rating: Normalized rating [0..1] (common.rating[n].rating)
 * @returns Number of stars: 1, 2, 3, 4 or 5 stars
 */
function ratingToStars(rating) {
    return rating === undefined ? 0 : 1 + Math.round(rating * 4);
}
core$2.ratingToStars = ratingToStars;
/**
 * Select most likely cover image.
 * @param pictures Usually metadata.common.picture
 * @return Cover image, if any, otherwise null
 */
function selectCover(pictures) {
    return pictures ? pictures.reduce((acc, cur) => {
        if (cur.name && cur.name.toLowerCase() in ['front', 'cover', 'cover (front)'])
            return cur;
        return acc;
    }) : null;
}
core$2.selectCover = selectCover;
async function scanAppendingHeaders(randomReader, options = {}) {
    let apeOffset = randomReader.fileSize;
    if (await (0, ID3v1Parser_1.hasID3v1Header)(randomReader)) {
        apeOffset -= 128;
        const lyricsLen = await (0, Lyrics3_1.getLyricsHeaderLength)(randomReader);
        apeOffset -= lyricsLen;
    }
    options.apeHeader = await APEv2Parser_1.APEv2Parser.findApeFooterOffset(randomReader, apeOffset);
}
core$2.scanAppendingHeaders = scanAppendingHeaders;

var lib = {};

var readableBrowser = {exports: {}};

var domain;

// This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).
function EventHandlers() {}
EventHandlers.prototype = Object.create(null);

function EventEmitter() {
  EventEmitter.init.call(this);
}

// nodejs oddity
// require('events') === require('events').EventEmitter
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.usingDomains = false;

EventEmitter.prototype.domain = undefined;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

EventEmitter.init = function() {
  this.domain = null;
  if (EventEmitter.usingDomains) {
    // if there is an active domain, then attach to it.
    if (domain.active ) ;
  }

  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events, domain;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  domain = this.domain;

  // If there is no 'error' event listener then throw.
  if (doError) {
    er = arguments[1];
    if (domain) {
      if (!er)
        er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain;
      er.domainThrown = false;
      domain.emit('error', er);
    } else if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] :
                                          [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' ' + type + ' listeners added. ' +
                            'Use emitter.setMaxListeners() to increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }

  return target;
}
function emitWarning(e) {
  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function _onceWrap(target, type, listener) {
  var fired = false;
  function g() {
    target.removeListener(type, g);
    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }
  g.listener = listener;
  return g;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || (list.listener && list.listener === listener)) {
        if (--this._eventsCount === 0)
          this._events = new EventHandlers();
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length; i-- > 0;) {
          if (list[i] === listener ||
              (list[i].listener && list[i].listener === listener)) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (list.length === 1) {
          list[0] = undefined;
          if (--this._eventsCount === 0) {
            this._events = new EventHandlers();
            return this;
          } else {
            delete events[type];
          }
        } else {
          spliceOne(list, position);
        }

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };
    
// Alias for removeListener added in NodeJS 10.0
// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
EventEmitter.prototype.off = function(type, listener){
    return this.removeListener(type, listener);
};

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = new EventHandlers();
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        for (var i = 0, key; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = new EventHandlers();
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        do {
          this.removeListener(type, listeners[listeners.length - 1]);
        } while (listeners[0]);
      }

      return this;
    };

EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;

  if (!events)
    ret = [];
  else {
    evlistener = events[type];
    if (!evlistener)
      ret = [];
    else if (typeof evlistener === 'function')
      ret = [evlistener.listener || evlistener];
    else
      ret = unwrapListeners(evlistener);
  }

  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, i) {
  var copy = new Array(i);
  while (i--)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

var _polyfillNode_events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EventEmitter: EventEmitter,
    default: EventEmitter
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_events);

var streamBrowser;
var hasRequiredStreamBrowser;

function requireStreamBrowser () {
	if (hasRequiredStreamBrowser) return streamBrowser;
	hasRequiredStreamBrowser = 1;
	streamBrowser = require$$0.EventEmitter;
	return streamBrowser;
}

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init () {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}

function toByteArray (b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = (tmp >> 16) & 0xFF;
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[(tmp << 4) & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
    output += lookup[tmp >> 10];
    output += lookup[(tmp >> 4) & 0x3F];
    output += lookup[(tmp << 2) & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('')
}

function read (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

function write (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;

var isArray$1 = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */


var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer$1.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : true;

/*
 * Export kMaxLength after typed array support is determined.
 */
var _kMaxLength = kMaxLength();

function kMaxLength () {
  return Buffer$1.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer$1.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer$1(length);
    }
    that.length = length;
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer$1 (arg, encodingOrOffset, length) {
  if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
    return new Buffer$1(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer$1.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer$1._augment = function (arr) {
  arr.__proto__ = Buffer$1.prototype;
  return arr
};

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer$1.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
};

if (Buffer$1.TYPED_ARRAY_SUPPORT) {
  Buffer$1.prototype.__proto__ = Uint8Array.prototype;
  Buffer$1.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer$1[Symbol.species] === Buffer$1) ;
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer$1.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
};

function allocUnsafe (that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer$1.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer$1.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
};

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer$1.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer$1.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that
}

function fromObject (that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len);
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer$1.alloc(+length)
}
Buffer$1.isBuffer = isBuffer$1;
function internalIsBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer$1.compare = function compare (a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

Buffer$1.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer$1.concat = function concat (list, length) {
  if (!isArray$1(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer$1.alloc(0)
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer$1.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer
};

function byteLength (string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer$1.byteLength = byteLength;

function slowToString (encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer$1.prototype._isBuffer = true;

function swap (b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer$1.prototype.swap16 = function swap16 () {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer$1.prototype.swap32 = function swap32 () {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer$1.prototype.swap64 = function swap64 () {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer$1.prototype.toString = function toString () {
  var length = this.length | 0;
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
};

Buffer$1.prototype.equals = function equals (b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer$1.compare(this, b) === 0
};

Buffer$1.prototype.inspect = function inspect () {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>'
};

Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset;  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer$1.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer$1.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer$1.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer$1.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf)
  } else {
    return fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res
}

Buffer$1.prototype.slice = function slice (start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer$1.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer$1(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset]
};

Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | (this[offset + 1] << 8)
};

Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return (this[offset] << 8) | this[offset + 1]
};

Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
};

Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4)
};

Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4)
};

Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8)
};

Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = (value & 0xff);
  return offset + 1
};

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
  }
}

Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24);
    this[offset + 2] = (value >>> 16);
    this[offset + 1] = (value >>> 8);
    this[offset] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    this[offset + 2] = (value >>> 16);
    this[offset + 3] = (value >>> 24);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val)
      ? val
      : utf8ToBytes(new Buffer$1(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}


function base64ToBytes (str) {
  return toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i];
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}


// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer$1(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
}

function isFastBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
}

var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Buffer: Buffer$1,
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer$1,
    kMaxLength: _kMaxLength
});

var require$$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_buffer);

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
}
if (typeof global.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
var title = 'browser';
var platform = 'browser';
var browser$1 = true;
var env = {};
var argv = [];
var version = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};

function noop$2() {}

var on = noop$2;
var addListener = noop$2;
var once$2 = noop$2;
var off = noop$2;
var removeListener = noop$2;
var removeAllListeners = noop$2;
var emit = noop$2;

function binding(name) {
    throw new Error('process.binding is not supported');
}

function cwd () { return '/' }
function chdir (dir) {
    throw new Error('process.chdir is not supported');
}function umask() { return 0; }

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance$1 = global.performance || {};
var performanceNow =
  performance$1.now        ||
  performance$1.mozNow     ||
  performance$1.msNow      ||
  performance$1.oNow       ||
  performance$1.webkitNow  ||
  function(){ return (new Date()).getTime() };

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp){
  var clocktime = performanceNow.call(performance$1)*1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor((clocktime%1)*1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds<0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds,nanoseconds]
}

var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}

var browser$1$1 = {
  nextTick: nextTick,
  title: title,
  browser: browser$1,
  env: env,
  argv: argv,
  version: version,
  versions: versions,
  on: on,
  addListener: addListener,
  once: once$2,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform,
  release: release,
  config: config,
  uptime: uptime
};

var inherits$2;
if (typeof Object.create === 'function'){
  inherits$2 = function inherits(ctor, superCtor) {
    // implementation from standard node.js 'util' module
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  inherits$2 = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
var inherits$3 = inherits$2;

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
function format(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
}

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
function deprecate(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (browser$1$1.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (browser$1$1.throwDeprecation) {
        throw new Error(msg);
      } else if (browser$1$1.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

var debugs = {};
var debugEnviron;
function debuglog(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = browser$1$1.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = 0;
      debugs[set] = function() {
        var msg = format.apply(null, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
}

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

function isNull(arg) {
  return arg === null;
}

function isNullOrUndefined(arg) {
  return arg == null;
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isString(arg) {
  return typeof arg === 'string';
}

function isSymbol(arg) {
  return typeof arg === 'symbol';
}

function isUndefined(arg) {
  return arg === void 0;
}

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isFunction(arg) {
  return typeof arg === 'function';
}

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}

function isBuffer(maybeBuf) {
  return Buffer.isBuffer(maybeBuf);
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
function log() {
  console.log('%s - %s', timestamp(), format.apply(null, arguments));
}

function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { browser$1$1.nextTick(cb.bind(null, null, ret)); },
        function(rej) { browser$1$1.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}

var _polyfillNode_util = {
  inherits: inherits$3,
  _extend: _extend,
  log: log,
  isBuffer: isBuffer,
  isPrimitive: isPrimitive,
  isFunction: isFunction,
  isError: isError,
  isDate: isDate,
  isObject: isObject,
  isRegExp: isRegExp,
  isUndefined: isUndefined,
  isSymbol: isSymbol,
  isString: isString,
  isNumber: isNumber,
  isNullOrUndefined: isNullOrUndefined,
  isNull: isNull,
  isBoolean: isBoolean,
  isArray: isArray,
  inspect: inspect,
  deprecate: deprecate,
  format: format,
  debuglog: debuglog,
  promisify: promisify,
  callbackify: callbackify,
};

var _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _extend: _extend,
    callbackify: callbackify,
    debuglog: debuglog,
    default: _polyfillNode_util,
    deprecate: deprecate,
    format: format,
    inherits: inherits$3,
    inspect: inspect,
    isArray: isArray,
    isBoolean: isBoolean,
    isBuffer: isBuffer,
    isDate: isDate,
    isError: isError,
    isFunction: isFunction,
    isNull: isNull,
    isNullOrUndefined: isNullOrUndefined,
    isNumber: isNumber,
    isObject: isObject,
    isPrimitive: isPrimitive,
    isRegExp: isRegExp,
    isString: isString,
    isSymbol: isSymbol,
    isUndefined: isUndefined,
    log: log,
    promisify: promisify
});

var require$$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_util$1);

var buffer_list;
var hasRequiredBuffer_list;

function requireBuffer_list () {
	if (hasRequiredBuffer_list) return buffer_list;
	hasRequiredBuffer_list = 1;

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var _require = require$$2,
	  Buffer = _require.Buffer;
	var _require2 = require$$3,
	  inspect = _require2.inspect;
	var custom = inspect && inspect.custom || 'inspect';
	function copyBuffer(src, target, offset) {
	  Buffer.prototype.copy.call(src, target, offset);
	}
	buffer_list = /*#__PURE__*/function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);
	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }
	  _createClass(BufferList, [{
	    key: "push",
	    value: function push(v) {
	      var entry = {
	        data: v,
	        next: null
	      };
	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
	      this.tail = entry;
	      ++this.length;
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(v) {
	      var entry = {
	        data: v,
	        next: this.head
	      };
	      if (this.length === 0) this.tail = entry;
	      this.head = entry;
	      ++this.length;
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.length === 0) return;
	      var ret = this.head.data;
	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	      --this.length;
	      return ret;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = this.tail = null;
	      this.length = 0;
	    }
	  }, {
	    key: "join",
	    value: function join(s) {
	      if (this.length === 0) return '';
	      var p = this.head;
	      var ret = '' + p.data;
	      while (p = p.next) ret += s + p.data;
	      return ret;
	    }
	  }, {
	    key: "concat",
	    value: function concat(n) {
	      if (this.length === 0) return Buffer.alloc(0);
	      var ret = Buffer.allocUnsafe(n >>> 0);
	      var p = this.head;
	      var i = 0;
	      while (p) {
	        copyBuffer(p.data, ret, i);
	        i += p.data.length;
	        p = p.next;
	      }
	      return ret;
	    }

	    // Consumes a specified amount of bytes or characters from the buffered data.
	  }, {
	    key: "consume",
	    value: function consume(n, hasStrings) {
	      var ret;
	      if (n < this.head.data.length) {
	        // `slice` is the same for buffers and strings.
	        ret = this.head.data.slice(0, n);
	        this.head.data = this.head.data.slice(n);
	      } else if (n === this.head.data.length) {
	        // First chunk is a perfect match.
	        ret = this.shift();
	      } else {
	        // Result spans more than one buffer.
	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
	      }
	      return ret;
	    }
	  }, {
	    key: "first",
	    value: function first() {
	      return this.head.data;
	    }

	    // Consumes a specified amount of characters from the buffered data.
	  }, {
	    key: "_getString",
	    value: function _getString(n) {
	      var p = this.head;
	      var c = 1;
	      var ret = p.data;
	      n -= ret.length;
	      while (p = p.next) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
	        n -= nb;
	        if (n === 0) {
	          if (nb === str.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = str.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    }

	    // Consumes a specified amount of bytes from the buffered data.
	  }, {
	    key: "_getBuffer",
	    value: function _getBuffer(n) {
	      var ret = Buffer.allocUnsafe(n);
	      var p = this.head;
	      var c = 1;
	      p.data.copy(ret);
	      n -= p.data.length;
	      while (p = p.next) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;
	        if (n === 0) {
	          if (nb === buf.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = buf.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    }

	    // Make sure the linked list only shows the minimal necessary information.
	  }, {
	    key: custom,
	    value: function value(_, options) {
	      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
	        // Only inspect one level.
	        depth: 0,
	        // It should not recurse.
	        customInspect: false
	      }));
	    }
	  }]);
	  return BufferList;
	}();
	return buffer_list;
}

var destroy_1;
var hasRequiredDestroy;

function requireDestroy () {
	if (hasRequiredDestroy) return destroy_1;
	hasRequiredDestroy = 1;

	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	  var _this = this;
	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;
	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        process.nextTick(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorNT, this, err);
	      }
	    }
	    return this;
	  }

	  // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks

	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }

	  // if this is a duplex stream mark the writable part as destroyed as well
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }
	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      if (!_this._writableState) {
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else if (!_this._writableState.errorEmitted) {
	        _this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorAndCloseNT, _this, err);
	      } else {
	        process.nextTick(emitCloseNT, _this);
	      }
	    } else if (cb) {
	      process.nextTick(emitCloseNT, _this);
	      cb(err);
	    } else {
	      process.nextTick(emitCloseNT, _this);
	    }
	  });
	  return this;
	}
	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}
	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}
	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }
	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}
	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}
	function errorOrDestroy(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.

	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}
	destroy_1 = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy
	};
	return destroy_1;
}

var errorsBrowser = {};

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
errorsBrowser.codes = codes;

var state;
var hasRequiredState;

function requireState () {
	if (hasRequiredState) return state;
	hasRequiredState = 1;

	var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;
	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}
	function getHighWaterMark(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      var name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }
	    return Math.floor(hwm);
	  }

	  // Default value
	  return state.objectMode ? 16 : 16 * 1024;
	}
	state = {
	  getHighWaterMark: getHighWaterMark
	};
	return state;
}

var inherits;
if (typeof Object.create === 'function'){
  inherits = function inherits(ctor, superCtor) {
    // implementation from standard node.js 'util' module
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  inherits = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
var inherits$1 = inherits;

var _polyfillNode_inherits = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: inherits$1
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_inherits);

var browser;
var hasRequiredBrowser;

function requireBrowser () {
	if (hasRequiredBrowser) return browser;
	hasRequiredBrowser = 1;
	/**
	 * Module exports.
	 */

	browser = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!commonjsGlobal.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = commonjsGlobal.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	return browser;
}

var _stream_writable;
var hasRequired_stream_writable;

function require_stream_writable () {
	if (hasRequired_stream_writable) return _stream_writable;
	hasRequired_stream_writable = 1;

	_stream_writable = Writable;

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var internalUtil = {
	  deprecate: requireBrowser()
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = requireStreamBrowser();
	/*</replacement>*/

	var Buffer = require$$2.Buffer;
	var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	var destroyImpl = requireDestroy();
	var _require = requireState(),
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = errorsBrowser.codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
	  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
	  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
	  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	require$$1(Writable, Stream);
	function nop() {}
	function WritableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream,
	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

	  // if _final has been called
	  this.finalCalled = false;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // Should close be emitted on destroy. Defaults to true.
	  this.emitClose = options.emitClose !== false;

	  // Should .destroy() be called after 'finish' (and potentially 'end')
	  this.autoDestroy = !!options.autoDestroy;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function writableStateBufferGetter() {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable) return false;
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}
	function Writable(options) {
	  Duplex = Duplex || require_stream_duplex();

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.

	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the WritableState constructor, at least with V8 6.5
	  var isDuplex = this instanceof Duplex;
	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
	  this._writableState = new WritableState(options, this, isDuplex);

	  // legacy.
	  this.writable = true;
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	    if (typeof options.writev === 'function') this._writev = options.writev;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	    if (typeof options.final === 'function') this._final = options.final;
	  }
	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
	};
	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END();
	  // TODO: defer error events consistently everywhere, not just the cb
	  errorOrDestroy(stream, er);
	  process.nextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var er;
	  if (chunk === null) {
	    er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
	  }
	  if (er) {
	    errorOrDestroy(stream, er);
	    process.nextTick(cb, er);
	    return false;
	  }
	  return true;
	}
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = !state.objectMode && _isUint8Array(chunk);
	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};
	Writable.prototype.cork = function () {
	  this._writableState.corked++;
	};
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	  if (state.corked) {
	    state.corked--;
	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}
	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	  return ret;
	}
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    process.nextTick(cb, er);
	    // this can emit finish, and it will always happen
	    // after error
	    process.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	    // this can emit finish, but finish must
	    // always follow error
	    finishMaybe(stream, state);
	  }
	}
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state) || stream.destroyed;
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	    if (sync) {
	      process.nextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
	};
	Writable.prototype._writev = null;
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      errorOrDestroy(stream, err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function' && !state.destroyed) {
	      state.pendingcb++;
	      state.finalCalled = true;
	      process.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	      if (state.autoDestroy) {
	        // In case of duplex streams we need a way to detect
	        // if the readable side is ready for autoDestroy as well
	        var rState = stream._readableState;
	        if (!rState || rState.autoDestroy && rState.endEmitted) {
	          stream.destroy();
	        }
	      }
	    }
	  }
	  return need;
	}
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }

	  // reuse the free corkReq.
	  state.corkedRequestsFree.next = corkReq;
	}
	Object.defineProperty(Writable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._writableState.destroyed = value;
	  }
	});
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  cb(err);
	};
	return _stream_writable;
}

var _stream_duplex;
var hasRequired_stream_duplex;

function require_stream_duplex () {
	if (hasRequired_stream_duplex) return _stream_duplex;
	hasRequired_stream_duplex = 1;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	};
	/*</replacement>*/

	_stream_duplex = Duplex;
	var Readable = require_stream_readable();
	var Writable = require_stream_writable();
	require$$1(Duplex, Readable);
	{
	  // Allow the keys array to be GC'ed.
	  var keys = objectKeys(Writable.prototype);
	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	  Readable.call(this, options);
	  Writable.call(this, options);
	  this.allowHalfOpen = true;
	  if (options) {
	    if (options.readable === false) this.readable = false;
	    if (options.writable === false) this.writable = false;
	    if (options.allowHalfOpen === false) {
	      this.allowHalfOpen = false;
	      this.once('end', onend);
	    }
	  }
	}
	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});

	// the no-half-open enforcer
	function onend() {
	  // If the writable side ended, then we're ok.
	  if (this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(onEndNT, this);
	}
	function onEndNT(self) {
	  self.end();
	}
	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});
	return _stream_duplex;
}

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var isBufferEncoding = Buffer$1.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     };


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
function StringDecoder(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer$1(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
}

// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

var _polyfillNode_string_decoder = /*#__PURE__*/Object.freeze({
    __proto__: null,
    StringDecoder: StringDecoder
});

var require$$10 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_string_decoder);

var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;
function once$1(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop$1() {}
function isRequest$1(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos$1(stream, opts, callback) {
  if (typeof opts === 'function') return eos$1(stream, null, opts);
  if (!opts) opts = {};
  callback = once$1(callback || noop$1);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest$1(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
var endOfStream = eos$1;

var async_iterator;
var hasRequiredAsync_iterator;

function requireAsync_iterator () {
	if (hasRequiredAsync_iterator) return async_iterator;
	hasRequiredAsync_iterator = 1;

	var _Object$setPrototypeO;
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var finished = endOfStream;
	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');
	function createIterResult(value, done) {
	  return {
	    value: value,
	    done: done
	  };
	}
	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];
	  if (resolve !== null) {
	    var data = iter[kStream].read();
	    // we defer if data is null
	    // we can be expecting either 'end' or
	    // 'error'
	    if (data !== null) {
	      iter[kLastPromise] = null;
	      iter[kLastResolve] = null;
	      iter[kLastReject] = null;
	      resolve(createIterResult(data, false));
	    }
	  }
	}
	function onReadable(iter) {
	  // we wait for the next tick, because it might
	  // emit an error with process.nextTick
	  process.nextTick(readAndResolve, iter);
	}
	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
	    lastPromise.then(function () {
	      if (iter[kEnded]) {
	        resolve(createIterResult(undefined, true));
	        return;
	      }
	      iter[kHandlePromise](resolve, reject);
	    }, reject);
	  };
	}
	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
	    return this[kStream];
	  },
	  next: function next() {
	    var _this = this;
	    // if we have detected an error in the meanwhile
	    // reject straight away
	    var error = this[kError];
	    if (error !== null) {
	      return Promise.reject(error);
	    }
	    if (this[kEnded]) {
	      return Promise.resolve(createIterResult(undefined, true));
	    }
	    if (this[kStream].destroyed) {
	      // We need to defer via nextTick because if .destroy(err) is
	      // called, the error will be emitted via nextTick, and
	      // we cannot guarantee that there is no error lingering around
	      // waiting to be emitted.
	      return new Promise(function (resolve, reject) {
	        process.nextTick(function () {
	          if (_this[kError]) {
	            reject(_this[kError]);
	          } else {
	            resolve(createIterResult(undefined, true));
	          }
	        });
	      });
	    }

	    // if we have multiple next() calls
	    // we will wait for the previous Promise to finish
	    // this logic is optimized to support for await loops,
	    // where next() is only called once at a time
	    var lastPromise = this[kLastPromise];
	    var promise;
	    if (lastPromise) {
	      promise = new Promise(wrapForNext(lastPromise, this));
	    } else {
	      // fast path needed to support multiple this.push()
	      // without triggering the next() queue
	      var data = this[kStream].read();
	      if (data !== null) {
	        return Promise.resolve(createIterResult(data, false));
	      }
	      promise = new Promise(this[kHandlePromise]);
	    }
	    this[kLastPromise] = promise;
	    return promise;
	  }
	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;
	  // destroy(err, cb) is a private API
	  // we can guarantee we have that here, because we control the
	  // Readable class this is attached to
	  return new Promise(function (resolve, reject) {
	    _this2[kStream].destroy(null, function (err) {
	      if (err) {
	        reject(err);
	        return;
	      }
	      resolve(createIterResult(undefined, true));
	    });
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);
	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;
	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
	    value: stream,
	    writable: true
	  }), _defineProperty(_Object$create, kLastResolve, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kLastReject, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kError, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kEnded, {
	    value: stream._readableState.endEmitted,
	    writable: true
	  }), _defineProperty(_Object$create, kHandlePromise, {
	    value: function value(resolve, reject) {
	      var data = iterator[kStream].read();
	      if (data) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        resolve(createIterResult(data, false));
	      } else {
	        iterator[kLastResolve] = resolve;
	        iterator[kLastReject] = reject;
	      }
	    },
	    writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  finished(stream, function (err) {
	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
	      var reject = iterator[kLastReject];
	      // reject if we are waiting for data in the Promise
	      // returned by next() and store the error
	      if (reject !== null) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        reject(err);
	      }
	      iterator[kError] = err;
	      return;
	    }
	    var resolve = iterator[kLastResolve];
	    if (resolve !== null) {
	      iterator[kLastPromise] = null;
	      iterator[kLastResolve] = null;
	      iterator[kLastReject] = null;
	      resolve(createIterResult(undefined, true));
	    }
	    iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};
	async_iterator = createReadableStreamAsyncIterator;
	return async_iterator;
}

var fromBrowser;
var hasRequiredFromBrowser;

function requireFromBrowser () {
	if (hasRequiredFromBrowser) return fromBrowser;
	hasRequiredFromBrowser = 1;
	fromBrowser = function () {
	  throw new Error('Readable.from is not available in the browser')
	};
	return fromBrowser;
}

var _stream_readable;
var hasRequired_stream_readable;

function require_stream_readable () {
	if (hasRequired_stream_readable) return _stream_readable;
	hasRequired_stream_readable = 1;

	_stream_readable = Readable;

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	require$$0.EventEmitter;
	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = requireStreamBrowser();
	/*</replacement>*/

	var Buffer = require$$2.Buffer;
	var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}

	/*<replacement>*/
	var debugUtil = require$$3;
	var debug;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	/*</replacement>*/

	var BufferList = requireBuffer_list();
	var destroyImpl = requireDestroy();
	var _require = requireState(),
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = errorsBrowser.codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

	// Lazy loaded to improve the startup performance.
	var StringDecoder;
	var createReadableStreamAsyncIterator;
	var from;
	require$$1(Readable, Stream);
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

	  // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.
	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}
	function ReadableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true;

	  // Should close be emitted on destroy. Defaults to true.
	  this.emitClose = options.emitClose !== false;

	  // Should .destroy() be called after 'end' (and potentially 'finish')
	  this.autoDestroy = !!options.autoDestroy;

	  // has it been destroyed
	  this.destroyed = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = require$$10.StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {
	  Duplex = Duplex || require_stream_duplex();
	  if (!(this instanceof Readable)) return new Readable(options);

	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the ReadableState constructor, at least with V8 6.5
	  var isDuplex = this instanceof Duplex;
	  this._readableState = new ReadableState(options, this, isDuplex);

	  // legacy
	  this.readable = true;
	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }
	  Stream.call(this);
	}
	Object.defineProperty(Readable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	  }
	});
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  cb(err);
	};

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;
	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }
	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};
	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug('readableAddChunk', chunk);
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      errorOrDestroy(stream, er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }
	      if (addToFront) {
	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
	      } else if (state.destroyed) {
	        return false;
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	      maybeReadMore(stream, state);
	    }
	  }

	  // We can push more data if we are below the highWaterMark.
	  // Also, if we have no data yet, we can stand some more bytes.
	  // This is to work around cases where hwm=0, such as the repl.
	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}
	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    state.awaitDrain = 0;
	    stream.emit('data', chunk);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}
	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }
	  return er;
	}
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = require$$10.StringDecoder;
	  var decoder = new StringDecoder(enc);
	  this._readableState.decoder = decoder;
	  // If setEncoding(null), decoder.encoding equals utf8
	  this._readableState.encoding = this._readableState.decoder.encoding;

	  // Iterate over current buffer to convert already stored Buffers:
	  var p = this._readableState.buffer.head;
	  var content = '';
	  while (p !== null) {
	    content += decoder.write(p.data);
	    p = p.next;
	  }
	  this._readableState.buffer.clear();
	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	};

	// Don't raise the hwm > 1GB
	var MAX_HWM = 0x40000000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	  if (ret === null) {
	    state.needReadable = state.length <= state.highWaterMark;
	    n = 0;
	  } else {
	    state.length -= n;
	    state.awaitDrain = 0;
	  }
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};
	function onEofChunk(stream, state) {
	  debug('onEofChunk');
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	  if (state.sync) {
	    // if we are sync, wait until next tick to emit the data.
	    // Otherwise we risk emitting data in the flow()
	    // the readable code triggers during a read() call
	    emitReadable(stream);
	  } else {
	    // emit 'readable' now to make sure it gets picked up.
	    state.needReadable = false;
	    if (!state.emittedReadable) {
	      state.emittedReadable = true;
	      emitReadable_(stream);
	    }
	  }
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    process.nextTick(emitReadable_, stream);
	  }
	}
	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug('emitReadable_', state.destroyed, state.length, state.ended);
	  if (!state.destroyed && (state.length || state.ended)) {
	    stream.emit('readable');
	    state.emittedReadable = false;
	  }

	  // The stream needs another readable event if
	  // 1. It is not flowing, as the flow mechanism will take
	  //    care of it.
	  // 2. It is not ended.
	  // 3. It is below the highWaterMark, so we can schedule
	  //    another readable later.
	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(maybeReadMore_, stream, state);
	  }
	}
	function maybeReadMore_(stream, state) {
	  // Attempt to read more data if we should.
	  //
	  // The conditions for reading more data are (one of):
	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
	  //   is responsible for filling the buffer with enough data if such data
	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
	  //   we should _not_ attempt to buffer any extra data. We'll get more data
	  //   when the stream consumer calls read() instead.
	  // - No data in the buffer, and the stream is in flowing mode. In this mode
	  //   the loop below is responsible for ensuring read() is called. Failing to
	  //   call read here would abort the flow and there's no other mechanism for
	  //   continuing the flow if the stream consumer has just subscribed to the
	  //   'data' event.
	  //
	  // In addition to the above conditions to keep reading data, the following
	  // conditions prevent the data from being read:
	  // - The stream has ended (state.ended).
	  // - There is already a pending 'read' operation (state.reading). This is a
	  //   case where the the stream has called the implementation defined _read()
	  //   method, but they are processing the call asynchronously and have _not_
	  //   called push() with new data. In this case we skip performing more
	  //   read()s. The execution ends in this method again after the _read() ends
	  //   up calling push() with more data.
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
	    var len = state.length;
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
	};
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }
	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    debug('dest.write', ret);
	    if (ret === false) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', state.awaitDrain);
	        state.awaitDrain++;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	  return dest;
	};
	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
	    hasUnpiped: false
	  };

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
	      hasUnpiped: false
	    });
	    return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  var state = this._readableState;
	  if (ev === 'data') {
	    // update readableListening so that resume() may be a no-op
	    // a few lines down. This is needed to support once('readable').
	    state.readableListening = this.listenerCount('readable') > 0;

	    // Try start flowing on next tick if stream isn't explicitly paused
	    if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.flowing = false;
	      state.emittedReadable = false;
	      debug('on readable', state.length, state.reading);
	      if (state.length) {
	        emitReadable(this);
	      } else if (!state.reading) {
	        process.nextTick(nReadingNextTick, this);
	      }
	    }
	  }
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	Readable.prototype.removeListener = function (ev, fn) {
	  var res = Stream.prototype.removeListener.call(this, ev, fn);
	  if (ev === 'readable') {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	Readable.prototype.removeAllListeners = function (ev) {
	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
	  if (ev === 'readable' || ev === undefined) {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;
	  if (state.resumeScheduled && !state.paused) {
	    // flowing needs to be set to true now, otherwise
	    // the upcoming resume will not flow.
	    state.flowing = true;

	    // crude way to check if we should resume
	  } else if (self.listenerCount('data') > 0) {
	    self.resume();
	  }
	}
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    // we flow only if there is no one listening
	    // for readable, but we still have to call
	    // resume()
	    state.flowing = !state.readableListening;
	    resume(this, state);
	  }
	  state.paused = false;
	  return this;
	};
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(resume_, stream, state);
	  }
	}
	function resume_(stream, state) {
	  debug('resume', state.reading);
	  if (!state.reading) {
	    stream.read(0);
	  }
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (this._readableState.flowing !== false) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  this._readableState.paused = true;
	  return this;
	};
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null);
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var _this = this;
	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }
	    _this.push(null);
	  });
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	    var ret = _this.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function methodWrap(method) {
	        return function methodWrapReturnFunction() {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  }

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  this._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	  return this;
	};
	if (typeof Symbol === 'function') {
	  Readable.prototype[Symbol.asyncIterator] = function () {
	    if (createReadableStreamAsyncIterator === undefined) {
	      createReadableStreamAsyncIterator = requireAsync_iterator();
	    }
	    return createReadableStreamAsyncIterator(this);
	  };
	}
	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableFlowing', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.flowing;
	  },
	  set: function set(state) {
	    if (this._readableState) {
	      this._readableState.flowing = state;
	    }
	  }
	});

	// exposed for testing purposes only.
	Readable._fromList = fromList;
	Object.defineProperty(Readable.prototype, 'readableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.length;
	  }
	});

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}
	function endReadable(stream) {
	  var state = stream._readableState;
	  debug('endReadable', state.endEmitted);
	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(endReadableNT, state, stream);
	  }
	}
	function endReadableNT(state, stream) {
	  debug('endReadableNT', state.endEmitted, state.length);

	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	    if (state.autoDestroy) {
	      // In case of duplex streams we need a way to detect
	      // if the writable side is ready for autoDestroy as well
	      var wState = stream._writableState;
	      if (!wState || wState.autoDestroy && wState.finished) {
	        stream.destroy();
	      }
	    }
	  }
	}
	if (typeof Symbol === 'function') {
	  Readable.from = function (iterable, opts) {
	    if (from === undefined) {
	      from = requireFromBrowser();
	    }
	    return from(Readable, iterable, opts);
	  };
	}
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	return _stream_readable;
}

var _stream_transform = Transform$1;
var _require$codes$1 = errorsBrowser.codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require_stream_duplex();
require$$1(Transform$1, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform$1(options) {
  if (!(this instanceof Transform$1)) return new Transform$1(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform$1.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform$1.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform$1.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform$1.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform$1.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

var _stream_passthrough = PassThrough;
var Transform = _stream_transform;
require$$1(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = errorsBrowser.codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = endOfStream;
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
var pipeline_1 = pipeline;

(function (module, exports) {
	exports = module.exports = require_stream_readable();
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = require_stream_writable();
	exports.Duplex = require_stream_duplex();
	exports.Transform = _stream_transform;
	exports.PassThrough = _stream_passthrough;
	exports.finished = endOfStream;
	exports.pipeline = pipeline_1; 
} (readableBrowser, readableBrowser.exports));

var readableBrowserExports = readableBrowser.exports;

Object.defineProperty(lib, "__esModule", { value: true });
lib.ReadableWebToNodeStream = void 0;
const readable_stream_1 = readableBrowserExports;
/**
 * Converts a Web-API stream into Node stream.Readable class
 * Node stream readable: https://nodejs.org/api/stream.html#stream_readable_streams
 * Web API readable-stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
 * Node readable stream: https://nodejs.org/api/stream.html#stream_readable_streams
 */
class ReadableWebToNodeStream extends readable_stream_1.Readable {
    /**
     *
     * @param stream Readable​Stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
     */
    constructor(stream) {
        super();
        this.bytesRead = 0;
        this.released = false;
        this.reader = stream.getReader();
    }
    /**
     * Implementation of readable._read(size).
     * When readable._read() is called, if data is available from the resource,
     * the implementation should begin pushing that data into the read queue
     * https://nodejs.org/api/stream.html#stream_readable_read_size_1
     */
    async _read() {
        // Should start pushing data into the queue
        // Read data from the underlying Web-API-readable-stream
        if (this.released) {
            this.push(null); // Signal EOF
            return;
        }
        this.pendingRead = this.reader.read();
        const data = await this.pendingRead;
        // clear the promise before pushing pushing new data to the queue and allow sequential calls to _read()
        delete this.pendingRead;
        if (data.done || this.released) {
            this.push(null); // Signal EOF
        }
        else {
            this.bytesRead += data.value.length;
            this.push(data.value); // Push new data to the queue
        }
    }
    /**
     * If there is no unresolved read call to Web-API Readable​Stream immediately returns;
     * otherwise will wait until the read is resolved.
     */
    async waitForReadToComplete() {
        if (this.pendingRead) {
            await this.pendingRead;
        }
    }
    /**
     * Close wrapper
     */
    async close() {
        await this.syncAndRelease();
    }
    async syncAndRelease() {
        this.released = true;
        await this.waitForReadToComplete();
        await this.reader.releaseLock();
    }
}
lib.ReadableWebToNodeStream = ReadableWebToNodeStream;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.fetchFromUrl = exports.parseBlob = exports.parseReadableStream = exports.parseNodeStream = exports.selectCover = exports.ratingToStars = exports.orderTags = exports.parseFromTokenizer = exports.parseBuffer = void 0;
	const initDebug = browserExports;
	const mm = core$2;
	const readable_web_to_node_stream_1 = lib;
	const debug = initDebug('music-metadata-browser:main');
	var core_1 = core$2;
	Object.defineProperty(exports, "parseBuffer", { enumerable: true, get: function () { return core_1.parseBuffer; } });
	Object.defineProperty(exports, "parseFromTokenizer", { enumerable: true, get: function () { return core_1.parseFromTokenizer; } });
	Object.defineProperty(exports, "orderTags", { enumerable: true, get: function () { return core_1.orderTags; } });
	Object.defineProperty(exports, "ratingToStars", { enumerable: true, get: function () { return core_1.ratingToStars; } });
	Object.defineProperty(exports, "selectCover", { enumerable: true, get: function () { return core_1.selectCover; } });
	/**
	 * Parse audio Stream
	 * @param stream - ReadableStream
	 * @param contentType - MIME-Type
	 * @param options - Parsing options
	 * @returns Metadata
	 */
	exports.parseNodeStream = mm.parseStream;
	/**
	 * Parse Web API ReadableStream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
	 * @param stream - ReadableStream (web stream according WTWG Streams Standard)
	 * @param fileInfo FileInfo object or MIME-Type
	 * @param options - Parsing options
	 * @returns Metadata
	 */
	async function parseReadableStream(stream, fileInfo, options) {
	    const ns = new readable_web_to_node_stream_1.ReadableWebToNodeStream(stream);
	    const res = await (0, exports.parseNodeStream)(ns, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo, options);
	    await ns.close();
	    return res;
	}
	exports.parseReadableStream = parseReadableStream;
	/**
	 * Parse Web API File
	 * @param blob - Blob to parse
	 * @param options - Parsing options
	 * @returns Metadata
	 */
	async function parseBlob(blob, options) {
	    ({ mimeType: blob.type, size: blob.size });
	    if (blob instanceof File) {
	        blob.name;
	    }
	    const stream = (blob.stream ? blob.stream() : convertBlobToReadableStream(blob));
	    return parseReadableStream(stream, { mimeType: blob.type, size: blob.size }, options);
	}
	exports.parseBlob = parseBlob;
	/**
	 * Convert Blob to ReadableStream
	 * Fallback for Safari versions < 14.1
	 * @param blob
	 */
	function convertBlobToReadableStream(blob) {
	    const fileReader = new FileReader();
	    return new ReadableStream({
	        start(controller) {
	            // The following function handles each data chunk
	            fileReader.onloadend = event => {
	                let data = event.target.result;
	                if (data instanceof ArrayBuffer) {
	                    data = new Uint8Array(data);
	                }
	                controller.enqueue(data);
	                controller.close();
	            };
	            fileReader.onerror = error => {
	                controller.close();
	            };
	            fileReader.onabort = error => {
	                controller.close();
	            };
	            fileReader.readAsArrayBuffer(blob);
	        }
	    });
	}
	/**
	 * Parse fetched file, using the Web Fetch API
	 * @param audioTrackUrl - URL to download the audio track from
	 * @param options - Parsing options
	 * @returns Metadata
	 */
	async function fetchFromUrl(audioTrackUrl, options) {
	    const response = await fetch(audioTrackUrl);
	    const fileInfo = {
	        size: parseInt(response.headers.get('Content-Length'), 10),
	        mimeType: response.headers.get('Content-Type')
	    };
	    if (response.ok) {
	        if (response.body) {
	            const res = await parseReadableStream(response.body, fileInfo, options);
	            debug('Closing HTTP-readable-stream...');
	            if (!response.body.locked) { // Prevent error in Firefox
	                await response.body.cancel();
	            }
	            debug('HTTP-readable-stream closed.');
	            return res;
	        }
	        else {
	            // Fall back on Blob
	            return parseBlob(await response.blob(), options);
	        }
	    }
	    else {
	        throw new Error(`HTTP error status=${response.status}: ${response.statusText}`);
	    }
	}
	exports.fetchFromUrl = fetchFromUrl; 
} (lib$3));

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
  randomUUID
};

function v4(options, buf, offset) {
  if (native.randomUUID && !buf && !options) {
    return native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

var ImportZip = /** @class */ (function () {
    function ImportZip(file) {
        this.zip = file;
        this.files = [];
        this.art = [];
        this.songs = [];
        this.debug = n.TONE_DEBUG ? true : false;
    }
    ImportZip.prototype.getFiles = function () {
        var _a, e_1, _b, _c;
        return __awaiter$1(this, void 0, void 0, function () {
            var zip, paths, _d, paths_1, paths_1_1, path, file, type, _e, _f, _g, e_1_1;
            var _h;
            var _this = this;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        this.debug && console.log('Getting files from zip...');
                        return [4 /*yield*/, JSZip.loadAsync(this.zip)];
                    case 1:
                        zip = _j.sent();
                        paths = [];
                        zip.forEach(function (relativePath) { return __awaiter$1(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, paths.push(relativePath)];
                        }); }); });
                        _j.label = 2;
                    case 2:
                        _j.trys.push([2, 10, 11, 16]);
                        _d = true, paths_1 = __asyncValues(paths);
                        _j.label = 3;
                    case 3: return [4 /*yield*/, paths_1.next()];
                    case 4:
                        if (!(paths_1_1 = _j.sent(), _a = paths_1_1.done, !_a)) return [3 /*break*/, 9];
                        _c = paths_1_1.value;
                        _d = false;
                        _j.label = 5;
                    case 5:
                        _j.trys.push([5, , 7, 8]);
                        path = _c;
                        file = zip.file(path);
                        type = this.getTypeFromExtension(file.name);
                        _f = (_e = this.files).push;
                        _h = {
                            name: file.name
                        };
                        _g = Blob.bind;
                        return [4 /*yield*/, (file === null || file === void 0 ? void 0 : file.async('blob'))];
                    case 6:
                        _f.apply(_e, [(_h.blob = new (_g.apply(Blob, [void 0, [_j.sent()], { type: type }]))(),
                                _h)]);
                        return [3 /*break*/, 8];
                    case 7:
                        _d = true;
                        return [7 /*endfinally*/];
                    case 8: return [3 /*break*/, 3];
                    case 9: return [3 /*break*/, 16];
                    case 10:
                        e_1_1 = _j.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 16];
                    case 11:
                        _j.trys.push([11, , 14, 15]);
                        if (!(!_d && !_a && (_b = paths_1.return))) return [3 /*break*/, 13];
                        return [4 /*yield*/, _b.call(paths_1)];
                    case 12:
                        _j.sent();
                        _j.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 15: return [7 /*endfinally*/];
                    case 16:
                        this.debug && console.log({ files: this.files });
                        return [2 /*return*/, this.files];
                }
            });
        });
    };
    ImportZip.prototype.getArtFromFiles = function () {
        var _a, e_2, _b, _c;
        return __awaiter$1(this, void 0, void 0, function () {
            var artFiles, _d, artFiles_1, artFiles_1_1, file, blob, dataURL, type, validTypes, colors, e_2_1;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        artFiles = this.files
                            .map(function (file) { return file.blob.type.split('/')[0] == 'image' && file; })
                            .filter(function (x) { return x; });
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 11, 12, 17]);
                        _d = true, artFiles_1 = __asyncValues(artFiles);
                        _f.label = 2;
                    case 2: return [4 /*yield*/, artFiles_1.next()];
                    case 3:
                        if (!(artFiles_1_1 = _f.sent(), _a = artFiles_1_1.done, !_a)) return [3 /*break*/, 10];
                        _c = artFiles_1_1.value;
                        _d = false;
                        _f.label = 4;
                    case 4:
                        _f.trys.push([4, , 8, 9]);
                        file = _c;
                        if (!(file && file.blob)) return [3 /*break*/, 7];
                        blob = file.blob;
                        return [4 /*yield*/, this.blobToDataURL(blob)];
                    case 5:
                        dataURL = _f.sent();
                        type = file.name.split('.')[0];
                        validTypes = [
                            'cover',
                            'back',
                            'insert',
                            'gate_left',
                            'gate_right',
                            'jcard',
                        ];
                        if (!validTypes.includes(type)) return [3 /*break*/, 7];
                        return [4 /*yield*/, prominent(dataURL, {
                                amount: 5,
                                format: 'hex',
                                group: 100,
                            })];
                    case 6:
                        colors = _f.sent();
                        this.art = __assign(__assign({}, this.art), (_e = {}, _e[type] = { blob: blob, dataURL: dataURL, colors: colors }, _e));
                        _f.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        _d = true;
                        return [7 /*endfinally*/];
                    case 9: return [3 /*break*/, 2];
                    case 10: return [3 /*break*/, 17];
                    case 11:
                        e_2_1 = _f.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 17];
                    case 12:
                        _f.trys.push([12, , 15, 16]);
                        if (!(!_d && !_a && (_b = artFiles_1.return))) return [3 /*break*/, 14];
                        return [4 /*yield*/, _b.call(artFiles_1)];
                    case 13:
                        _f.sent();
                        _f.label = 14;
                    case 14: return [3 /*break*/, 16];
                    case 15:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 16: return [7 /*endfinally*/];
                    case 17:
                        this.debug && console.log({ art: this.art });
                        return [2 /*return*/, this.art];
                }
            });
        });
    };
    ImportZip.prototype.getSongsFromFiles = function () {
        var _a, e_3, _b, _c;
        return __awaiter$1(this, void 0, void 0, function () {
            var songs, _loop_1, _d, songs_1, songs_1_1, e_3_1;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        songs = this.files
                            .map(function (file) { return file.blob.type.split('/')[0] == 'audio' && file; })
                            .filter(function (x) { return x; });
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 7, 8, 13]);
                        _loop_1 = function () {
                            var song, blob, fileId_1;
                            return __generator(this, function (_f) {
                                switch (_f.label) {
                                    case 0:
                                        _c = songs_1_1.value;
                                        _d = false;
                                        _f.label = 1;
                                    case 1:
                                        _f.trys.push([1, , 4, 5]);
                                        song = _c;
                                        if (!(song && song.blob)) return [3 /*break*/, 3];
                                        blob = song.blob;
                                        fileId_1 = v4();
                                        return [4 /*yield*/, localforage.setItem('tone.uploader.' + fileId_1, blob)];
                                    case 2:
                                        _f.sent();
                                        lib$3.parseBlob(blob).then(function (meta) { return __awaiter$1(_this, void 0, void 0, function () {
                                            var display, unsyncedLyrics, duration, isrc;
                                            var _a, _b;
                                            return __generator(this, function (_c) {
                                                switch (_c.label) {
                                                    case 0:
                                                        if (!meta.format.lossless) return [3 /*break*/, 2];
                                                        display = meta.common.title || '';
                                                        return [4 /*yield*/, ((_a = meta.native['vorbis'].find(function (x) { return x.id === 'UNSYNCEDLYRICS'; })) === null || _a === void 0 ? void 0 : _a.value)];
                                                    case 1:
                                                        unsyncedLyrics = (_c.sent()) || '';
                                                        duration = meta.format.duration || 0;
                                                        isrc = (((_b = meta.common.isrc) === null || _b === void 0 ? void 0 : _b.length) && meta.common.isrc[0]) || '';
                                                        this.songs.push({
                                                            display: display,
                                                            lyrics: { unsynced: unsyncedLyrics },
                                                            duration: duration,
                                                            isrc: isrc,
                                                            fileId: fileId_1,
                                                        });
                                                        _c.label = 2;
                                                    case 2: return [2 /*return*/];
                                                }
                                            });
                                        }); });
                                        _f.label = 3;
                                    case 3: return [3 /*break*/, 5];
                                    case 4:
                                        _d = true;
                                        return [7 /*endfinally*/];
                                    case 5: return [2 /*return*/];
                                }
                            });
                        };
                        _d = true, songs_1 = __asyncValues(songs);
                        _e.label = 2;
                    case 2: return [4 /*yield*/, songs_1.next()];
                    case 3:
                        if (!(songs_1_1 = _e.sent(), _a = songs_1_1.done, !_a)) return [3 /*break*/, 6];
                        return [5 /*yield**/, _loop_1()];
                    case 4:
                        _e.sent();
                        _e.label = 5;
                    case 5: return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_3_1 = _e.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _e.trys.push([8, , 11, 12]);
                        if (!(!_d && !_a && (_b = songs_1.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, _b.call(songs_1)];
                    case 9:
                        _e.sent();
                        _e.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_3) throw e_3.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13:
                        this.debug && console.log({ songs: this.songs });
                        return [2 /*return*/, this.songs];
                }
            });
        });
    };
    ImportZip.prototype.getTypeFromExtension = function (filename) {
        var split = filename.split('.');
        var extension = filename.split('.')[split.length - 1];
        switch (extension) {
            case 'flac':
                return 'audio/flac';
            case 'jpg':
                return 'image/jpeg';
            case 'jpeg':
                return 'image/jpeg';
            case 'png':
                return 'image/png';
        }
    };
    ImportZip.prototype.blobToDataURL = function (blob) {
        return __awaiter$1(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter$1(_this, void 0, void 0, function () {
                        var reader;
                        return __generator(this, function (_a) {
                            reader = new FileReader();
                            reader.onload = function (e) { var _a; return resolve((_a = e.target) === null || _a === void 0 ? void 0 : _a.result); };
                            reader.readAsDataURL(blob);
                            return [2 /*return*/];
                        });
                    }); })];
            });
        });
    };
    return ImportZip;
}());

function ZipDropzone(_a) {
    var className = _a.className, handleFile = _a.handleFile;
    return (require$$0$1.jsx("input", { type: "file", onChange: function (e) { var _a; return ((_a = e.target.files) === null || _a === void 0 ? void 0 : _a.length) && handleFile(e.target.files[0]); }, className: className, style: { all: 'unset' } }));
}

function BulkUpload(_a) {
    var setReleaseProperty = _a.setReleaseProperty, setSongs = _a.setSongs;
    return (require$$0$1.jsxs("div", __assign({ className: "my-4" }, { children: [require$$0$1.jsx("h3", __assign({ className: "font-header text-2xl" }, { children: "Bulk Upload" })), require$$0$1.jsx(ZipDropzone, { handleFile: handleZip })] })));
    function handleZip(file) {
        return __awaiter$1(this, void 0, void 0, function () {
            var importZip_1;
            return __generator(this, function (_a) {
                if (file) {
                    importZip_1 = new ImportZip(file);
                    importZip_1.getFiles().then(function () {
                        return importZip_1
                            .getArtFromFiles()
                            .then(function (art) { return setReleaseProperty('art', art); })
                            .then(function () {
                            return importZip_1.getSongsFromFiles().then(function (songs) { return setSongs(songs); });
                        });
                    });
                }
                return [2 /*return*/];
            });
        });
    }
}

function AlbumArt(_a) {
    var image = _a.image;
    if (image) {
        return require$$0$1.jsx("img", { width: "400", height: "400", src: image });
    }
    return (require$$0$1.jsx("div", __assign({ className: "h-[400px] w-[400px] border-4 border-dashed border-slate-400 hover:border-slate-600 rounded-xl flex justify-center items-center cursor-pointer text-slate-400 hover:text-slate-600" }, { children: require$$0$1.jsxs("p", __assign({ className: "font-header text-center" }, { children: ["album art (cover, back, etc...)", require$$0$1.jsx("br", {}), "(minimum size 1000px x 1000px)", require$$0$1.jsx("br", {}), require$$0$1.jsx("i", { className: "fa-fw fa-sharp fa-solid fa-upload text-xl mt-2" })] })) })));
}

var artTypes = [
    { type: 'cover', display: 'cover' },
    { type: 'back', display: 'back' },
    { type: 'gatefold', display: 'gatefold' },
    { type: 'insert', display: 'insert' },
    { type: 'jcard', display: 'jcard' },
];
function ReleaseArt(_a) {
    var _b;
    var release = _a.release; _a.setReleaseProperty; var artColors = _a.artColors, setArtColors = _a.setArtColors;
    var _c = require$$1$1.useState('cover'), selected = _c[0], setSelected = _c[1];
    require$$1$1.useEffect(function () {
        for (var type in release.art) {
            var colors = release.art[type].colors || [];
            setArtColors(__spreadArray(__spreadArray([], artColors, true), colors, true));
        }
    }, [release.art]);
    var image = (_b = release.art[selected]) === null || _b === void 0 ? void 0 : _b.dataURL;
    return (require$$0$1.jsxs("div", __assign({ className: "w-full flex flex-col items-center" }, { children: [require$$0$1.jsx(AlbumArt, { image: image }), require$$0$1.jsx("div", __assign({ className: "w-full flex justify-center my-4" }, { children: artTypes.map(function (entry, i) {
                    var variant = selected == entry.type
                        ? 'solid'
                        : release.art[entry.type]
                            ? 'faded'
                            : 'bordered';
                    return (require$$0$1.jsx(Chip, __assign({ className: "mx-2 cursor-pointer", variant: variant, onClick: function () { return setSelected(entry.type); } }, { children: entry.display }), i));
                }) }))] })));
}

function ReleaseInfo(_a) {
    var release = _a.release, setReleaseProperty = _a.setReleaseProperty; _a.artColors;
    return (require$$0$1.jsxs("div", { children: [require$$0$1.jsx(Input, { label: "release title", placeholder: "Title of your release", value: release.display, setValue: function (value) { return setReleaseProperty('display', value); } }), require$$0$1.jsxs(RadioGroup
            //label="release type"
            , __assign({ 
                //label="release type"
                orientation: "horizontal", additionalClasses: "my-4", value: release.type, setValue: function (value) { return setReleaseProperty('type', value); } }, { children: [require$$0$1.jsx(Radio, __assign({ value: "demo" }, { children: "Demo" })), require$$0$1.jsx(Radio, __assign({ value: "ep" }, { children: "EP" })), require$$0$1.jsx(Radio, __assign({ value: "lp" }, { children: "LP" })), require$$0$1.jsx(Radio, __assign({ value: "split" }, { children: "Split" })), require$$0$1.jsx(Radio, __assign({ value: "comp" }, { children: "Compilation" }))] })), require$$0$1.jsx(Textarea, { label: "about the release", additionalClasses: "my-4", value: release.description, setValue: function (value) { return setReleaseProperty('description', value); } }), require$$0$1.jsx(Textarea, { label: "credits & thanks", additionalClasses: "my-4", value: release.credits, setValue: function (value) { return setReleaseProperty('credits', value); } }), require$$0$1.jsx(Input, { additionalClasses: "mt-4 mb-2", label: "tags", placeholder: "type to search tags..." }), require$$0$1.jsxs("p", __assign({ className: "bg-zinc-500 font-content text-sm text-white p-1 rounded-xl" }, { children: [require$$0$1.jsx("i", { className: "fa-fw fa-solid fa-tag mr-1" }), "A little blurb on the importance of tags here."] })), require$$0$1.jsx(Input, { placeholder: "EZ123420", additionalClasses: "my-4", label: "upc/ean", value: release.upc, setValue: function (value) { return setReleaseProperty('upc', value); } })] }));
}

function ColorPalette(_a) {
    var artColors = _a.artColors;
    return (require$$0$1.jsx("div", __assign({ className: "flex flex-wrap justify-around w-full" }, { children: artColors.map(function (color, i) { return (require$$0$1.jsx("div", { className: "w-[3rem] h-[3rem] cursor-pointer my-2", style: { backgroundColor: color }, onClick: function () { return navigator.clipboard.writeText(color); } }, i)); }) })));
}

function ReleaseTheme(_a) {
    var artColors = _a.artColors, release = _a.release, setReleaseProperty = _a.setReleaseProperty;
    return (require$$0$1.jsxs("div", { children: [require$$0$1.jsx("h3", __assign({ className: "font-header text-2xl" }, { children: "Theme" })), artColors.length ? (require$$0$1.jsxs("div", __assign({ className: "w-full" }, { children: [require$$0$1.jsx(ColorPalette, { artColors: artColors }), require$$0$1.jsxs("p", __assign({ className: "bg-zinc-500 font-content text-sm text-white p-2 rounded-xl" }, { children: [require$$0$1.jsx("i", { className: "fa-sharp fa-solid fa-circle-info mr-1" }), "We've gathered these colors from the art you've uploaded. Click to copy it's hex code."] }))] }))) : (require$$0$1.jsx(require$$0$1.Fragment, {})), require$$0$1.jsx(Input, { additionalClasses: "mt-4 mb-2", label: "primary color", placeholder: "#000000", value: release.colors.primary, setValue: function (value) {
                    return setReleaseProperty('colors', __assign(__assign({}, release.colors), { primary: value }));
                } }), require$$0$1.jsx(Input, { additionalClasses: "mt-4 mb-2", label: "secondary color", placeholder: "#FFFFFF", value: release.colors.secondary, setValue: function (value) {
                    return setReleaseProperty('colors', __assign(__assign({}, release.colors), { secondary: value }));
                } })] }));
}

function Song(_a) {
    var index = _a.index, data = _a.data;
    var _b = require$$1$1.useState(false), isOpen = _b[0], setOpen = _b[1];
    return (require$$0$1.jsxs("div", __assign({ className: "border-b-1 py-4" }, { children: [require$$0$1.jsxs("h4", __assign({ className: "font-header text-xl cursor-pointer", onClick: function () { return setOpen(!isOpen); } }, { children: [index + 1, ". ", data.display] })), require$$0$1.jsxs("div", __assign({ className: "".concat(isOpen ? 'flex' : 'hidden', " flex-col") }, { children: [require$$0$1.jsx(Input, { label: "title", additionalClasses: "my-2", value: data.display }), require$$0$1.jsx(Textarea, { label: "lyrics", additionalClasses: "my-2", value: data.lyrics.unsynced }), require$$0$1.jsx(Input, { label: "isrc", additionalClasses: "my-2", value: data.isrc })] }))] })));
}

var ToneCSSUtils = /** @class */ (function () {
    function ToneCSSUtils() {
    }
    ToneCSSUtils.setColors = function (namespace, primary, secondary) {
        var _a, _b, _c, _d;
        var cssNamespace = '--' + namespace;
        (_a = document
            .querySelector('html')) === null || _a === void 0 ? void 0 : _a.style.setProperty(cssNamespace + '-primary', primary);
        (_b = document
            .querySelector('html')) === null || _b === void 0 ? void 0 : _b.style.setProperty(cssNamespace + '-secondary', secondary);
        var primaryRgb = this.hexToRgb(primary);
        var secondaryRgb = this.hexToRgb(secondary);
        if (primaryRgb && secondaryRgb) {
            var primaryBrightness = primaryRgb.r + primaryRgb.g + primaryRgb.b;
            var secondaryBrightness = secondaryRgb.r + secondaryRgb.g + secondaryRgb.b;
            var brightness = primaryBrightness > secondaryBrightness
                ? { lighter: primary, darker: secondary }
                : { lighter: secondary, darker: primary };
            (_c = document
                .querySelector('html')) === null || _c === void 0 ? void 0 : _c.style.setProperty(cssNamespace + '-darker', brightness.darker);
            (_d = document
                .querySelector('html')) === null || _d === void 0 ? void 0 : _d.style.setProperty(cssNamespace + '-lighter', brightness.lighter);
        }
    };
    ToneCSSUtils.hexToRgb = function (hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
            ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
            }
            : null;
    };
    return ToneCSSUtils;
}());

var uploadReleaseDefaults = {
    display: '',
    type: 'lp',
    description: '',
    art: {},
    upc: '',
    catalog: '',
    credits: '',
    colors: {
        primary: '#000000',
        secondary: '#FFFFFF',
    },
    pricing: {
        purchase: '',
        streamDefault: '',
    },
};
function UploadPage(_a) {
    var _b;
    var _c = require$$1$1.useState(uploadReleaseDefaults), release = _c[0], setRelease = _c[1];
    var _d = require$$1$1.useState([]), songs = _d[0], setSongs = _d[1];
    var _e = require$$1$1.useState([]), artColors = _e[0], setArtColors = _e[1];
    var _f = require$$1$1.useState(false); _f[0]; _f[1];
    new useToneApi();
    require$$1$1.useEffect(function () {
        console.log({ release: release });
    }, [release]);
    require$$1$1.useEffect(function () {
        var _a = release.colors, primary = _a.primary, secondary = _a.secondary;
        if (primary && secondary)
            ToneCSSUtils.setColors('tone-upload-preview', primary, secondary);
    }, [release.colors]);
    return (require$$0$1.jsxs(Page, __assign({ name: name, version: version$1, className: "flex" }, { children: [require$$0$1.jsxs("div", __assign({ className: "w-1/2 p-4 h-full max-h-screen bg-[var(--tone-upload-preview-lighter)] text-[var(--tone-upload-preview-darker)] dark:bg-[var(--tone-upload-preview-darker)] dark:text-[var(--tone-upload-preview-lighter)]", style: { overflowY: 'scroll' } }, { children: [require$$0$1.jsxs("div", { children: [Object.keys(release.art).length ? (require$$0$1.jsx("div", __assign({ className: "w-full flex items-center justify-center p-4" }, { children: require$$0$1.jsx("img", { src: (_b = release.art['cover']) === null || _b === void 0 ? void 0 : _b.dataURL, style: { height: '100%', maxWidth: 'auto' } }) }))) : (require$$0$1.jsx(require$$0$1.Fragment, {})), require$$0$1.jsxs("div", __assign({ className: "my-2" }, { children: [release.display ? (require$$0$1.jsx("h1", __assign({ className: "font-release text-5xl font-bold" }, { children: release.display }))) : (require$$0$1.jsx("h1", __assign({ className: "font-release text-5xl font-bold opacity-20" }, { children: "Title of your release" }))), require$$0$1.jsxs("p", __assign({ className: "font-header text-sm" }, { children: [songs.length || 0, " song", songs.length !== 1 && 's', ", total time,", ' ' + formatReleaseType(release.type)] })), require$$0$1.jsxs("p", __assign({ className: "font-content text-sm" }, { children: ["by ", require$$0$1.jsx("span", __assign({ className: "font-header" }, { children: "[artist]" }))] }))] })), require$$0$1.jsxs("p", __assign({ className: "font-content text-sm" }, { children: ["Released on ", require$$0$1.jsx("span", __assign({ className: "font-header" }, { children: "[date]" }))] }))] }), require$$0$1.jsxs("div", { children: [require$$0$1.jsx("h4", __assign({ className: "font-header hidden" }, { children: "About the release" })), require$$0$1.jsx("p", __assign({ className: "font-content whitespace-pre-wrap" }, { children: release.description }))] }), require$$0$1.jsx("div", { children: songs.length ? (songs.map(function (song, i) { return (require$$0$1.jsxs("div", __assign({ className: "py-4 flex align-center justify-between" }, { children: [require$$0$1.jsx("span", __assign({ className: "font-content" }, { children: song.display })), require$$0$1.jsx("span", __assign({ className: "font-header" }, { children: formatMSS(Math.trunc(song.duration)) }))] }), i)); })) : (require$$0$1.jsx(require$$0$1.Fragment, {})) }), require$$0$1.jsxs("div", { children: [require$$0$1.jsx("h4", __assign({ className: "font-header hidden" }, { children: "Release credits" })), require$$0$1.jsx("p", __assign({ className: "font-content whitespace-pre-wrap" }, { children: release.credits }))] })] })), require$$0$1.jsxs("div", __assign({ className: "w-1/2 max-h-screen p-4", style: { overflowY: 'scroll' } }, { children: [require$$0$1.jsx(BulkUpload, { setReleaseProperty: setReleaseProperty, setSongs: setSongs }), require$$0$1.jsx(ReleaseArt, { release: release, setReleaseProperty: setReleaseProperty, artColors: artColors, setArtColors: setArtColors }), require$$0$1.jsx(ReleaseInfo, { release: release, setReleaseProperty: setReleaseProperty, artColors: artColors }), require$$0$1.jsx(ReleaseTheme, { artColors: artColors, release: release, setReleaseProperty: setReleaseProperty }), songs.map(function (data, i) { return (require$$0$1.jsx(Song, { index: i, data: data }, i)); })] }))] })));
    function setReleaseProperty(key, value) {
        var _a;
        setRelease(__assign(__assign({}, release), (_a = {}, _a[key] = value, _a)));
    }
    function formatMSS(s) {
        return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + s;
    }
    function formatReleaseType(type) {
        switch (type) {
            case 'lp':
                return 'LP';
            case 'ep':
                return 'EP';
            case 'demo':
                return 'Demo';
            case 'comp':
                return 'Compilation';
        }
    }
}

module.exports = UploadPage;
//# sourceMappingURL=index.js.map
